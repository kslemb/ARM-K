cscope 15 $HOME/lwip/lwip/src               0001169404
	@api/api_lib.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_NETCONN


46 
	~"lwù/≠i.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/memp.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

55 
	~<°rög.h
>

67 
√tc⁄n
*

68 
	$√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

70 
√tc⁄n
 *
c⁄n
;

71 
≠i_msg
 
msg
;

73 
c⁄n
 = 
	`√tc⁄n_Æloc
(
t
, 
ˇŒback
);

74 i‡(
c⁄n
 !
NULL
 ) {

75 
msg
.
fun˘i⁄
 = 
do_√wc⁄n
;

76 
msg
.msg.msg.
n
.
¥Ÿo
 =Öroto;

77 
msg
.msg.
c⁄n
 = conn;

78 
	`TCPIP_APIMSG
(&
msg
);

80 i‡(
c⁄n
->
îr
 !
ERR_OK
) {

81 
	`LWIP_ASSERT
("‰ìög c⁄¿wôhouà‰ìögÖcb", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

82 
	`LWIP_ASSERT
("c⁄¿ha†nÿ›_com∂ëed", 
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
);

83 
	`LWIP_ASSERT
("c⁄¿ha†nÿªcvmbox", 
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
);

84 
	`LWIP_ASSERT
("c⁄n->ac˚±mbox shouldn'àexi°", 
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
);

85 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

86 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

87 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

88  
NULL
;

91  
c⁄n
;

92 
	}
}

102 
îr_t


103 
	$√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
)

105 
≠i_msg
 
msg
;

108 i‡(
c⁄n
 =
NULL
) {

109  
ERR_OK
;

112 
msg
.
fun˘i⁄
 = 
do_dñc⁄n
;

113 
msg
.msg.
c⁄n
 = conn;

114 
	`t˝ù_≠imsg
(&
msg
);

116 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

117 
	`√tc⁄n_‰ì
(
c⁄n
);

119  
ERR_OK
;

120 
	}
}

133 
îr_t


134 
	$√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
)

136 
≠i_msg
 
msg
;

138 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

139 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

140 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidÖ‹t", (
p‹t
 !
NULL
),  
ERR_ARG
;);

142 
msg
.
fun˘i⁄
 = 
do_gëaddr
;

143 
msg
.msg.
c⁄n
 = conn;

144 
msg
.msg.msg.
ad
.
ùaddr
 = 
addr
;

145 
msg
.msg.msg.
ad
.
p‹t
 =Öort;

146 
msg
.msg.msg.
ad
.
loˇl
 =Üocal;

147 
	`TCPIP_APIMSG
(&
msg
);

149  
c⁄n
->
îr
;

150 
	}
}

162 
îr_t


163 
	$√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

165 
≠i_msg
 
msg
;

167 
	`LWIP_ERROR
("√tc⁄n_böd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

169 
msg
.
fun˘i⁄
 = 
do_böd
;

170 
msg
.msg.
c⁄n
 = conn;

171 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

172 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

173 
	`TCPIP_APIMSG
(&
msg
);

174  
c⁄n
->
îr
;

175 
	}
}

185 
îr_t


186 
	$√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

188 
≠i_msg
 
msg
;

190 
	`LWIP_ERROR
("√tc⁄n_c⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

192 
msg
.
fun˘i⁄
 = 
do_c⁄√˘
;

193 
msg
.msg.
c⁄n
 = conn;

194 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

195 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

197 
	`t˝ù_≠imsg
(&
msg
);

198  
c⁄n
->
îr
;

199 
	}
}

207 
îr_t


208 
	$√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
)

210 
≠i_msg
 
msg
;

212 
	`LWIP_ERROR
("√tc⁄n_disc⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

214 
msg
.
fun˘i⁄
 = 
do_disc⁄√˘
;

215 
msg
.msg.
c⁄n
 = conn;

216 
	`TCPIP_APIMSG
(&
msg
);

217  
c⁄n
->
îr
;

218 
	}
}

228 
îr_t


229 
	$√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
)

231 
≠i_msg
 
msg
;

234 
	`LWIP_UNUSED_ARG
(
backlog
);

236 
	`LWIP_ERROR
("√tc⁄n_li°í: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

238 
msg
.
fun˘i⁄
 = 
do_li°í
;

239 
msg
.msg.
c⁄n
 = conn;

240 #i‡
TCP_LISTEN_BACKLOG


241 
msg
.msg.msg.
lb
.
backlog
 = backlog;

243 
	`TCPIP_APIMSG
(&
msg
);

244  
c⁄n
->
îr
;

245 
	}
}

253 
√tc⁄n
 *

254 
	$√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
)

256 
√tc⁄n
 *
√wc⁄n
;

258 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

259 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidác˚±mbox", (
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
),  
NULL
;);

261 #i‡
LWIP_SO_RCVTIMEO


262 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, c⁄n->
ªcv_timeout
Ë=
SYS_ARCH_TIMEOUT
) {

263 
√wc⁄n
 = 
NULL
;

266 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, 0);

270 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

272 #i‡
TCP_LISTEN_BACKLOG


273 i‡(
√wc⁄n
 !
NULL
) {

275 
≠i_msg
 
msg
;

276 
msg
.
fun˘i⁄
 = 
do_ªcv
;

277 
msg
.msg.
c⁄n
 = conn;

278 
	`TCPIP_APIMSG
(&
msg
);

283  
√wc⁄n
;

284 
	}
}

292 
√tbuf
 *

293 
	$√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
)

295 
≠i_msg
 
msg
;

296 
√tbuf
 *
buf
 = 
NULL
;

297 
pbuf
 *
p
;

298 
u16_t
 
Àn
;

300 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

302 i‡(
c⁄n
->
ªcvmbox
 =
SYS_MBOX_NULL
) {

305 
c⁄n
->
îr
 = 
ERR_CONN
;

306  
NULL
;

309 i‡(
	`ERR_IS_FATAL
(
c⁄n
->
îr
)) {

310  
NULL
;

313 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

314 #i‡
LWIP_TCP


315 i‡(
c⁄n
->
°©e
 =
NETCONN_LISTEN
) {

317 
c⁄n
->
îr
 = 
ERR_CONN
;

318  
NULL
;

321 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

323 i‡(
buf
 =
NULL
) {

324 
c⁄n
->
îr
 = 
ERR_MEM
;

325  
NULL
;

328 #i‡
LWIP_SO_RCVTIMEO


329 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

330 
c⁄n
->
îr
 = 
ERR_TIMEOUT
;

331 
p
 = 
NULL
;

334 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, 0);

337 i‡(
p
 !
NULL
) {

338 
Àn
 = 
p
->
tŸ_Àn
;

339 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

341 
Àn
 = 0;

345 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
Àn
);

348 i‡(
p
 =
NULL
) {

349 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

351 i‡(
c⁄n
->
îr
 =
ERR_OK
) {

352 
c⁄n
->
îr
 = 
ERR_CLSD
;

354  
NULL
;

357 
buf
->
p
 =Ö;

358 
buf
->
±r
 = 
p
;

359 
buf
->
p‹t
 = 0;

360 
buf
->
addr
 = 
NULL
;

363 
msg
.
fun˘i⁄
 = 
do_ªcv
;

364 
msg
.msg.
c⁄n
 = conn;

365 i‡(
buf
 !
NULL
) {

366 
msg
.msg.msg.
r
.
Àn
 = 
buf
->
p
->
tŸ_Àn
;

368 
msg
.msg.msg.
r
.
Àn
 = 1;

370 
	`TCPIP_APIMSG
(&
msg
);

373 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

374 #i‡
LWIP_SO_RCVTIMEO


375 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

376 
buf
 = 
NULL
;

379 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, 0);

381 i‡(
buf
!=
NULL
) {

382 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
buf
->
p
->
tŸ_Àn
);

384 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
buf
->
p
->
tŸ_Àn
);

389 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_ªcv:Ñe˚ived %∞”º %d)\n", (*)
buf
, 
c⁄n
->
îr
));

391  
buf
;

392 
	}
}

404 
îr_t


405 
	$√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

407 i‡(
buf
 !
NULL
) {

408 
buf
->
addr
 =áddr;

409 
buf
->
p‹t
 =Öort;

410  
	`√tc⁄n_£nd
(
c⁄n
, 
buf
);

412  
ERR_VAL
;

413 
	}
}

422 
îr_t


423 
	$√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
)

425 
≠i_msg
 
msg
;

427 
	`LWIP_ERROR
("√tc⁄n_£nd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

429 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_£nd: sídög %"
U16_F
" byãs\n", 
buf
->
p
->
tŸ_Àn
));

430 
msg
.
fun˘i⁄
 = 
do_£nd
;

431 
msg
.msg.
c⁄n
 = conn;

432 
msg
.msg.msg.
b
 = 
buf
;

433 
	`TCPIP_APIMSG
(&
msg
);

434  
c⁄n
->
îr
;

435 
	}
}

448 
îr_t


449 
	$√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
, 
u8_t
 
≠iÊags
)

451 
≠i_msg
 
msg
;

453 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

454 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n->ty≥", (
c⁄n
->
ty≥
 =
NETCONN_TCP
),  
ERR_VAL
;);

456 
msg
.
fun˘i⁄
 = 
do_wrôe
;

457 
msg
.msg.
c⁄n
 = conn;

458 
msg
.msg.msg.
w
.
d©≠å
 = dataptr;

459 
msg
.msg.msg.
w
.
≠iÊags
 =ápiflags;

460 
msg
.msg.msg.
w
.
Àn
 = 
size
;

464 
	`TCPIP_APIMSG
(&
msg
);

465  
c⁄n
->
îr
;

466 
	}
}

474 
îr_t


475 
	$√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
)

477 
≠i_msg
 
msg
;

479 
	`LWIP_ERROR
("√tc⁄n_˛o£: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

481 
msg
.
fun˘i⁄
 = 
do_˛o£
;

482 
msg
.msg.
c⁄n
 = conn;

483 
	`t˝ù_≠imsg
(&
msg
);

484  
c⁄n
->
îr
;

485 
	}
}

487 #i‡
LWIP_IGMP


498 
îr_t


499 
	$√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
,

500 
ù_addr
 *
mu…üddr
,

501 
ù_addr
 *
öãrÁ˚
,

502 
√tc⁄n_igmp
 
joö_‹_Àave
)

504 
≠i_msg
 
msg
;

506 
	`LWIP_ERROR
("√tc⁄n_joö_Àave_group: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

508 
msg
.
fun˘i⁄
 = 
do_joö_Àave_group
;

509 
msg
.msg.
c⁄n
 = conn;

510 
msg
.msg.msg.
jl
.
mu…üddr
 = multiaddr;

511 
msg
.msg.msg.
jl
.
öãrÁ˚
 = interface;

512 
msg
.msg.msg.
jl
.
joö_‹_Àave
 = join_or_leave;

513 
	`TCPIP_APIMSG
(&
msg
);

514  
c⁄n
->
îr
;

515 
	}
}

518 #i‡
LWIP_DNS


529 
îr_t


530 
	$√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
)

532 
dns_≠i_msg
 
msg
;

533 
îr_t
 
îr
;

534 
sys_£m_t
 
£m
;

536 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidÇame", (
«me
 !
NULL
),  
ERR_ARG
;);

537 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

539 
£m
 = 
	`sys_£m_√w
(0);

540 i‡(
£m
 =
SYS_SEM_NULL
) {

541  
ERR_MEM
;

544 
msg
.
«me
 =Çame;

545 
msg
.
addr
 =áddr;

546 
msg
.
îr
 = &err;

547 
msg
.
£m
 = sem;

549 
	`t˝ù_ˇŒback
(
do_gëho°by«me
, &
msg
);

550 
	`sys_£m_waô
(
£m
);

551 
	`sys_£m_‰ì
(
£m
);

553  
îr
;

554 
	}
}

	@api/api_msg.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/≠i_msg.h
"

45 
	~"lwù/ù.h
"

46 
	~"lwù/udp.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/øw.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/igmp.h
"

53 
	~"lwù/dns.h
"

55 
	~<°rög.h
>

58 #i‡
LWIP_TCP


59 
îr_t
 
do_wrôem‹e
(
√tc⁄n
 *
c⁄n
);

60 
do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
);

63 #i‡
LWIP_RAW


71 
u8_t


72 
	$ªcv_øw
(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

73 
ù_addr
 *
addr
)

75 
pbuf
 *
q
;

76 
√tbuf
 *
buf
;

77 
√tc⁄n
 *
c⁄n
;

78 #i‡
LWIP_SO_RCVBUF


79 
ªcv_avaû
;

82 
	`LWIP_UNUSED_ARG
(
addr
);

83 
c⁄n
 = 
¨g
;

85 #i‡
LWIP_SO_RCVBUF


86 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

87 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
) &&

88 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë<
c⁄n
->
ªcv_bufsize
)) {

90 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
)) {

93 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

94 if(
q
 !
NULL
) {

95 i‡(
	`pbuf_c›y
(
q
, 
p
Ë!
ERR_OK
) {

96 
	`pbuf_‰ì
(
q
);

97 
q
 = 
NULL
;

101 if(
q
 !
NULL
) {

102 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

103 i‡(
buf
 =
NULL
) {

104 
	`pbuf_‰ì
(
q
);

108 
buf
->
p
 = 
q
;

109 
buf
->
±r
 = 
q
;

110 
buf
->
addr
 = &(((
ù_hdr
*)(
q
->
∑ylﬂd
))->
§c
);

111 
buf
->
p‹t
 = 
pcb
->
¥Ÿocﬁ
;

113 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

114 
	`√tbuf_dñëe
(
buf
);

117 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
q
->
tŸ_Àn
);

119 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
q
->
tŸ_Àn
);

125 
	}
}

128 #i‡
LWIP_UDP


136 
	$ªcv_udp
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

137 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

139 
√tbuf
 *
buf
;

140 
√tc⁄n
 *
c⁄n
;

141 #i‡
LWIP_SO_RCVBUF


142 
ªcv_avaû
;

145 
	`LWIP_UNUSED_ARG
(
pcb
);

146 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê®pcbárgumít", 
pcb
 !
NULL
);

147 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê™árgumít", 
¨g
 !
NULL
);

148 
c⁄n
 = 
¨g
;

149 
	`LWIP_ASSERT
("ªcv_udp:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
udp
 ==Öcb);

151 #i‡
LWIP_SO_RCVBUF


152 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

153 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
) ||

154 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
)) {

156 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

158 
	`pbuf_‰ì
(
p
);

162 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

163 i‡(
buf
 =
NULL
) {

164 
	`pbuf_‰ì
(
p
);

167 
buf
->
p
 =Ö;

168 
buf
->
±r
 = 
p
;

169 
buf
->
addr
 =áddr;

170 
buf
->
p‹t
 =Öort;

173 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

174 
	`√tbuf_dñëe
(
buf
);

177 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
p
->
tŸ_Àn
);

179 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
p
->
tŸ_Àn
);

181 
	}
}

184 #i‡
LWIP_TCP


191 
îr_t


192 
	$ªcv_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

194 
√tc⁄n
 *
c⁄n
;

195 
u16_t
 
Àn
;

197 
	`LWIP_UNUSED_ARG
(
pcb
);

198 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê®pcbárgumít", 
pcb
 !
NULL
);

199 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê™árgumít", 
¨g
 !
NULL
);

200 
c⁄n
 = 
¨g
;

201 
	`LWIP_ASSERT
("ªcv_t˝:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
t˝
 ==Öcb);

203 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

204  
ERR_VAL
;

207 
c⁄n
->
îr
 =Érr;

208 i‡(
p
 !
NULL
) {

209 
Àn
 = 
p
->
tŸ_Àn
;

210 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

212 
Àn
 = 0;

215 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
p
Ë!
ERR_OK
) {

216  
ERR_MEM
;

219 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

222  
ERR_OK
;

223 
	}
}

236 
îr_t


237 
	$pﬁl_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
)

239 
√tc⁄n
 *
c⁄n
 = 
¨g
;

241 
	`LWIP_UNUSED_ARG
(
pcb
);

242 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

244 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

245 
	`do_wrôem‹e
(
c⁄n
);

246 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

247 
	`do_˛o£_öã∫Æ
(
c⁄n
);

250  
ERR_OK
;

251 
	}
}

260 
îr_t


261 
	$£¡_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

263 
√tc⁄n
 *
c⁄n
 = 
¨g
;

265 
	`LWIP_UNUSED_ARG
(
pcb
);

266 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

268 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

269 
	`LWIP_ASSERT
("c⁄n->pcb.t˝ !NULL", 
c⁄n
->
pcb
.
t˝
 !
NULL
);

270 
	`do_wrôem‹e
(
c⁄n
);

271 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

272 
	`do_˛o£_öã∫Æ
(
c⁄n
);

275 i‡(
c⁄n
) {

276 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
)) {

277 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 
Àn
);

281  
ERR_OK
;

282 
	}
}

292 
	$îr_t˝
(*
¨g
, 
îr_t
 
îr
)

294 
√tc⁄n
 *
c⁄n
;

296 
c⁄n
 = 
¨g
;

297 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

299 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

301 
c⁄n
->
îr
 =Érr;

302 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

304 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

305 
	`sys_mbox_po°
(
c⁄n
->
ªcvmbox
, 
NULL
);

307 i‡(
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
 && c⁄n->
°©e
 =
NETCONN_CONNECT
) {

308 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

309 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

311 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

313 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

314 
	`sys_mbox_po°
(
c⁄n
->
ac˚±mbox
, 
NULL
);

316 i‡((
c⁄n
->
°©e
 =
NETCONN_WRITE
Ë|| (c⁄n->°©ê=
NETCONN_CLOSE
)) {

319 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

321 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

323 
	}
}

332 
	$£tup_t˝
(
√tc⁄n
 *
c⁄n
)

334 
t˝_pcb
 *
pcb
;

336 
pcb
 = 
c⁄n
->pcb.
t˝
;

337 
	`t˝_¨g
(
pcb
, 
c⁄n
);

338 
	`t˝_ªcv
(
pcb
, 
ªcv_t˝
);

339 
	`t˝_£¡
(
pcb
, 
£¡_t˝
);

340 
	`t˝_pﬁl
(
pcb
, 
pﬁl_t˝
, 4);

341 
	`t˝_îr
(
pcb
, 
îr_t˝
);

342 
	}
}

350 
îr_t


351 
	$ac˚±_fun˘i⁄
(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

353 
√tc⁄n
 *
√wc⁄n
;

354 
√tc⁄n
 *
c⁄n
;

356 #i‡
API_MSG_DEBUG


357 #i‡
TCP_DEBUG


358 
	`t˝_debug_¥öt_°©e
(
√wpcb
->
°©e
);

361 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

363 
	`LWIP_ERROR
("accept_function: invalid conn->acceptmbox",

364 
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
,  
ERR_VAL
;);

368 
√wc⁄n
 = 
	`√tc⁄n_Æloc
(
c⁄n
->
ty≥
, c⁄n->
ˇŒback
);

369 i‡(
√wc⁄n
 =
NULL
) {

370  
ERR_MEM
;

372 
√wc⁄n
->
pcb
.
t˝
 = 
√wpcb
;

373 
	`£tup_t˝
(
√wc⁄n
);

374 
√wc⁄n
->
îr
 =Érr;

376 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ac˚±mbox
, 
√wc⁄n
Ë!
ERR_OK
) {

379 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

380 
	`√tc⁄n_‰ì
(
√wc⁄n
);

381  
ERR_MEM
;

384 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

387  
ERR_OK
;

388 
	}
}

398 
îr_t


399 
	$pcb_√w
(
≠i_msg_msg
 *
msg
)

401 
msg
->
c⁄n
->
îr
 = 
ERR_OK
;

403 
	`LWIP_ASSERT
("pcb_√w:ÖcbáÃódyáŒoˇãd", 
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
);

406 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

407 #i‡
LWIP_RAW


408 
NETCONN_RAW
:

409 
msg
->
c⁄n
->
pcb
.
øw
 = 
	`øw_√w
(msg->msg.
n
.
¥Ÿo
);

410 if(
msg
->
c⁄n
->
pcb
.
øw
 =
NULL
) {

411 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

414 
	`øw_ªcv
(
msg
->
c⁄n
->
pcb
.
øw
, 
ªcv_øw
, msg->conn);

417 #i‡
LWIP_UDP


418 
NETCONN_UDP
:

419 
msg
->
c⁄n
->
pcb
.
udp
 = 
	`udp_√w
();

420 if(
msg
->
c⁄n
->
pcb
.
udp
 =
NULL
) {

421 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

424 #i‡
LWIP_UDPLITE


425 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPLITE
) {

426 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_UDPLITE
);

429 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPNOCHKSUM
) {

430 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_NOCHKSUM
);

432 
	`udp_ªcv
(
msg
->
c⁄n
->
pcb
.
udp
, 
ªcv_udp
, msg->conn);

435 #i‡
LWIP_TCP


436 
NETCONN_TCP
:

437 
msg
->
c⁄n
->
pcb
.
t˝
 = 
	`t˝_√w
();

438 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

439 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

442 
	`£tup_t˝
(
msg
->
c⁄n
);

447 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

451  
msg
->
c⁄n
->
îr
;

452 
	}
}

461 
	$do_√wc⁄n
(
≠i_msg_msg
 *
msg
)

463 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

464 
	`pcb_√w
(
msg
);

470 
	`TCPIP_APIMSG_ACK
(
msg
);

471 
	}
}

483 
√tc⁄n
*

484 
	$√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

486 
√tc⁄n
 *
c⁄n
;

487 
size
;

489 
c⁄n
 = 
	`memp_mÆloc
(
MEMP_NETCONN
);

490 i‡(
c⁄n
 =
NULL
) {

491  
NULL
;

494 
c⁄n
->
îr
 = 
ERR_OK
;

495 
c⁄n
->
ty≥
 = 
t
;

496 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

498 #i‡(
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_UDP_RECVMBOX_SIZE
) && \

499 (
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_TCP_RECVMBOX_SIZE
)

500 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

502 
	`NETCONNTYPE_GROUP
(
t
)) {

503 #i‡
LWIP_RAW


504 
NETCONN_RAW
:

505 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

508 #i‡
LWIP_UDP


509 
NETCONN_UDP
:

510 
size
 = 
DEFAULT_UDP_RECVMBOX_SIZE
;

513 #i‡
LWIP_TCP


514 
NETCONN_TCP
:

515 
size
 = 
DEFAULT_TCP_RECVMBOX_SIZE
;

519 
	`LWIP_ASSERT
("netconn_alloc: undefinedÇetconn_type", 0);

524 i‡((
c⁄n
->
›_com∂ëed
 = 
	`sys_£m_√w
(0)Ë=
SYS_SEM_NULL
) {

525 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

526  
NULL
;

528 i‡((
c⁄n
->
ªcvmbox
 = 
	`sys_mbox_√w
(
size
)Ë=
SYS_MBOX_NULL
) {

529 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

530 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

531  
NULL
;

534 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

535 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

537 
c⁄n
->
sockë
 = -1;

538 
c⁄n
->
ˇŒback
 = callback;

539 
c⁄n
->
ªcv_avaû
 = 0;

540 #i‡
LWIP_TCP


541 
c⁄n
->
wrôe_msg
 = 
NULL
;

542 
c⁄n
->
wrôe_off£t
 = 0;

543 #i‡
LWIP_TCPIP_CORE_LOCKING


544 
c⁄n
->
wrôe_dñayed
 = 0;

547 #i‡
LWIP_SO_RCVTIMEO


548 
c⁄n
->
ªcv_timeout
 = 0;

550 #i‡
LWIP_SO_RCVBUF


551 
c⁄n
->
ªcv_bufsize
 = 
RECV_BUFSIZE_DEFAULT
;

553  
c⁄n
;

554 
	}
}

563 
	$√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
)

565 *
mem
;

566 
	`LWIP_ASSERT
("PCB mu° bêdóŒoˇãd outsidêthi†fun˘i⁄", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

569 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

570 
	`sys_mbox_åy„tch
(
c⁄n
->
ªcvmbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

571 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

572 if(
mem
 !
NULL
) {

573 
	`pbuf_‰ì
((
pbuf
 *)
mem
);

576 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

579 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

580 
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

584 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

585 
	`sys_mbox_åy„tch
(
c⁄n
->
ac˚±mbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

586 
	`√tc⁄n_dñëe
((
√tc⁄n
 *)
mem
);

588 
	`sys_mbox_‰ì
(
c⁄n
->
ac˚±mbox
);

589 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

592 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

593 
c⁄n
->
›_com∂ëed
 = 
SYS_SEM_NULL
;

595 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

596 
	}
}

598 #i‡
LWIP_TCP


607 
	$do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
)

609 
îr_t
 
îr
;

611 
	`LWIP_ASSERT
("övÆid c⁄n", (
c⁄n
 !
NULL
));

612 
	`LWIP_ASSERT
("thi†i†f‹Å˝Çëc⁄n†⁄ly", (
c⁄n
->
ty≥
 =
NETCONN_TCP
));

613 
	`LWIP_ASSERT
("c⁄¿mu° bêö sèã NETCONN_CLOSE", (
c⁄n
->
°©e
 =
NETCONN_CLOSE
));

614 
	`LWIP_ASSERT
("pcbáÃódy clo£d", (
c⁄n
->
pcb
.
t˝
 !
NULL
));

617 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

618 i‡(
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

619 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

621 
	`t˝_ªcv
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

622 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

624 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

625 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
NULL
, 4);

626 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

629 
îr
 = 
	`t˝_˛o£
(
c⁄n
->
pcb
.
t˝
);

630 i‡(
îr
 =
ERR_OK
) {

632 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

634 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

635 
c⁄n
->
îr
 = 
ERR_OK
;

638 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

639 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

641 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

645 
	`LWIP_ASSERT
("ClosögáÜi°íÖcb mayÇŸ faû!", (
c⁄n
->
pcb
.
t˝
->
°©e
 !
LISTEN
));

646 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
£¡_t˝
);

647 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
pﬁl_t˝
, 4);

648 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
îr_t˝
);

649 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, conn);

653 
	}
}

663 
	$do_dñc⁄n
(
≠i_msg_msg
 *
msg
)

665 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

666 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

667 #i‡
LWIP_RAW


668 
NETCONN_RAW
:

669 
	`øw_ªmove
(
msg
->
c⁄n
->
pcb
.
øw
);

672 #i‡
LWIP_UDP


673 
NETCONN_UDP
:

674 
msg
->
c⁄n
->
pcb
.
udp
->
ªcv_¨g
 = 
NULL
;

675 
	`udp_ªmove
(
msg
->
c⁄n
->
pcb
.
udp
);

678 #i‡
LWIP_TCP


679 
NETCONN_TCP
:

680 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

681 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

694 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

695 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

697 i‡(
msg
->
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
) {

698 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

700 
	}
}

710 
	$do_böd
(
≠i_msg_msg
 *
msg
)

712 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

713 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

714 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

715 #i‡
LWIP_RAW


716 
NETCONN_RAW
:

717 
msg
->
c⁄n
->
îr
 = 
	`øw_böd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

720 #i‡
LWIP_UDP


721 
NETCONN_UDP
:

722 
msg
->
c⁄n
->
îr
 = 
	`udp_böd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

725 #i‡
LWIP_TCP


726 
NETCONN_TCP
:

727 
msg
->
c⁄n
->
îr
 = 
	`t˝_böd
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

735 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

738 
	`TCPIP_APIMSG_ACK
(
msg
);

739 
	}
}

741 #i‡
LWIP_TCP


748 
îr_t


749 
	$do_c⁄√˘ed
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

751 
√tc⁄n
 *
c⁄n
;

753 
	`LWIP_UNUSED_ARG
(
pcb
);

755 
c⁄n
 = 
¨g
;

757 i‡(
c⁄n
 =
NULL
) {

758  
ERR_VAL
;

761 
c⁄n
->
îr
 =Érr;

762 i‡((
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
îr
 =
ERR_OK
)) {

763 
	`£tup_t˝
(
c⁄n
);

765 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

766 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

767  
ERR_OK
;

768 
	}
}

779 
	$do_c⁄√˘
(
≠i_msg_msg
 *
msg
)

781 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

782 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

786 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

787 #i‡
LWIP_RAW


788 
NETCONN_RAW
:

789 
msg
->
c⁄n
->
îr
 = 
	`øw_c⁄√˘
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

790 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

793 #i‡
LWIP_UDP


794 
NETCONN_UDP
:

795 
msg
->
c⁄n
->
îr
 = 
	`udp_c⁄√˘
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

796 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

799 #i‡
LWIP_TCP


800 
NETCONN_TCP
:

801 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CONNECT
;

802 
	`£tup_t˝
(
msg
->
c⁄n
);

803 
msg
->
c⁄n
->
îr
 = 
	`t˝_c⁄√˘
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
,

804 
do_c⁄√˘ed
);

812 
	}
}

822 
	$do_disc⁄√˘
(
≠i_msg_msg
 *
msg
)

824 #i‡
LWIP_UDP


825 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

826 
	`udp_disc⁄√˘
(
msg
->
c⁄n
->
pcb
.
udp
);

829 
	`TCPIP_APIMSG_ACK
(
msg
);

830 
	}
}

839 
	$do_li°í
(
≠i_msg_msg
 *
msg
)

841 #i‡
LWIP_TCP


842 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

843 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

844 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

845 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
CLOSED
) {

846 #i‡
TCP_LISTEN_BACKLOG


847 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í_wôh_backlog
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
lb
.
backlog
);

849 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í
(
msg
->
c⁄n
->
pcb
.
t˝
);

851 i‡(
Õcb
 =
NULL
) {

852 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

855 i‡(
msg
->
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

857 
	`sys_mbox_‰ì
(
msg
->
c⁄n
->
ªcvmbox
);

858 
msg
->
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

860 i‡(
msg
->
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
) {

861 i‡((
msg
->
c⁄n
->
ac˚±mbox
 = 
	`sys_mbox_√w
(
DEFAULT_ACCEPTMBOX_SIZE
)Ë=
SYS_MBOX_NULL
) {

862 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

865 i‡(
msg
->
c⁄n
->
îr
 =
ERR_OK
) {

866 
msg
->
c⁄n
->
°©e
 = 
NETCONN_LISTEN
;

867 
msg
->
c⁄n
->
pcb
.
t˝
 = 
Õcb
;

868 
	`t˝_¨g
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->conn);

869 
	`t˝_ac˚±
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ac˚±_fun˘i⁄
);

873 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

879 
	`TCPIP_APIMSG_ACK
(
msg
);

880 
	}
}

889 
	$do_£nd
(
≠i_msg_msg
 *
msg
)

891 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

892 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

893 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

894 #i‡
LWIP_RAW


895 
NETCONN_RAW
:

896 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

897 
msg
->
c⁄n
->
îr
 = 
	`øw_£nd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
);

899 
msg
->
c⁄n
->
îr
 = 
	`øw_£ndto
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
, msg->msg.b->
addr
);

903 #i‡
LWIP_UDP


904 
NETCONN_UDP
:

905 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

906 
msg
->
c⁄n
->
îr
 = 
	`udp_£nd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
);

908 
msg
->
c⁄n
->
îr
 = 
	`udp_£ndto
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
, msg->msg.b->
addr
, msg->msg.b->
p‹t
);

917 
	`TCPIP_APIMSG_ACK
(
msg
);

918 
	}
}

927 
	$do_ªcv
(
≠i_msg_msg
 *
msg
)

929 #i‡
LWIP_TCP


930 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

931 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

932 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

933 #i‡
TCP_LISTEN_BACKLOG


934 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

935 
	`t˝_ac˚±ed
(
msg
->
c⁄n
->
pcb
.
t˝
);

939 
	`t˝_ªcved
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
r
.
Àn
);

945 
	`TCPIP_APIMSG_ACK
(
msg
);

946 
	}
}

948 #i‡
LWIP_TCP


960 
îr_t


961 
	$do_wrôem‹e
(
√tc⁄n
 *
c⁄n
)

963 
îr_t
 
îr
;

964 *
d©≠å
;

965 
u16_t
 
Àn
, 
avaûabÀ
;

966 
u8_t
 
wrôe_föished
 = 0;

967 
size_t
 
diff
;

969 
	`LWIP_ASSERT
("c⁄n->°©ê=NETCONN_WRITE", (
c⁄n
->
°©e
 =
NETCONN_WRITE
));

971 
d©≠å
 = (
u8_t
*)
c⁄n
->
wrôe_msg
->
msg
.
w
.d©≠å + c⁄n->
wrôe_off£t
;

972 
diff
 = 
c⁄n
->
wrôe_msg
->
msg
.
w
.
Àn
 - c⁄n->
wrôe_off£t
;

973 i‡(
diff
 > 0xffffUL) {

974 
Àn
 = 0xffff;

975 #i‡
LWIP_TCPIP_CORE_LOCKING


976 
c⁄n
->
wrôe_dñayed
 = 1;

979 
Àn
 = (
u16_t
)
diff
;

981 
avaûabÀ
 = 
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
);

982 i‡(
avaûabÀ
 < 
Àn
) {

984 
Àn
 = 
avaûabÀ
;

985 #i‡
LWIP_TCPIP_CORE_LOCKING


986 
c⁄n
->
wrôe_dñayed
 = 1;

990 
îr
 = 
	`t˝_wrôe
(
c⁄n
->
pcb
.
t˝
, 
d©≠å
, 
Àn
, c⁄n->
wrôe_msg
->
msg
.
w
.
≠iÊags
);

991 
	`LWIP_ASSERT
("do_wrôem‹e: invÆidÜígth!", ((
c⁄n
->
wrôe_off£t
 + 
Àn
Ë<c⁄n->
wrôe_msg
->
msg
.
w
.len));

992 i‡(
îr
 =
ERR_OK
) {

993 
c⁄n
->
wrôe_off£t
 +
Àn
;

994 i‡(
c⁄n
->
wrôe_off£t
 =c⁄n->
wrôe_msg
->
msg
.
w
.
Àn
) {

996 
wrôe_föished
 = 1;

997 
c⁄n
->
wrôe_msg
 = 
NULL
;

998 
c⁄n
->
wrôe_off£t
 = 0;

1000 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1002 
îr
 = 
	`t˝_ouçut_«gÀ
(
c⁄n
->
pcb
.
t˝
);

1003 
c⁄n
->
îr
 =Érr;

1004 i‡((
îr
 =
ERR_OK
Ë&& (
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
Ë<
TCP_SNDLOWAT
)) {

1005 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

1007 } i‡(
îr
 =
ERR_MEM
) {

1013 
îr
 = 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

1015 #i‡
LWIP_TCPIP_CORE_LOCKING


1016 
c⁄n
->
wrôe_dñayed
 = 1;

1021 
c⁄n
->
îr
 =Érr;

1022 
wrôe_föished
 = 1;

1025 i‡(
wrôe_föished
) {

1028 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1029 #i‡
LWIP_TCPIP_CORE_LOCKING


1030 i‡(
c⁄n
->
wrôe_dñayed
 != 0)

1033 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

1036 #i‡
LWIP_TCPIP_CORE_LOCKING


1038  
ERR_MEM
;

1040  
ERR_OK
;

1041 
	}
}

1051 
	$do_wrôe
(
≠i_msg_msg
 *
msg
)

1053 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1054 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1055 #i‡
LWIP_TCP


1056 
msg
->
c⁄n
->
°©e
 = 
NETCONN_WRITE
;

1058 
	`LWIP_ASSERT
("Æªady wrôög", 
msg
->
c⁄n
->
wrôe_msg
 =
NULL
 &&

1059 
msg
->
c⁄n
->
wrôe_off£t
 == 0);

1060 
msg
->
c⁄n
->
wrôe_msg
 = msg;

1061 
msg
->
c⁄n
->
wrôe_off£t
 = 0;

1062 #i‡
LWIP_TCPIP_CORE_LOCKING


1063 
msg
->
c⁄n
->
wrôe_dñayed
 = 0;

1064 i‡(
	`do_wrôem‹e
(
msg
->
c⁄n
Ë!
ERR_OK
) {

1065 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_WRITE
);

1066 
	`UNLOCK_TCPIP_CORE
();

1067 
	`sys_¨ch_£m_waô
(
msg
->
c⁄n
->
›_com∂ëed
, 0);

1068 
	`LOCK_TCPIP_CORE
();

1069 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_NONE
);

1072 
	`do_wrôem‹e
(
msg
->
c⁄n
);

1077 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

1079 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1083 
	`TCPIP_APIMSG_ACK
(
msg
);

1084 
	}
}

1093 
	$do_gëaddr
(
≠i_msg_msg
 *
msg
)

1095 i‡(
msg
->
c⁄n
->
pcb
.
ù
 !
NULL
) {

1096 *(
msg
->msg.
ad
.
ùaddr
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
ù
->
loˇl_ù
:msg->c⁄n->pcb.ù->
ªmŸe_ù
);

1098 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1099 #i‡
LWIP_RAW


1100 
NETCONN_RAW
:

1101 i‡(
msg
->msg.
ad
.
loˇl
) {

1102 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
øw
->
¥Ÿocﬁ
;

1105 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1109 #i‡
LWIP_UDP


1110 
NETCONN_UDP
:

1111 i‡(
msg
->msg.
ad
.
loˇl
) {

1112 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
loˇl_p‹t
;

1114 i‡((
msg
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0) {

1115 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1117 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
ªmŸe_p‹t
;

1122 #i‡
LWIP_TCP


1123 
NETCONN_TCP
:

1124 *(
msg
->msg.
ad
.
p‹t
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
t˝
->
loˇl_p‹t
:msg->c⁄n->pcb.t˝->
ªmŸe_p‹t
);

1129 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1131 
	`TCPIP_APIMSG_ACK
(
msg
);

1132 
	}
}

1141 
	$do_˛o£
(
≠i_msg_msg
 *
msg
)

1143 #i‡
LWIP_TCP


1144 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1145 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

1146 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

1151 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1152 
	`TCPIP_APIMSG_ACK
(
msg
);

1154 
	}
}

1156 #i‡
LWIP_IGMP


1164 
	$do_joö_Àave_group
(
≠i_msg_msg
 *
msg
)

1166 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1167 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1168 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1169 #i‡
LWIP_UDP


1170 i‡(
msg
->msg.
jl
.
joö_‹_Àave
 =
NETCONN_JOIN
) {

1171 
msg
->
c⁄n
->
îr
 = 
	`igmp_joögroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1173 
msg
->
c⁄n
->
îr
 = 
	`igmp_Àavegroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1176 #i‡(
LWIP_TCP
 || 
LWIP_RAW
)

1178 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1183 
	`TCPIP_APIMSG_ACK
(
msg
);

1184 
	}
}

1187 #i‡
LWIP_DNS


1194 
	$do_dns_found
(c⁄° *
«me
, 
ù_addr
 *
ùaddr
, *
¨g
)

1196 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1198 
	`LWIP_ASSERT
("DNSÑe•⁄£ f‹ wr⁄g ho°Çame", 
	`°rcmp
(
msg
->
«me
,Çame) == 0);

1200 i‡(
ùaddr
 =
NULL
) {

1202 *
msg
->
îr
 = 
ERR_VAL
;

1205 *
msg
->
îr
 = 
ERR_OK
;

1206 *
msg
->
addr
 = *
ùaddr
;

1209 
	`sys_£m_sig«l
(
msg
->
£m
);

1210 
	}
}

1219 
	$do_gëho°by«me
(*
¨g
)

1221 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1223 *
msg
->
îr
 = 
	`dns_gëho°by«me
(msg->
«me
, msg->
addr
, 
do_dns_found
, msg);

1224 i‡(*
msg
->
îr
 !
ERR_INPROGRESS
) {

1227 
	`sys_£m_sig«l
(
msg
->
£m
);

1229 
	}
}

	@api/err.c

39 
	~"lwù/îr.h
"

41 #ifde‡
LWIP_DEBUG


43 c⁄° *
	gîr_°ªº
[] = {

68 
	$lwù_°ªº
(
îr_t
 
îr
)

70  
îr_°ªº
[-
îr
];

72 
	}
}

	@api/netbuf.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/√tbuf.h
"

44 
	~"lwù/memp.h
"

46 
	~<°rög.h
>

56 
√tbuf
 *
	$√tbuf_√w
()

58 
√tbuf
 *
buf
;

60 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

61 i‡(
buf
 !
NULL
) {

62 
buf
->
p
 = 
NULL
;

63 
buf
->
±r
 = 
NULL
;

64 
buf
->
addr
 = 
NULL
;

65  
buf
;

67  
NULL
;

69 
	}
}

77 
	$√tbuf_dñëe
(
√tbuf
 *
buf
)

79 i‡(
buf
 !
NULL
) {

80 i‡(
buf
->
p
 !
NULL
) {

81 
	`pbuf_‰ì
(
buf
->
p
);

82 
buf
->
p
 = buf->
±r
 = 
NULL
;

84 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

86 
	}
}

97 
	$√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
)

99 
	`LWIP_ERROR
("√tbuf_Æloc: invÆid buf", (
buf
 !
NULL
),  NULL;);

102 i‡(
buf
->
p
 !
NULL
) {

103 
	`pbuf_‰ì
(
buf
->
p
);

105 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
size
, 
PBUF_RAM
);

106 i‡(
buf
->
p
 =
NULL
) {

107  
NULL
;

109 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold size",

110 (
buf
->
p
->
Àn
 >
size
));

111 
buf
->
±r
 = buf->
p
;

112  
buf
->
p
->
∑ylﬂd
;

113 
	}
}

121 
	$√tbuf_‰ì
(
√tbuf
 *
buf
)

123 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

124 i‡(
buf
->
p
 !
NULL
) {

125 
	`pbuf_‰ì
(
buf
->
p
);

127 
buf
->
p
 = buf->
±r
 = 
NULL
;

128 
	}
}

139 
îr_t


140 
	$√tbuf_ªf
(
√tbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
size
)

142 
	`LWIP_ERROR
("√tbuf_ªf: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

143 i‡(
buf
->
p
 !
NULL
) {

144 
	`pbuf_‰ì
(
buf
->
p
);

146 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

147 i‡(
buf
->
p
 =
NULL
) {

148 
buf
->
±r
 = 
NULL
;

149  
ERR_MEM
;

151 
buf
->
p
->
∑ylﬂd
 = (*)
d©≠å
;

152 
buf
->
p
->
Àn
 = buf->p->
tŸ_Àn
 = 
size
;

153 
buf
->
±r
 = buf->
p
;

154  
ERR_OK
;

155 
	}
}

164 
	$√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
)

166 
	`LWIP_ERROR
("√tbuf_ªf: invÆid hód", (
hód
 !
NULL
), ;);

167 
	`LWIP_ERROR
("√tbuf_chaö: invÆidÅaû", (
èû
 !
NULL
), ;);

168 
	`pbuf_ˇt
(
hód
->
p
, 
èû
->p);

169 
hód
->
±r
 = hód->
p
;

170 
	`memp_‰ì
(
MEMP_NETBUF
, 
èû
);

171 
	}
}

182 
îr_t


183 
	$√tbuf_d©a
(
√tbuf
 *
buf
, **
d©≠å
, 
u16_t
 *
Àn
)

185 
	`LWIP_ERROR
("√tbuf_d©a: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

186 
	`LWIP_ERROR
("√tbuf_d©a: invÆid d©≠å", (
d©≠å
 !
NULL
),  
ERR_ARG
;);

187 
	`LWIP_ERROR
("√tbuf_d©a: invÆidÜí", (
Àn
 !
NULL
),  
ERR_ARG
;);

189 i‡(
buf
->
±r
 =
NULL
) {

190  
ERR_BUF
;

192 *
d©≠å
 = 
buf
->
±r
->
∑ylﬂd
;

193 *
Àn
 = 
buf
->
±r
->len;

194  
ERR_OK
;

195 
	}
}

207 
s8_t


208 
	$√tbuf_√xt
(
√tbuf
 *
buf
)

210 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
),  -1;);

211 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

214 
buf
->
±r
 = buf->±r->
√xt
;

215 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

219 
	}
}

229 
	$√tbuf_fú°
(
√tbuf
 *
buf
)

231 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

232 
buf
->
±r
 = buf->
p
;

233 
	}
}

	@api/netdb.c

36 
	~"lwù/√tdb.h
"

38 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


40 
	~"lwù/îr.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/≠i.h
"

46 
	sgëho°by«me_r_hñ≥r
 {

47 
ù_addr
 *
	maddrs
;

48 
ù_addr
 
	maddr
;

49 *
	mÆü£s
;

53 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


54 
	gh_î∫o
;

59 #i‚de‡
LWIP_DNS_API_HOSTENT_STORAGE


60 
	#LWIP_DNS_API_HOSTENT_STORAGE
 0

	)

64 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


65 
	#HOSTENT_STORAGE


	)

67 
	#HOSTENT_STORAGE
 

	)

79 
ho°ít
*

80 
	$lwù_gëho°by«me
(c⁄° *
«me
)

82 
îr_t
 
îr
;

83 
ù_addr
 
addr
;

86 
HOSTENT_STORAGE
 
ho°ít
 
s_ho°ít
;

87 
HOSTENT_STORAGE
 *
s_Æü£s
;

88 
HOSTENT_STORAGE
 
ù_addr
 
s_ho°ít_addr
;

89 
HOSTENT_STORAGE
 
ù_addr
 *
s_pho°ít_addr
;

92 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &
addr
);

93 i‡(
îr
 !
ERR_OK
) {

94 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

95 
h_î∫o
 = 
HOST_NOT_FOUND
;

96  
NULL
;

100 
s_ho°ít_addr
 = 
addr
;

101 
s_pho°ít_addr
 = &
s_ho°ít_addr
;

102 
s_ho°ít
.
h_«me
 = (*)
«me
;

103 
s_ho°ít
.
h_Æü£s
 = &
s_Æü£s
;

104 
s_ho°ít
.
h_addπy≥
 = 
AF_INET
;

105 
s_ho°ít
.
h_Àngth
 = (
ù_addr
);

106 
s_ho°ít
.
h_addr_li°
 = (**)&
s_pho°ít_addr
;

108 #i‡
DNS_DEBUG


110 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_«mê =%s\n", 
s_ho°ít
.
h_«me
));

111 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£† =%p\n", 
s_ho°ít
.
h_Æü£s
));

112 i‡(
s_ho°ít
.
h_Æü£s
 !
NULL
) {

113 
u8_t
 
idx
;

114  
idx
=0; 
s_ho°ít
.
h_Æü£s
[idx]; idx++) {

115 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%p\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

116 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%s\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

119 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addπy≥ =%d\n", 
s_ho°ít
.
h_addπy≥
));

120 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Àngth =%d\n", 
s_ho°ít
.
h_Àngth
));

121 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li° =%p\n", 
s_ho°ít
.
h_addr_li°
));

122 i‡(
s_ho°ít
.
h_addr_li°
 !
NULL
) {

123 
u8_t
 
idx
;

124  
idx
=0; 
s_ho°ít
.
h_addr_li°
[idx]; idx++) {

125 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i] =%p\n", 
idx
, 
s_ho°ít
.
h_addr_li°
[idx]));

126 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i]-> =%s\n", 
idx
, 
	`öë_¡ﬂ
(*((
ö_addr
*)(
s_ho°ít
.
h_addr_li°
[idx])))));

131 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


133  
	`sys_thªad_ho°ít
(&
s_ho°ít
);

135  &
s_ho°ít
;

137 
	}
}

156 
	$lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

157 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
)

159 
îr_t
 
îr
;

160 
gëho°by«me_r_hñ≥r
 *
h
;

161 *
ho°«me
;

162 
size_t
 
«mñí
;

163 
lh_î∫o
;

165 i‡(
h_î∫›
 =
NULL
) {

167 
h_î∫›
 = &
lh_î∫o
;

170 i‡(
ªsu…
 =
NULL
) {

172 *
h_î∫›
 = 
EINVAL
;

176 *
ªsu…
 = 
NULL
;

177 i‡((
«me
 =
NULL
Ë|| (
ªt
 =NULLË|| (
buf
 == 0)) {

179 *
h_î∫›
 = 
EINVAL
;

183 
«mñí
 = 
	`°æí
(
«me
);

184 i‡(
buÊí
 < ((
gëho°by«me_r_hñ≥r
Ë+ 
«mñí
 + 1 + (
MEM_ALIGNMENT
 - 1))) {

186 *
h_î∫›
 = 
ERANGE
;

190 
h
 = (
gëho°by«me_r_hñ≥r
*)
	`LWIP_MEM_ALIGN
(
buf
);

191 
ho°«me
 = ((*)
h
Ë+ (
gëho°by«me_r_hñ≥r
);

194 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &(
h
->
addr
));

195 i‡(
îr
 !
ERR_OK
) {

196 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

197 *
h_î∫›
 = 
ENSRNOTFOUND
;

202 
	`MEMCPY
(
ho°«me
, 
«me
, 
«mñí
);

203 
ho°«me
[
«mñí
] = 0;

206 
h
->
addrs
 = &(h->
addr
);

207 
h
->
Æü£s
 = 
NULL
;

208 
ªt
->
h_«me
 = (*)
ho°«me
;

209 
ªt
->
h_Æü£s
 = &(
h
->
Æü£s
);

210 
ªt
->
h_addπy≥
 = 
AF_INET
;

211 
ªt
->
h_Àngth
 = (
ù_addr
);

212 
ªt
->
h_addr_li°
 = (**)&(
h
->
addrs
);

215 *
ªsu…
 = 
ªt
;

219 
	}
}

229 
	$lwù_‰ìaddröfo
(
addröfo
 *
ai
)

231 
addröfo
 *
√xt
;

233 
ai
 !
NULL
) {

234 i‡(
ai
->
ai_addr
 !
NULL
) {

235 
	`mem_‰ì
(
ai
->
ai_addr
);

237 i‡(
ai
->
ai_ˇn⁄«me
 !
NULL
) {

238 
	`mem_‰ì
(
ai
->
ai_ˇn⁄«me
);

240 
√xt
 = 
ai
->
ai_√xt
;

241 
	`mem_‰ì
(
ai
);

242 
ai
 = 
√xt
;

244 
	}
}

266 
	$lwù_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

267 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
)

269 
îr_t
 
îr
;

270 
ù_addr
 
addr
;

271 
addröfo
 *
ai
;

272 
sockaddr_ö
 *
ß
 = 
NULL
;

273 
p‹t_ƒ
 = 0;

275 i‡(
ªs
 =
NULL
) {

276  
EAI_FAIL
;

278 *
ªs
 = 
NULL
;

279 i‡((
nodíame
 =
NULL
Ë&& (
£rv«me
 == NULL)) {

280  
EAI_NONAME
;

283 i‡(
£rv«me
 !
NULL
) {

286 
p‹t_ƒ
 = 
	`©oi
(
£rv«me
);

287 i‡((
p‹t_ƒ
 <= 0) || (port_nr > 0xffff)) {

288  
EAI_SERVICE
;

292 i‡(
nodíame
 !
NULL
) {

294 
îr
 = 
	`√tc⁄n_gëho°by«me
(
nodíame
, &
addr
);

295 i‡(
îr
 !
ERR_OK
) {

296  
EAI_FAIL
;

300 
addr
.add∏
INADDR_LOOPBACK
;

303 
ai
 = 
	`mem_mÆloc
((
addröfo
));

304 i‡(
ai
 =
NULL
) {

305 
memîr
;

307 
	`mem£t
(
ai
, 0, (
addröfo
));

308 
ß
 = 
	`mem_mÆloc
((
sockaddr_ö
));

309 i‡(
ß
 =
NULL
) {

310 
memîr
;

312 
	`mem£t
(
ß
, 0, (
sockaddr_ö
));

314 
ß
->
sö_addr
.
s_addr
 = 
addr
.addr;

315 
ß
->
sö_Ámûy
 = 
AF_INET
;

316 
ß
->
sö_Àn
 = (
sockaddr_ö
);

317 
ß
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t_ƒ
);

320 
ai
->
ai_Ámûy
 = 
AF_INET
;

321 i‡(
höts
 !
NULL
) {

323 
ai
->
ai_sockty≥
 = 
höts
->ai_socktype;

324 
ai
->
ai_¥Ÿocﬁ
 = 
höts
->ai_protocol;

326 i‡(
nodíame
 !
NULL
) {

328 
size_t
 
«mñí
 = 
	`°æí
(
nodíame
);

329 
	`LWIP_ASSERT
("«mñí i†toÿl⁄g", (
«mñí
 + 1Ë<(
mem_size_t
)-1);

330 
ai
->
ai_ˇn⁄«me
 = 
	`mem_mÆloc
((
mem_size_t
)(
«mñí
 + 1));

331 i‡(
ai
->
ai_ˇn⁄«me
 =
NULL
) {

332 
memîr
;

334 
	`MEMCPY
(
ai
->
ai_ˇn⁄«me
, 
nodíame
, 
«mñí
);

335 
ai
->
ai_ˇn⁄«me
[
«mñí
] = 0;

337 
ai
->
ai_addæí
 = (
sockaddr_ö
);

338 
ai
->
ai_addr
 = (
sockaddr
*)
ß
;

340 *
ªs
 = 
ai
;

343 
memîr
:

344 i‡(
ai
 !
NULL
) {

345 
	`mem_‰ì
(
ai
);

347 i‡(
ß
 !
NULL
) {

348 
	`mem_‰ì
(
ß
);

350  
EAI_MEMORY
;

351 
	}
}

	@api/netifapi.c

34 
	~"lwù/›t.h
"

36 #i‡
LWIP_NETIF_API


38 
	~"lwù/√tiÁpi.h
"

39 
	~"lwù/t˝ù.h
"

45 
	$do_√tiÁpi_√tif_add
–
√tiÁpi_msg_msg
 *
msg
)

47 i‡(!
	`√tif_add
–
msg
->
√tif
,

48 
msg
->msg.
add
.
ùaddr
,

49 
msg
->msg.
add
.
√tmask
,

50 
msg
->msg.
add
.
gw
,

51 
msg
->msg.
add
.
°©e
,

52 
msg
->msg.
add
.
öô
,

53 
msg
->msg.
add
.
öput
)) {

54 
msg
->
îr
 = 
ERR_IF
;

56 
msg
->
îr
 = 
ERR_OK
;

58 
	`TCPIP_NETIFAPI_ACK
(
msg
);

59 
	}
}

66 
	$do_√tiÁpi_√tif_comm⁄
–
√tiÁpi_msg_msg
 *
msg
)

68 i‡(
msg
->msg.
comm⁄
.
îπfunc
!=
NULL
) {

69 
msg
->
îr
 =

70 
msg
->msg.
comm⁄
.
	`îπfunc
(msg->
√tif
);

72 
msg
->
îr
 = 
ERR_OK
;

73 
msg
->msg.
comm⁄
.
	`voidfunc
(msg->
√tif
);

75 
	`TCPIP_NETIFAPI_ACK
(
msg
);

76 
	}
}

84 
îr_t


85 
√tiÁpi_√tif_add
(
√tif
 *netif,

86 
ù_addr
 *
ùaddr
,

87 
ù_addr
 *
√tmask
,

88 
ù_addr
 *
gw
,

89 *
°©e
,

90 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

91 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

93 
√tiÁpi_msg
 
msg
;

94 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_add
;

95 
msg
.msg.
√tif
 =Çetif;

96 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

97 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

98 
msg
.msg.msg.
add
.
gw
 = gw;

99 
msg
.msg.msg.
add
.
°©e
 = state;

100 
msg
.msg.msg.
add
.
öô
 = init;

101 
msg
.msg.msg.
add
.
öput
 = input;

102 
	`TCPIP_NETIFAPI
(&
msg
);

103  
msg
.msg.
îr
;

104 
	}
}

112 
îr_t


113 
√tiÁpi_√tif_comm⁄
–
√tif
 *netif,

114 (* 
voidfunc
)(
√tif
 *netif),

115 
	$îr_t
 (* 
îπfunc
)(
√tif
 *netif) )

117 
√tiÁpi_msg
 
msg
;

118 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_comm⁄
;

119 
msg
.msg.
√tif
 =Çetif;

120 
msg
.msg.msg.
comm⁄
.
voidfunc
 = voidfunc;

121 
msg
.msg.msg.
comm⁄
.
îπfunc
 =Érrtfunc;

122 
	`TCPIP_NETIFAPI
(&
msg
);

123  
msg
.msg.
îr
;

124 
	}
}

	@api/sockets.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_SOCKET


45 
	~"lwù/sockës.h
"

46 
	~"lwù/≠i.h
"

47 
	~"lwù/sys.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/öë.h
"

50 
	~"lwù/t˝.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝ù.h
"

55 
	~<°rög.h
>

57 
	#NUM_SOCKETS
 
MEMP_NUM_NETCONN


	)

60 
	slwù_sockë
 {

62 
√tc⁄n
 *
	mc⁄n
;

64 
√tbuf
 *
	mœ°d©a
;

66 
u16_t
 
	mœ°off£t
;

69 
s16_t
 
	mrcvevít
;

72 
u16_t
 
	m£ndevít
;

74 
u16_t
 
	mÊags
;

76 
	mîr
;

80 
	slwù_£À˘_cb
 {

82 
lwù_£À˘_cb
 *
	m√xt
;

84 
fd_£t
 *
	mªad£t
;

86 
fd_£t
 *
	mwrôe£t
;

88 
fd_£t
 *
	mex˚±£t
;

90 
	m£m_sig«Œed
;

92 
sys_£m_t
 
	m£m
;

97 
	slwù_£tgësock›t_d©a
 {

99 
lwù_sockë
 *
	msock
;

101 
	ms
;

103 
	mÀvñ
;

105 
	m›äame
;

108 *
	m›tvÆ
;

110 
sockÀn_t
 *
	m›éí
;

112 
îr_t
 
	mîr
;

116 
lwù_sockë
 
	gsockës
[
NUM_SOCKETS
];

118 
lwù_£À˘_cb
 *
	g£À˘_cb_li°
;

121 
sys_£m_t
 
	gsock£m
;

123 
sys_£m_t
 
	g£À˘£m
;

127 c⁄° 
	gîr_to_î∫o_èbÀ
[] = {

129 
ENOMEM
,

130 
ENOBUFS
,

131 
ETIMEDOUT
,

132 
EHOSTUNREACH
,

133 
ECONNABORTED
,

134 
ECONNRESET
,

135 
ESHUTDOWN
,

136 
ENOTCONN
,

137 
EINVAL
,

138 
EIO
,

139 
EADDRINUSE
,

142 
EINPROGRESS


145 
	#ERR_TO_ERRNO_TABLE_SIZE
 \

146 ((
îr_to_î∫o_èbÀ
)/”º_to_î∫o_èbÀ[0]))

	)

148 
	#îr_to_î∫o
(
îr
) \

149 (()(-(
îr
)Ë< 
ERR_TO_ERRNO_TABLE_SIZE
 ? \

150 
îr_to_î∫o_èbÀ
[-(
îr
)] : 
EIO
)

	)

152 #ifde‡
ERRNO


153 #i‚de‡
£t_î∫o


154 
	#£t_î∫o
(
îr
Ë
î∫o
 = (îr)

	)

157 
	#£t_î∫o
(
îr
)

	)

160 
	#sock_£t_î∫o
(
sk
, 
e
) do { \

161 
sk
->
îr
 = (
e
); \

162 
	`£t_î∫o
(
sk
->
îr
); \

163 } 0)

	)

166 
evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
);

167 
lwù_gësock›t_öã∫Æ
(*
¨g
);

168 
lwù_£tsock›t_öã∫Æ
(*
¨g
);

175 
	$lwù_sockë_öô
()

177 
sock£m
 = 
	`sys_£m_√w
(1);

178 
£À˘£m
 = 
	`sys_£m_√w
(1);

179 
	}
}

187 
lwù_sockë
 *

188 
	$gë_sockë
(
s
)

190 
lwù_sockë
 *
sock
;

192 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

193 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d): invÆid\n", 
s
));

194 
	`£t_î∫o
(
EBADF
);

195  
NULL
;

198 
sock
 = &
sockës
[
s
];

200 i‡(!
sock
->
c⁄n
) {

201 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d):ÇŸá˘ive\n", 
s
));

202 
	`£t_î∫o
(
EBADF
);

203  
NULL
;

206  
sock
;

207 
	}
}

216 
	$Æloc_sockë
(
√tc⁄n
 *
√wc⁄n
)

218 
i
;

221 
	`sys_£m_waô
(
sock£m
);

224 
i
 = 0; i < 
NUM_SOCKETS
; ++i) {

225 i‡(!
sockës
[
i
].
c⁄n
) {

226 
sockës
[
i
].
c⁄n
 = 
√wc⁄n
;

227 
sockës
[
i
].
œ°d©a
 = 
NULL
;

228 
sockës
[
i
].
œ°off£t
 = 0;

229 
sockës
[
i
].
rcvevít
 = 0;

230 
sockës
[
i
].
£ndevít
 = 1;

231 
sockës
[
i
].
Êags
 = 0;

232 
sockës
[
i
].
îr
 = 0;

233 
	`sys_£m_sig«l
(
sock£m
);

234  
i
;

237 
	`sys_£m_sig«l
(
sock£m
);

239 
	}
}

248 
	$lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

250 
lwù_sockë
 *
sock
, *
nsock
;

251 
√tc⁄n
 *
√wc⁄n
;

252 
ù_addr
 
«ddr
;

253 
u16_t
 
p‹t
;

254 
√wsock
;

255 
sockaddr_ö
 
sö
;

256 
îr_t
 
îr
;

258 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d)...\n", 
s
));

259 
sock
 = 
	`gë_sockë
(
s
);

260 i‡(!
sock
)

263 i‡((
sock
->
Êags
 & 
O_NONBLOCK
Ë&& (sock->
rcvevít
 <= 0)) {

264 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

265 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

269 
√wc⁄n
 = 
	`√tc⁄n_ac˚±
(
sock
->
c⁄n
);

270 i‡(!
√wc⁄n
) {

271 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËÁûed,Éº=%d\n", 
s
, 
sock
->
c⁄n
->
îr
));

272 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

277 
îr
 = 
	`√tc⁄n_≥î
(
√wc⁄n
, &
«ddr
, &
p‹t
);

278 i‡(
îr
 !
ERR_OK
) {

279 
	`√tc⁄n_dñëe
(
√wc⁄n
);

280 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

287 i‡(
NULL
 !
addr
) {

288 
	`LWIP_ASSERT
("add∏vÆid buàaddæí NULL", 
addæí
 !
NULL
);

289 
	`mem£t
(&
sö
, 0, (sin));

290 
sö
.
sö_Àn
 = (sin);

291 
sö
.
sö_Ámûy
 = 
AF_INET
;

292 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

293 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

295 i‡(*
addæí
 > (
sö
))

296 *
addæí
 = (
sö
);

298 
	`MEMCPY
(
addr
, &
sö
, *
addæí
);

301 
√wsock
 = 
	`Æloc_sockë
(
√wc⁄n
);

302 i‡(
√wsock
 == -1) {

303 
	`√tc⁄n_dñëe
(
√wc⁄n
);

304 
	`sock_£t_î∫o
(
sock
, 
ENFILE
);

307 
	`LWIP_ASSERT
("övÆid sockë index", (
√wsock
 >0Ë&& (√wsock < 
NUM_SOCKETS
));

308 
√wc⁄n
->
ˇŒback
 = 
evít_ˇŒback
;

309 
nsock
 = &
sockës
[
√wsock
];

310 
	`LWIP_ASSERT
("övÆid sockëÖoöãr", 
nsock
 !
NULL
);

312 
	`sys_£m_waô
(
sock£m
);

318 
nsock
->
rcvevít
 +-1 - 
√wc⁄n
->
sockë
;

319 
√wc⁄n
->
sockë
 = 
√wsock
;

320 
	`sys_£m_sig«l
(
sock£m
);

322 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËªtu∫ögÇew sock=%dáddr=", 
s
, 
√wsock
));

323 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

324 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
p‹t
));

326 
	`sock_£t_î∫o
(
sock
, 0);

327  
√wsock
;

328 
	}
}

331 
	$lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

333 
lwù_sockë
 *
sock
;

334 
ù_addr
 
loˇl_addr
;

335 
u16_t
 
loˇl_p‹t
;

336 
îr_t
 
îr
;

338 
sock
 = 
	`gë_sockë
(
s
);

339 i‡(!
sock
)

342 
	`LWIP_ERROR
("lwù_böd: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

343 ((((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

344 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

346 
loˇl_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

347 
loˇl_p‹t
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

349 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%d,áddr=", 
s
));

350 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
loˇl_addr
);

351 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
loˇl_p‹t
)));

353 
îr
 = 
	`√tc⁄n_böd
(
sock
->
c⁄n
, &
loˇl_addr
, 
	`¡ohs
(
loˇl_p‹t
));

355 i‡(
îr
 !
ERR_OK
) {

356 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

357 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

361 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËsuc˚eded\n", 
s
));

362 
	`sock_£t_î∫o
(
sock
, 0);

364 
	}
}

367 
	$lwù_˛o£
(
s
)

369 
lwù_sockë
 *
sock
;

371 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_˛o£(%d)\n", 
s
));

373 
sock
 = 
	`gë_sockë
(
s
);

374 i‡(!
sock
) {

378 
	`√tc⁄n_dñëe
(
sock
->
c⁄n
);

380 
	`sys_£m_waô
(
sock£m
);

381 i‡(
sock
->
œ°d©a
) {

382 
	`√tbuf_dñëe
(
sock
->
œ°d©a
);

384 
sock
->
œ°d©a
 = 
NULL
;

385 
sock
->
œ°off£t
 = 0;

386 
sock
->
c⁄n
 = 
NULL
;

387 
	`sock_£t_î∫o
(
sock
, 0);

388 
	`sys_£m_sig«l
(
sock£m
);

390 
	}
}

393 
	$lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

395 
lwù_sockë
 *
sock
;

396 
îr_t
 
îr
;

398 
sock
 = 
	`gë_sockë
(
s
);

399 i‡(!
sock
)

402 
	`LWIP_ERROR
("lwù_c⁄√˘: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

403 ((((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

404 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

406 i‡(((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
 =
AF_UNSPEC
) {

407 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d, AF_UNSPEC)\n", 
s
));

408 
îr
 = 
	`√tc⁄n_disc⁄√˘
(
sock
->
c⁄n
);

410 
ù_addr
 
ªmŸe_addr
;

411 
u16_t
 
ªmŸe_p‹t
;

413 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

414 
ªmŸe_p‹t
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

416 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d,áddr=", 
s
));

417 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

418 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
ªmŸe_p‹t
)));

420 
îr
 = 
	`√tc⁄n_c⁄√˘
(
sock
->
c⁄n
, &
ªmŸe_addr
, 
	`¡ohs
(
ªmŸe_p‹t
));

423 i‡(
îr
 !
ERR_OK
) {

424 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

425 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËsuc˚eded\n", 
s
));

430 
	`sock_£t_î∫o
(
sock
, 0);

432 
	}
}

443 
	$lwù_li°í
(
s
, 
backlog
)

445 
lwù_sockë
 *
sock
;

446 
îr_t
 
îr
;

448 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%d, backlog=%d)\n", 
s
, 
backlog
));

450 
sock
 = 
	`gë_sockë
(
s
);

451 i‡(!
sock
)

455 i‡(
backlog
 < 0) {

456 
backlog
 = 0;

458 i‡(
backlog
 > 0xff) {

459 
backlog
 = 0xff;

462 
îr
 = 
	`√tc⁄n_li°í_wôh_backlog
(
sock
->
c⁄n
, 
backlog
);

464 i‡(
îr
 !
ERR_OK
) {

465 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

466 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

470 
	`sock_£t_î∫o
(
sock
, 0);

472 
	}
}

475 
	$lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

476 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

478 
lwù_sockë
 *
sock
;

479 
√tbuf
 *
buf
;

480 
u16_t
 
buÊí
, 
c›yÀn
, 
off
 = 0;

481 
ù_addr
 *
addr
;

482 
u16_t
 
p‹t
;

483 
u8_t
 
d⁄e
 = 0;

485 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d, %p, %"
SZT_F
", 0x%x, ..)\n", 
s
, 
mem
, 
Àn
, 
Êags
));

486 
sock
 = 
	`gë_sockë
(
s
);

487 i‡(!
sock
)

491 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Å› whûêsock->œ°d©a=%p\n", (*)
sock
->
œ°d©a
));

493 i‡(
sock
->
œ°d©a
) {

494 
buf
 = 
sock
->
œ°d©a
;

497 i‡(((
Êags
 & 
MSG_DONTWAIT
Ë|| (
sock
->Êag†& 
O_NONBLOCK
)) &&

498 (
sock
->
rcvevít
 <= 0)) {

499 i‡(
off
 > 0) {

501 
	`sock_£t_î∫o
(
sock
, 0);

502  
off
;

504 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

505 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

511 
sock
->
œ°d©a
 = 
buf
 = 
	`√tc⁄n_ªcv
(sock->
c⁄n
);

512 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Çëc⁄n_ªcvÇëbuf=%p\n", (*)
buf
));

514 i‡(!
buf
) {

515 i‡(
off
 > 0) {

517 
	`sock_£t_î∫o
(
sock
, 0);

518  
off
;

521 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d): bu‡=NULL!\n", 
s
));

522 
	`sock_£t_î∫o
(
sock
, (((sock->
c⁄n
->
pcb
.
ù
 !
NULL
Ë&& (sock->c⁄n->
îr
 =
ERR_OK
))

523 ? 
ETIMEDOUT
 : 
	`îr_to_î∫o
(
sock
->
c⁄n
->
îr
)));

528 
buÊí
 = 
	`√tbuf_Àn
(
buf
);

529 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: buÊí=%"
U16_F
"Üí=%"
SZT_F
" off=%"U16_F" sock->lastoffset=%"U16_F"\n",

530 
buÊí
, 
Àn
, 
off
, 
sock
->
œ°off£t
));

532 
buÊí
 -
sock
->
œ°off£t
;

534 i‡(
Àn
 > 
buÊí
) {

535 
c›yÀn
 = 
buÊí
;

537 
c›yÀn
 = (
u16_t
)
Àn
;

542 
	`√tbuf_c›y_∑πül
(
buf
, (
u8_t
*)
mem
 + 
off
, 
c›yÀn
, 
sock
->
œ°off£t
);

544 
off
 +
c›yÀn
;

546 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

547 
	`LWIP_ASSERT
("övÆid c›yÀn,Üí would undîÊow", 
Àn
 >
c›yÀn
);

548 
Àn
 -
c›yÀn
;

549 i‡–(
Àn
 <= 0) ||

550 (
buf
->
p
->
Êags
 & 
PBUF_FLAG_PUSH
) ||

551 (
sock
->
rcvevít
 <= 0) ||

552 ((
Êags
 & 
MSG_PEEK
)!=0)) {

553 
d⁄e
 = 1;

556 
d⁄e
 = 1;

560 i‡(
d⁄e
) {

561 i‡(
‰om
 && 
‰omÀn
) {

562 
sockaddr_ö
 
sö
;

564 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

565 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

566 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

568 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

569 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

572 
	`mem£t
(&
sö
, 0, (sin));

573 
sö
.
sö_Àn
 = (sin);

574 
sö
.
sö_Ámûy
 = 
AF_INET
;

575 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

576 
sö
.
sö_addr
.
s_addr
 = 
addr
->addr;

578 i‡(*
‰omÀn
 > (
sö
)) {

579 *
‰omÀn
 = (
sö
);

582 
	`MEMCPY
(
‰om
, &
sö
, *
‰omÀn
);

584 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

585 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

586 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%"U16_F"\n", 
p‹t
, 
off
));

588 #i‡
SOCKETS_DEBUG


589 
sockaddr_ö
 
sö
;

591 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

592 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

593 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

595 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

596 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

599 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

600 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

601 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%"U16_F"\n", 
p‹t
, 
off
));

607 i‡((
Êags
 & 
MSG_PEEK
)==0) {

611 i‡((
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
Ë&& (
buÊí
 - 
c›yÀn
 > 0)) {

612 
sock
->
œ°d©a
 = 
buf
;

613 
sock
->
œ°off£t
 +
c›yÀn
;

614 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Üa°d©®nowÇëbuf=%p\n", (*)
buf
));

616 
sock
->
œ°d©a
 = 
NULL
;

617 
sock
->
œ°off£t
 = 0;

618 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: dñëögÇëbuf=%p\n", (*)
buf
));

619 
	`√tbuf_dñëe
(
buf
);

622 } !
d⁄e
);

624 
	`sock_£t_î∫o
(
sock
, 0);

625  
off
;

626 
	}
}

629 
	$lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
)

631  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 0, 
NULL
, NULL);

632 
	}
}

635 
	$lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
)

637  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 
Êags
, 
NULL
, NULL);

638 
	}
}

641 
	$lwù_£nd
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
)

643 
lwù_sockë
 *
sock
;

644 
îr_t
 
îr
;

646 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%d, d©a=%p, size=%"
SZT_F
", flags=0x%x)\n",

647 
s
, 
d©a
, 
size
, 
Êags
));

649 
sock
 = 
	`gë_sockë
(
s
);

650 i‡(!
sock
)

653 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
) {

654 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

655  
	`lwù_£ndto
(
s
, 
d©a
, 
size
, 
Êags
, 
NULL
, 0);

657 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

662 
îr
 = 
	`√tc⁄n_wrôe
(
sock
->
c⁄n
, 
d©a
, 
size
, 
NETCONN_COPY
 | ((
Êags
 & 
MSG_MORE
)?
NETCONN_MORE
:0));

664 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%dËîr=%d size=%"
SZT_F
"\n", 
s
, 
îr
, 
size
));

665 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

666  (
îr
 =
ERR_OK
 ? ()
size
 : -1);

667 
	}
}

670 
	$lwù_£ndto
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
,

671 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

673 
lwù_sockë
 *
sock
;

674 
ù_addr
 
ªmŸe_addr
;

675 
îr_t
 
îr
;

676 
u16_t
 
sh‹t_size
;

677 #i‡!
LWIP_TCPIP_CORE_LOCKING


678 
√tbuf
 
buf
;

679 
u16_t
 
ªmŸe_p‹t
;

682 
sock
 = 
	`gë_sockë
(
s
);

683 i‡(!
sock
)

686 i‡(
sock
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

687 #i‡
LWIP_TCP


688  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 
Êags
);

690 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

695 
	`LWIP_ASSERT
("lwù_£ndto: sizêmu° fô i¿u16_t", 
size
 <= 0xffff);

696 
sh‹t_size
 = (
u16_t
)
size
;

697 
	`LWIP_ERROR
("lwù_£ndto: invÆidáddªss", (((
to
 =
NULL
Ë&& (
tﬁí
 == 0)) ||

698 ((
tﬁí
 =(
sockaddr_ö
)) &&

699 ((((c⁄° 
sockaddr_ö
 *)
to
)->
sö_Ámûy
Ë=
AF_INET
))),

700 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

702 #i‡
LWIP_TCPIP_CORE_LOCKING


704 { 
pbuf
* 
p
;

706 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

707 i‡(
p
 =
NULL
) {

708 
îr
 = 
ERR_MEM
;

710 
p
->
∑ylﬂd
 = (*)
d©a
;

711 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
sh‹t_size
;

713 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

715 
	`LOCK_TCPIP_CORE
();

716 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_RAW
) {

717 
îr
 = 
sock
->
c⁄n
->î∏
	`øw_£ndto
(sock->c⁄n->
pcb
.
øw
, 
p
, &
ªmŸe_addr
);

719 
îr
 = 
sock
->
c⁄n
->î∏
	`udp_£ndto
(sock->c⁄n->
pcb
.
udp
, 
p
, &
ªmŸe_addr
, 
	`¡ohs
(((c⁄° 
sockaddr_ö
 *)
to
)->
sö_p‹t
));

721 
	`UNLOCK_TCPIP_CORE
();

723 
	`pbuf_‰ì
(
p
);

728 
buf
.
p
 = buf.
±r
 = 
NULL
;

729 i‡(
to
) {

730 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

731 
ªmŸe_p‹t
 = 
	`¡ohs
(((c⁄° 
sockaddr_ö
 *)
to
)->
sö_p‹t
);

732 
buf
.
addr
 = &
ªmŸe_addr
;

733 
buf
.
p‹t
 = 
ªmŸe_p‹t
;

735 
ªmŸe_addr
.
addr
 = 0;

736 
ªmŸe_p‹t
 = 0;

737 
buf
.
addr
 = 
NULL
;

738 
buf
.
p‹t
 = 0;

741 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£ndto(%d, d©a=%p, sh‹t_size=%d"
U16_F
", flags=0x%xÅo=",

742 
s
, 
d©a
, 
sh‹t_size
, 
Êags
));

743 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

744 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
ªmŸe_p‹t
));

747 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


749 i‡(
	`√tbuf_Æloc
(&
buf
, 
sh‹t_size
Ë=
NULL
) {

750 
îr
 = 
ERR_MEM
;

752 
îr
 = 
	`√tbuf_èke
(&
buf
, 
d©a
, 
sh‹t_size
);

755 
îr
 = 
	`√tbuf_ªf
(&
buf
, 
d©a
, 
sh‹t_size
);

757 i‡(
îr
 =
ERR_OK
) {

759 
îr
 = 
	`√tc⁄n_£nd
(
sock
->
c⁄n
, &
buf
);

763 
	`√tbuf_‰ì
(&
buf
);

765 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

766  (
îr
 =
ERR_OK
 ? 
sh‹t_size
 : -1);

767 
	}
}

770 
	$lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

772 
√tc⁄n
 *
c⁄n
;

773 
i
;

775 
	`LWIP_UNUSED_ARG
(
domaö
);

778 
ty≥
) {

779 
SOCK_RAW
:

780 
c⁄n
 = 
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
NETCONN_RAW
, (
u8_t
)
¥Ÿocﬁ
, 
evít_ˇŒback
);

781 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_RAW, %d) = ",

782 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

784 
SOCK_DGRAM
:

785 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
–(
¥Ÿocﬁ
 =
IPPROTO_UDPLITE
) ?

786 
NETCONN_UDPLITE
 : 
NETCONN_UDP
, 
evít_ˇŒback
);

787 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",

788 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

790 
SOCK_STREAM
:

791 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
(
NETCONN_TCP
, 
evít_ˇŒback
);

792 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_STREAM, %d) = ",

793 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

796 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",

797 
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

798 
	`£t_î∫o
(
EINVAL
);

802 i‡(!
c⁄n
) {

803 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("-1 / ENOBUFS (couldÇot createÇetconn)\n"));

804 
	`£t_î∫o
(
ENOBUFS
);

808 
i
 = 
	`Æloc_sockë
(
c⁄n
);

810 i‡(
i
 == -1) {

811 
	`√tc⁄n_dñëe
(
c⁄n
);

812 
	`£t_î∫o
(
ENFILE
);

815 
c⁄n
->
sockë
 = 
i
;

816 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("%d\n", 
i
));

817 
	`£t_î∫o
(0);

818  
i
;

819 
	}
}

822 
	$lwù_wrôe
(
s
, c⁄° *
d©a
, 
size_t
 
size
)

824  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 0);

825 
	}
}

843 
	$lwù_£lsˇn
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
)

845 
i
, 
ƒódy
 = 0;

846 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

847 
lwù_sockë
 *
p_sock
;

849 
	`FD_ZERO
(&
Ãód£t
);

850 
	`FD_ZERO
(&
lwrôe£t
);

851 
	`FD_ZERO
(&
Àx˚±£t
);

855 
i
 = 0; i < 
maxfdp1
; i++) {

856 i‡(
	`FD_ISSET
(
i
, 
ªad£t
)) {

858 
p_sock
 = 
	`gë_sockë
(
i
);

859 i‡(
p_sock
 && (p_sock->
œ°d©a
 || (p_sock->
rcvevít
 > 0))) {

860 
	`FD_SET
(
i
, &
Ãód£t
);

861 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Ñódög\n", 
i
));

862 
ƒódy
++;

865 i‡(
	`FD_ISSET
(
i
, 
wrôe£t
)) {

867 
p_sock
 = 
	`gë_sockë
(
i
);

868 i‡(
p_sock
 &&Ö_sock->
£ndevít
) {

869 
	`FD_SET
(
i
, &
lwrôe£t
);

870 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹ wrôög\n", 
i
));

871 
ƒódy
++;

875 *
ªad£t
 = 
Ãód£t
;

876 *
wrôe£t
 = 
lwrôe£t
;

877 
	`FD_ZERO
(
ex˚±£t
);

879  
ƒódy
;

880 
	}
}

887 
	$lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

888 
timevÆ
 *
timeout
)

890 
i
;

891 
ƒódy
;

892 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

893 
u32_t
 
m£˘imeout
;

894 
lwù_£À˘_cb
 
£À˘_cb
;

895 
lwù_£À˘_cb
 *
p_£lcb
;

897 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select(%d, %p, %p, %p,Åvsec=%ldÅvusec=%ld)\n",

898 
maxfdp1
, (*)
ªad£t
, (*Ë
wrôe£t
, (*Ë
ex˚±£t
,

899 
timeout
 ? (Èimeout->
tv_£c
 : ()-1,

900 
timeout
 ? (Èimeout->
tv_u£c
 : ()-1));

902 
£À˘_cb
.
√xt
 = 0;

903 
£À˘_cb
.
ªad£t
 =Ñeadset;

904 
£À˘_cb
.
wrôe£t
 = writeset;

905 
£À˘_cb
.
ex˚±£t
 =Éxceptset;

906 
£À˘_cb
.
£m_sig«Œed
 = 0;

909 
	`sys_£m_waô
(
£À˘£m
);

911 i‡(
ªad£t
)

912 
Ãód£t
 = *
ªad£t
;

914 
	`FD_ZERO
(&
Ãód£t
);

915 i‡(
wrôe£t
)

916 
lwrôe£t
 = *
wrôe£t
;

918 
	`FD_ZERO
(&
lwrôe£t
);

919 i‡(
ex˚±£t
)

920 
Àx˚±£t
 = *
ex˚±£t
;

922 
	`FD_ZERO
(&
Àx˚±£t
);

926 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

929 i‡(!
ƒódy
) {

930 i‡(
timeout
 &&Åimeout->
tv_£c
 =0 &&Åimeout->
tv_u£c
 == 0) {

931 
	`sys_£m_sig«l
(
£À˘£m
);

932 i‡(
ªad£t
)

933 
	`FD_ZERO
(
ªad£t
);

934 i‡(
wrôe£t
)

935 
	`FD_ZERO
(
wrôe£t
);

936 i‡(
ex˚±£t
)

937 
	`FD_ZERO
(
ex˚±£t
);

939 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÇoÅimeout,Ñeturning 0\n"));

940 
	`£t_î∫o
(0);

950 
£À˘_cb
.
£m
 = 
	`sys_£m_√w
(0);

953 
£À˘_cb
.
√xt
 = 
£À˘_cb_li°
;

954 
£À˘_cb_li°
 = &
£À˘_cb
;

957 
	`sys_£m_sig«l
(
£À˘£m
);

960 i‡(
timeout
 == 0)

962 
m£˘imeout
 = 0;

964 
m£˘imeout
 = ((
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 500)/1000));

965 if(
m£˘imeout
 == 0)

966 
m£˘imeout
 = 1;

969 
i
 = 
	`sys_£m_waô_timeout
(
£À˘_cb
.
£m
, 
m£˘imeout
);

972 
	`sys_£m_waô
(
£À˘£m
);

973 i‡(
£À˘_cb_li°
 =&
£À˘_cb
)

974 
£À˘_cb_li°
 = 
£À˘_cb
.
√xt
;

976 
p_£lcb
 = 
£À˘_cb_li°
;Ö_£lcb;Ö_£lcb =Ö_£lcb->
√xt
) {

977 i‡(
p_£lcb
->
√xt
 =&
£À˘_cb
) {

978 
p_£lcb
->
√xt
 = 
£À˘_cb
.next;

983 
	`sys_£m_sig«l
(
£À˘£m
);

985 
	`sys_£m_‰ì
(
£À˘_cb
.
£m
);

986 i‡(
i
 == 0) {

988 i‡(
ªad£t
)

989 
	`FD_ZERO
(
ªad£t
);

990 i‡(
wrôe£t
)

991 
	`FD_ZERO
(
wrôe£t
);

992 i‡(
ex˚±£t
)

993 
	`FD_ZERO
(
ex˚±£t
);

995 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÅimeoutÉxpired\n"));

996 
	`£t_î∫o
(0);

1001 i‡(
ªad£t
)

1002 
Ãód£t
 = *
ªad£t
;

1004 
	`FD_ZERO
(&
Ãód£t
);

1005 i‡(
wrôe£t
)

1006 
lwrôe£t
 = *
wrôe£t
;

1008 
	`FD_ZERO
(&
lwrôe£t
);

1009 i‡(
ex˚±£t
)

1010 
Àx˚±£t
 = *
ex˚±£t
;

1012 
	`FD_ZERO
(&
Àx˚±£t
);

1015 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

1017 
	`sys_£m_sig«l
(
£À˘£m
);

1019 i‡(
ªad£t
)

1020 *
ªad£t
 = 
Ãód£t
;

1021 i‡(
wrôe£t
)

1022 *
wrôe£t
 = 
lwrôe£t
;

1023 i‡(
ex˚±£t
)

1024 *
ex˚±£t
 = 
Àx˚±£t
;

1026 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘:Çªady=%d\n", 
ƒódy
));

1027 
	`£t_î∫o
(0);

1029  
ƒódy
;

1030 
	}
}

1037 
	$evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
)

1039 
s
;

1040 
lwù_sockë
 *
sock
;

1041 
lwù_£À˘_cb
 *
scb
;

1043 
	`LWIP_UNUSED_ARG
(
Àn
);

1046 i‡(
c⁄n
) {

1047 
s
 = 
c⁄n
->
sockë
;

1048 i‡(
s
 < 0) {

1054 
	`sys_£m_waô
(
sock£m
);

1055 i‡(
c⁄n
->
sockë
 < 0) {

1056 i‡(
evt
 =
NETCONN_EVT_RCVPLUS
) {

1057 
c⁄n
->
sockë
--;

1059 
	`sys_£m_sig«l
(
sock£m
);

1062 
	`sys_£m_sig«l
(
sock£m
);

1065 
sock
 = 
	`gë_sockë
(
s
);

1066 i‡(!
sock
) {

1073 
	`sys_£m_waô
(
£À˘£m
);

1075 
evt
) {

1076 
NETCONN_EVT_RCVPLUS
:

1077 
sock
->
rcvevít
++;

1079 
NETCONN_EVT_RCVMINUS
:

1080 
sock
->
rcvevít
--;

1082 
NETCONN_EVT_SENDPLUS
:

1083 
sock
->
£ndevít
 = 1;

1085 
NETCONN_EVT_SENDMINUS
:

1086 
sock
->
£ndevít
 = 0;

1089 
	`LWIP_ASSERT
("unknownÉvent", 0);

1092 
	`sys_£m_sig«l
(
£À˘£m
);

1102 
	`sys_£m_waô
(
£À˘£m
);

1103 
scb
 = 
£À˘_cb_li°
; scb; scb = scb->
√xt
) {

1104 i‡(
scb
->
£m_sig«Œed
 == 0) {

1106 i‡(
scb
->
ªad£t
 && 
	`FD_ISSET
(
s
, scb->readset))

1107 i‡(
sock
->
rcvevít
 > 0)

1109 i‡(
scb
->
wrôe£t
 && 
	`FD_ISSET
(
s
, scb->writeset))

1110 i‡(
sock
->
£ndevít
)

1114 i‡(
scb
) {

1115 
scb
->
£m_sig«Œed
 = 1;

1116 
	`sys_£m_sig«l
(
scb
->
£m
);

1117 
	`sys_£m_sig«l
(
£À˘£m
);

1119 
	`sys_£m_sig«l
(
£À˘£m
);

1123 
	}
}

1130 
	$lwù_shutdown
(
s
, 
how
)

1132 
	`LWIP_UNUSED_ARG
(
how
);

1133 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_shutdown(%d, how=%d)\n", 
s
, 
how
));

1134  
	`lwù_˛o£
(
s
);

1135 
	}
}

1138 
	$lwù_gëadd∫ame
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
, 
u8_t
 
loˇl
)

1140 
lwù_sockë
 *
sock
;

1141 
sockaddr_ö
 
sö
;

1142 
ù_addr
 
«ddr
;

1144 
sock
 = 
	`gë_sockë
(
s
);

1145 i‡(!
sock
)

1148 
	`mem£t
(&
sö
, 0, (sin));

1149 
sö
.
sö_Àn
 = (sin);

1150 
sö
.
sö_Ámûy
 = 
AF_INET
;

1153 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, &
«ddr
, &
sö
.
sö_p‹t
, 
loˇl
);

1155 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gëadd∫ame(%d,áddr=", 
s
));

1156 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

1157 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
sö
.
sö_p‹t
));

1159 
sö
.
sö_p‹t
 = 
	`ht⁄s
(sin.sin_port);

1160 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

1162 i‡(*
«mñí
 > (
sö
))

1163 *
«mñí
 = (
sö
);

1165 
	`MEMCPY
(
«me
, &
sö
, *
«mñí
);

1166 
	`sock_£t_î∫o
(
sock
, 0);

1168 
	}
}

1171 
	$lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1173  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 0);

1174 
	}
}

1177 
	$lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1179  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 1);

1180 
	}
}

1183 
	$lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
)

1185 
îr_t
 
îr
 = 
ERR_OK
;

1186 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1187 
lwù_£tgësock›t_d©a
 
d©a
;

1189 i‡(!
sock
)

1192 i‡((
NULL
 =
›tvÆ
Ë|| (NULL =
›éí
)) {

1193 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1198 
Àvñ
) {

1201 
SOL_SOCKET
:

1202 
›äame
) {

1204 
SO_ACCEPTCONN
:

1205 
SO_BROADCAST
:

1208 
SO_ERROR
:

1209 
SO_KEEPALIVE
:

1212 #i‡
LWIP_SO_RCVTIMEO


1213 
SO_RCVTIMEO
:

1215 #i‡
LWIP_SO_RCVBUF


1216 
SO_RCVBUF
:

1222 #i‡
SO_REUSE


1223 
SO_REUSEADDR
:

1224 
SO_REUSEPORT
:

1226 
SO_TYPE
:

1228 i‡(*
›éí
 < ()) {

1229 
îr
 = 
EINVAL
;

1233 
SO_NO_CHECK
:

1234 i‡(*
›éí
 < ()) {

1235 
îr
 = 
EINVAL
;

1237 #i‡
LWIP_UDP


1238 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1239 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1241 
îr
 = 
EAFNOSUPPORT
;

1247 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1248 
s
, 
›äame
));

1249 
îr
 = 
ENOPROTOOPT
;

1254 
IPPROTO_IP
:

1255 
›äame
) {

1259 
IP_TTL
:

1260 
IP_TOS
:

1261 i‡(*
›éí
 < ()) {

1262 
îr
 = 
EINVAL
;

1265 #i‡
LWIP_IGMP


1266 
IP_MULTICAST_TTL
:

1267 i‡(*
›éí
 < (
u8_t
)) {

1268 
îr
 = 
EINVAL
;

1271 
IP_MULTICAST_IF
:

1272 i‡(*
›éí
 < (
ö_addr
)) {

1273 
îr
 = 
EINVAL
;

1279 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1280 
s
, 
›äame
));

1281 
îr
 = 
ENOPROTOOPT
;

1285 #i‡
LWIP_TCP


1287 
IPPROTO_TCP
:

1288 i‡(*
›éí
 < ()) {

1289 
îr
 = 
EINVAL
;

1294 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1297 
›äame
) {

1298 
TCP_NODELAY
:

1299 
TCP_KEEPALIVE
:

1300 #i‡
LWIP_TCP_KEEPALIVE


1301 
TCP_KEEPIDLE
:

1302 
TCP_KEEPINTVL
:

1303 
TCP_KEEPCNT
:

1308 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1309 
s
, 
›äame
));

1310 
îr
 = 
ENOPROTOOPT
;

1314 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1316 
IPPROTO_UDPLITE
:

1317 i‡(*
›éí
 < ()) {

1318 
îr
 = 
EINVAL
;

1323 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1326 
›äame
) {

1327 
UDPLITE_SEND_CSCOV
:

1328 
UDPLITE_RECV_CSCOV
:

1332 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1333 
s
, 
›äame
));

1334 
îr
 = 
ENOPROTOOPT
;

1340 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1341 
s
, 
Àvñ
, 
›äame
));

1342 
îr
 = 
ENOPROTOOPT
;

1346 i‡(
îr
 !
ERR_OK
) {

1347 
	`sock_£t_î∫o
(
sock
, 
îr
);

1352 
d©a
.
sock
 = sock;

1353 
d©a
.
Àvñ
 =Üevel;

1354 
d©a
.
›äame
 = optname;

1355 
d©a
.
›tvÆ
 = optval;

1356 
d©a
.
›éí
 = optlen;

1357 
d©a
.
îr
 =Érr;

1358 
	`t˝ù_ˇŒback
(
lwù_gësock›t_öã∫Æ
, &
d©a
);

1359 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1361 
îr
 = 
d©a
.err;

1363 
	`sock_£t_î∫o
(
sock
, 
îr
);

1364  
îr
 ? -1 : 0;

1365 
	}
}

1368 
	$lwù_gësock›t_öã∫Æ
(*
¨g
)

1370 
lwù_sockë
 *
sock
;

1371 #ifde‡
LWIP_DEBUG


1372 
s
;

1374 
Àvñ
, 
›äame
;

1375 *
›tvÆ
;

1376 
lwù_£tgësock›t_d©a
 *
d©a
;

1378 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1380 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1381 
sock
 = 
d©a
->sock;

1382 #ifde‡
LWIP_DEBUG


1383 
s
 = 
d©a
->s;

1385 
Àvñ
 = 
d©a
->level;

1386 
›äame
 = 
d©a
->optname;

1387 
›tvÆ
 = 
d©a
->optval;

1389 
Àvñ
) {

1392 
SOL_SOCKET
:

1393 
›äame
) {

1396 
SO_ACCEPTCONN
:

1397 
SO_BROADCAST
:

1400 
SO_KEEPALIVE
:

1402 #i‡
SO_REUSE


1403 
SO_REUSEADDR
:

1404 
SO_REUSEPORT
:

1407 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 & 
›äame
;

1408 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",

1409 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1412 
SO_TYPE
:

1413 
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
)) {

1414 
NETCONN_RAW
:

1415 *(*)
›tvÆ
 = 
SOCK_RAW
;

1417 
NETCONN_TCP
:

1418 *(*)
›tvÆ
 = 
SOCK_STREAM
;

1420 
NETCONN_UDP
:

1421 *(*)
›tvÆ
 = 
SOCK_DGRAM
;

1424 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ty≥
;

1425 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
,

1427 
s
, *(*)
›tvÆ
));

1429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",

1430 
s
, *(*)
›tvÆ
));

1433 
SO_ERROR
:

1434 i‡(
sock
->
îr
 == 0) {

1435 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

1437 *(*)
›tvÆ
 = 
sock
->
îr
;

1438 
sock
->
îr
 = 0;

1439 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",

1440 
s
, *(*)
›tvÆ
));

1443 #i‡
LWIP_SO_RCVTIMEO


1444 
SO_RCVTIMEO
:

1445 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_timeout
;

1448 #i‡
LWIP_SO_RCVBUF


1449 
SO_RCVBUF
:

1450 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_bufsize
;

1453 #i‡
LWIP_UDP


1454 
SO_NO_CHECK
:

1455 *(*)
›tvÆ
 = (
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_NOCHKSUM
) ? 1 : 0;

1462 
IPPROTO_IP
:

1463 
›äame
) {

1464 
IP_TTL
:

1465 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1466 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",

1467 
s
, *(*)
›tvÆ
));

1469 
IP_TOS
:

1470 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
tos
;

1471 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",

1472 
s
, *(*)
›tvÆ
));

1474 #i‡
LWIP_IGMP


1475 
IP_MULTICAST_TTL
:

1476 *(
u8_t
*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1477 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",

1478 
s
, *(*)
›tvÆ
));

1480 
IP_MULTICAST_IF
:

1481 ((
ö_addr
*Ë
›tvÆ
)->
s_addr
 = 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
;

1482 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gësock›t(%d, IPPROTO_IP, IP_MULTICAST_IFË0x%"
X32_F
"\n",

1483 
s
, *(
u32_t
 *)
›tvÆ
));

1489 #i‡
LWIP_TCP


1491 
IPPROTO_TCP
:

1492 
›äame
) {

1493 
TCP_NODELAY
:

1494 *(*)
›tvÆ
 = (
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 & 
TF_NODELAY
);

1495 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",

1496 
s
, (*(*)
›tvÆ
)?"on":"off") );

1498 
TCP_KEEPALIVE
:

1499 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
;

1500 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",

1501 
s
, *(*)
›tvÆ
));

1504 #i‡
LWIP_TCP_KEEPALIVE


1505 
TCP_KEEPIDLE
:

1506 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
/1000);

1507 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",

1508 
s
, *(*)
›tvÆ
));

1510 
TCP_KEEPINTVL
:

1511 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
/1000);

1512 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",

1513 
s
, *(*)
›tvÆ
));

1515 
TCP_KEEPCNT
:

1516 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
;

1517 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",

1518 
s
, *(*)
›tvÆ
));

1525 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1527 
IPPROTO_UDPLITE
:

1528 
›äame
) {

1529 
UDPLITE_SEND_CSCOV
:

1530 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
;

1531 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",

1532 
s
, (*(*)
›tvÆ
)) );

1534 
UDPLITE_RECV_CSCOV
:

1535 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
;

1536 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",

1537 
s
, (*(*)
›tvÆ
)) );

1543 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1544 
	}
}

1547 
	$lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

1549 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1550 
îr
 = 
ERR_OK
;

1551 
lwù_£tgësock›t_d©a
 
d©a
;

1553 i‡(!
sock
)

1556 i‡(
NULL
 =
›tvÆ
) {

1557 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1562 
Àvñ
) {

1565 
SOL_SOCKET
:

1566 
›äame
) {

1568 
SO_BROADCAST
:

1571 
SO_KEEPALIVE
:

1574 #i‡
LWIP_SO_RCVTIMEO


1575 
SO_RCVTIMEO
:

1577 #i‡
LWIP_SO_RCVBUF


1578 
SO_RCVBUF
:

1584 #i‡
SO_REUSE


1585 
SO_REUSEADDR
:

1586 
SO_REUSEPORT
:

1589 i‡(
›éí
 < ()) {

1590 
îr
 = 
EINVAL
;

1593 
SO_NO_CHECK
:

1594 i‡(
›éí
 < ()) {

1595 
îr
 = 
EINVAL
;

1597 #i‡
LWIP_UDP


1598 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1599 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1601 
îr
 = 
EAFNOSUPPORT
;

1606 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1607 
s
, 
›äame
));

1608 
îr
 = 
ENOPROTOOPT
;

1613 
IPPROTO_IP
:

1614 
›äame
) {

1618 
IP_TTL
:

1619 
IP_TOS
:

1620 i‡(
›éí
 < ()) {

1621 
îr
 = 
EINVAL
;

1624 #i‡
LWIP_IGMP


1625 
IP_MULTICAST_TTL
:

1626 i‡(
›éí
 < (
u8_t
)) {

1627 
îr
 = 
EINVAL
;

1629 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1630 
îr
 = 
EAFNOSUPPORT
;

1633 
IP_MULTICAST_IF
:

1634 i‡(
›éí
 < (
ö_addr
)) {

1635 
îr
 = 
EINVAL
;

1637 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1638 
îr
 = 
EAFNOSUPPORT
;

1641 
IP_ADD_MEMBERSHIP
:

1642 
IP_DROP_MEMBERSHIP
:

1643 i‡(
›éí
 < (
ù_mªq
)) {

1644 
îr
 = 
EINVAL
;

1646 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1647 
îr
 = 
EAFNOSUPPORT
;

1652 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1653 
s
, 
›äame
));

1654 
îr
 = 
ENOPROTOOPT
;

1658 #i‡
LWIP_TCP


1660 
IPPROTO_TCP
:

1661 i‡(
›éí
 < ()) {

1662 
îr
 = 
EINVAL
;

1667 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1670 
›äame
) {

1671 
TCP_NODELAY
:

1672 
TCP_KEEPALIVE
:

1673 #i‡
LWIP_TCP_KEEPALIVE


1674 
TCP_KEEPIDLE
:

1675 
TCP_KEEPINTVL
:

1676 
TCP_KEEPCNT
:

1681 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1682 
s
, 
›äame
));

1683 
îr
 = 
ENOPROTOOPT
;

1687 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1689 
IPPROTO_UDPLITE
:

1690 i‡(
›éí
 < ()) {

1691 
îr
 = 
EINVAL
;

1696 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1699 
›äame
) {

1700 
UDPLITE_SEND_CSCOV
:

1701 
UDPLITE_RECV_CSCOV
:

1705 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1706 
s
, 
›äame
));

1707 
îr
 = 
ENOPROTOOPT
;

1713 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1714 
s
, 
Àvñ
, 
›äame
));

1715 
îr
 = 
ENOPROTOOPT
;

1719 i‡(
îr
 !
ERR_OK
) {

1720 
	`sock_£t_î∫o
(
sock
, 
îr
);

1726 
d©a
.
sock
 = sock;

1727 
d©a
.
Àvñ
 =Üevel;

1728 
d©a
.
›äame
 = optname;

1729 
d©a
.
›tvÆ
 = (*)optval;

1730 
d©a
.
›éí
 = &optlen;

1731 
d©a
.
îr
 =Érr;

1732 
	`t˝ù_ˇŒback
(
lwù_£tsock›t_öã∫Æ
, &
d©a
);

1733 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1735 
îr
 = 
d©a
.err;

1737 
	`sock_£t_î∫o
(
sock
, 
îr
);

1738  
îr
 ? -1 : 0;

1739 
	}
}

1742 
	$lwù_£tsock›t_öã∫Æ
(*
¨g
)

1744 
lwù_sockë
 *
sock
;

1745 #ifde‡
LWIP_DEBUG


1746 
s
;

1748 
Àvñ
, 
›äame
;

1749 c⁄° *
›tvÆ
;

1750 
lwù_£tgësock›t_d©a
 *
d©a
;

1752 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1754 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1755 
sock
 = 
d©a
->sock;

1756 #ifde‡
LWIP_DEBUG


1757 
s
 = 
d©a
->s;

1759 
Àvñ
 = 
d©a
->level;

1760 
›äame
 = 
d©a
->optname;

1761 
›tvÆ
 = 
d©a
->optval;

1763 
Àvñ
) {

1766 
SOL_SOCKET
:

1767 
›äame
) {

1770 
SO_BROADCAST
:

1773 
SO_KEEPALIVE
:

1775 #i‡
SO_REUSE


1776 
SO_REUSEADDR
:

1777 
SO_REUSEPORT
:

1780 i‡(*(*)
›tvÆ
) {

1781 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 |
›äame
;

1783 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 &~
›äame
;

1785 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",

1786 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1788 #i‡
LWIP_SO_RCVTIMEO


1789 
SO_RCVTIMEO
:

1790 
sock
->
c⁄n
->
ªcv_timeout
 = ( *(*)
›tvÆ
 );

1793 #i‡
LWIP_SO_RCVBUF


1794 
SO_RCVBUF
:

1795 
sock
->
c⁄n
->
ªcv_bufsize
 = ( *(*)
›tvÆ
 );

1798 #i‡
LWIP_UDP


1799 
SO_NO_CHECK
:

1800 i‡(*(*)
›tvÆ
) {

1801 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_NOCHKSUM
);

1803 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_NOCHKSUM
);

1811 
IPPROTO_IP
:

1812 
›äame
) {

1813 
IP_TTL
:

1814 
sock
->
c⁄n
->
pcb
.
ù
->
âl
 = (
u8_t
)(*(*)
›tvÆ
);

1815 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",

1816 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
âl
));

1818 
IP_TOS
:

1819 
sock
->
c⁄n
->
pcb
.
ù
->
tos
 = (
u8_t
)(*(*)
›tvÆ
);

1820 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",

1821 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
tos
));

1823 #i‡
LWIP_IGMP


1824 
IP_MULTICAST_TTL
:

1825 
sock
->
c⁄n
->
pcb
.
udp
->
âl
 = (
u8_t
)(*(u8_t*)
›tvÆ
);

1827 
IP_MULTICAST_IF
:

1828 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
 = ((
ö_addr
*Ë
›tvÆ
)->
s_addr
;

1830 
IP_ADD_MEMBERSHIP
:

1831 
IP_DROP_MEMBERSHIP
:

1834 
ù_mªq
 *
imr
 = (ù_mªq *)
›tvÆ
;

1835 if(
›äame
 =
IP_ADD_MEMBERSHIP
){

1836 
d©a
->
îr
 = 
	`igmp_joögroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1838 
d©a
->
îr
 = 
	`igmp_Àavegroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1840 if(
d©a
->
îr
 !
ERR_OK
) {

1841 
d©a
->
îr
 = 
EADDRNOTAVAIL
;

1849 #i‡
LWIP_TCP


1851 
IPPROTO_TCP
:

1852 
›äame
) {

1853 
TCP_NODELAY
:

1854 i‡(*(*)
›tvÆ
) {

1855 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 |
TF_NODELAY
;

1857 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 &~
TF_NODELAY
;

1859 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",

1860 
s
, (*(*)
›tvÆ
)?"on":"off") );

1862 
TCP_KEEPALIVE
:

1863 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = (
u32_t
)(*(*)
›tvÆ
);

1864 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPALIVEË-> %"
U32_F
"\n",

1865 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1868 #i‡
LWIP_TCP_KEEPALIVE


1869 
TCP_KEEPIDLE
:

1870 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1871 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPIDLEË-> %"
U32_F
"\n",

1872 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1874 
TCP_KEEPINTVL
:

1875 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1876 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPINTVLË-> %"
U32_F
"\n",

1877 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
));

1879 
TCP_KEEPCNT
:

1880 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
 = (
u32_t
)(*(*)
›tvÆ
);

1881 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPCNTË-> %"
U32_F
"\n",

1882 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
));

1889 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1891 
IPPROTO_UDPLITE
:

1892 
›äame
) {

1893 
UDPLITE_SEND_CSCOV
:

1894 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1896 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = 8;

1898 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = *(*)
›tvÆ
;

1900 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",

1901 
s
, (*(*)
›tvÆ
)) );

1903 
UDPLITE_RECV_CSCOV
:

1904 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1906 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = 8;

1908 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = *(*)
›tvÆ
;

1910 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",

1911 
s
, (*(*)
›tvÆ
)) );

1917 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1918 
	}
}

1921 
	$lwù_io˘l
(
s
, 
cmd
, *
¨gp
)

1923 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1924 
u16_t
 
buÊí
 = 0;

1925 
s16_t
 
ªcv_avaû
;

1927 i‡(!
sock
)

1930 
cmd
) {

1931 
FIONREAD
:

1932 i‡(!
¨gp
) {

1933 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

1937 
	`SYS_ARCH_GET
(
sock
->
c⁄n
->
ªcv_avaû
,Ñecv_avail);

1938 i‡(
ªcv_avaû
 < 0)

1939 
ªcv_avaû
 = 0;

1940 *((
u16_t
*)
¨gp
Ë(u16_t)
ªcv_avaû
;

1943 i‡(
sock
->
œ°d©a
) {

1944 
buÊí
 = 
	`√tbuf_Àn
(
sock
->
œ°d©a
);

1945 
buÊí
 -
sock
->
œ°off£t
;

1947 *((
u16_t
*)
¨gp
Ë+
buÊí
;

1950 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONREAD, %pË%"
U16_F
"\n", 
s
, 
¨gp
, *((
u16_t
*)argp)));

1951 
	`sock_£t_î∫o
(
sock
, 0);

1954 
FIONBIO
:

1955 i‡(
¨gp
 && *(
u32_t
*)argp)

1956 
sock
->
Êags
 |
O_NONBLOCK
;

1958 
sock
->
Êags
 &~
O_NONBLOCK
;

1959 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONBIO, %d)\n", 
s
, !!(
sock
->
Êags
 & 
O_NONBLOCK
)));

1960 
	`sock_£t_î∫o
(
sock
, 0);

1964 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, UNIMPL: 0x%lx, %p)\n", 
s
, 
cmd
, 
¨gp
));

1965 
	`sock_£t_î∫o
(
sock
, 
ENOSYS
);

1968 
	}
}

	@api/tcpip.c

39 
	~"lwù/›t.h
"

41 #i‡!
NO_SYS


43 
	~"lwù/sys.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù_‰ag.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/autoù.h
"

49 
	~"lwù/dh˝.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/dns.h
"

52 
	~"lwù/t˝ù.h
"

53 
	~"lwù/öô.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"√tif/µp_€.h
"

58 (* 
t˝ù_öô_d⁄e
)(*
¨g
);

59 *
t˝ù_öô_d⁄e_¨g
;

60 
sys_mbox_t
 
mbox
 = 
SYS_MBOX_NULL
;

62 #i‡
LWIP_TCPIP_CORE_LOCKING


64 
sys_£m_t
 
lock_t˝ù_c‹e
;

67 #i‡
LWIP_TCP


69 
t˝ù_t˝_timî_a˘ive
;

77 
	$t˝ù_t˝_timî
(*
¨g
)

79 
	`LWIP_UNUSED_ARG
(
¨g
);

82 
	`t˝_tmr
();

84 i‡(
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
) {

86 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

89 
t˝ù_t˝_timî_a˘ive
 = 0;

91 
	}
}

93 #i‡!
NO_SYS


100 
	$t˝_timî_√eded
()

103 i‡(!
t˝ù_t˝_timî_a˘ive
 && (
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
)) {

105 
t˝ù_t˝_timî_a˘ive
 = 1;

106 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

108 
	}
}

112 #i‡
IP_REASSEMBLY


119 
	$ù_ªass_timî
(*
¨g
)

121 
	`LWIP_UNUSED_ARG
(
¨g
);

122 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

123 
	`ù_ªass_tmr
();

124 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

125 
	}
}

128 #i‡
LWIP_ARP


135 
	$¨p_timî
(*
¨g
)

137 
	`LWIP_UNUSED_ARG
(
¨g
);

138 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:Étharp_tmr()\n"));

139 
	`ëh¨p_tmr
();

140 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

141 
	}
}

144 #i‡
LWIP_DHCP


151 
	$dh˝_timî_cﬂr£
(*
¨g
)

153 
	`LWIP_UNUSED_ARG
(
¨g
);

154 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

155 
	`dh˝_cﬂr£_tmr
();

156 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

157 
	}
}

165 
	$dh˝_timî_föe
(*
¨g
)

167 
	`LWIP_UNUSED_ARG
(
¨g
);

168 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

169 
	`dh˝_föe_tmr
();

170 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

171 
	}
}

174 #i‡
LWIP_AUTOIP


181 
	$autoù_timî
(*
¨g
)

183 
	`LWIP_UNUSED_ARG
(
¨g
);

184 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:áutoip_tmr()\n"));

185 
	`autoù_tmr
();

186 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

187 
	}
}

190 #i‡
LWIP_IGMP


197 
	$igmp_timî
(*
¨g
)

199 
	`LWIP_UNUSED_ARG
(
¨g
);

200 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: igmp_tmr()\n"));

201 
	`igmp_tmr
();

202 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

203 
	}
}

206 #i‡
LWIP_DNS


213 
	$dns_timî
(*
¨g
)

215 
	`LWIP_UNUSED_ARG
(
¨g
);

216 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dns_tmr()\n"));

217 
	`dns_tmr
();

218 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

219 
	}
}

233 
	$t˝ù_thªad
(*
¨g
)

235 
t˝ù_msg
 *
msg
;

236 
	`LWIP_UNUSED_ARG
(
¨g
);

238 #i‡
IP_REASSEMBLY


239 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

241 #i‡
LWIP_ARP


242 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

244 #i‡
LWIP_DHCP


245 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

246 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

248 #i‡
LWIP_AUTOIP


249 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

251 #i‡
LWIP_IGMP


252 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

254 #i‡
LWIP_DNS


255 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

258 i‡(
t˝ù_öô_d⁄e
 !
NULL
) {

259 
	`t˝ù_öô_d⁄e
(
t˝ù_öô_d⁄e_¨g
);

262 
	`LOCK_TCPIP_CORE
();

264 
	`sys_mbox_„tch
(
mbox
, (*)&
msg
);

265 
msg
->
ty≥
) {

266 #i‡
LWIP_NETCONN


267 
TCPIP_MSG_API
:

268 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: API mesßgê%p\n", (*)
msg
));

269 
msg
->msg.
≠imsg
->
	`fun˘i⁄
(&(msg->msg.apimsg->msg));

273 
TCPIP_MSG_INPKT
:

274 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: PACKET %p\n", (*)
msg
));

275 #i‡
LWIP_ARP


276 i‡(
msg
->msg.
öp
.
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

277 
	`ëhî√t_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

280 { 
	`ù_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

282 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

285 #i‡
LWIP_NETIF_API


286 
TCPIP_MSG_NETIFAPI
:

287 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: Nëi‡API mesßgê%p\n", (*)
msg
));

288 
msg
->msg.
√tiÁpimsg
->
	`fun˘i⁄
(&(msg->msg.netifapimsg->msg));

292 
TCPIP_MSG_CALLBACK
:

293 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: CALLBACK %p\n", (*)
msg
));

294 
msg
->msg.
cb
.
	`f
(msg->msg.cb.
˘x
);

295 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

298 
TCPIP_MSG_TIMEOUT
:

299 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: TIMEOUT %p\n", (*)
msg
));

300 
	`sys_timeout
(
msg
->msg.
tmo
.
m£cs
, msg->msg.tmo.
h
, msg->msg.tmo.
¨g
);

301 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

303 
TCPIP_MSG_UNTIMEOUT
:

304 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: UNTIMEOUT %p\n", (*)
msg
));

305 
	`sys_u¡imeout
(
msg
->msg.
tmo
.
h
, msg->msg.tmo.
¨g
);

306 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

313 
	}
}

322 
îr_t


323 
	$t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

325 
t˝ù_msg
 *
msg
;

327 i‡(
mbox
 !
SYS_MBOX_NULL
) {

328 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_INPKT
);

329 i‡(
msg
 =
NULL
) {

330  
ERR_MEM
;

333 
msg
->
ty≥
 = 
TCPIP_MSG_INPKT
;

334 
msg
->msg.
öp
.
p
 =Ö;

335 
msg
->msg.
öp
.
√tif
 = inp;

336 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

337 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

338  
ERR_MEM
;

340  
ERR_OK
;

342  
ERR_VAL
;

343 
	}
}

356 
îr_t


357 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
)

359 
t˝ù_msg
 *
msg
;

361 i‡(
mbox
 !
SYS_MBOX_NULL
) {

362 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

363 i‡(
msg
 =
NULL
) {

364  
ERR_MEM
;

367 
msg
->
ty≥
 = 
TCPIP_MSG_CALLBACK
;

368 
msg
->msg.
cb
.
f
 = f;

369 
msg
->msg.
cb
.
˘x
 = ctx;

370 i‡(
block
) {

371 
	`sys_mbox_po°
(
mbox
, 
msg
);

373 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

374 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

375  
ERR_MEM
;

378  
ERR_OK
;

380  
ERR_VAL
;

381 
	}
}

391 
îr_t


392 
	$t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

394 
t˝ù_msg
 *
msg
;

396 i‡(
mbox
 !
SYS_MBOX_NULL
) {

397 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

398 i‡(
msg
 =
NULL
) {

399  
ERR_MEM
;

402 
msg
->
ty≥
 = 
TCPIP_MSG_TIMEOUT
;

403 
msg
->msg.
tmo
.
m£cs
 = msecs;

404 
msg
->msg.
tmo
.
h
 = h;

405 
msg
->msg.
tmo
.
¨g
 =árg;

406 
	`sys_mbox_po°
(
mbox
, 
msg
);

407  
ERR_OK
;

409  
ERR_VAL
;

410 
	}
}

420 
îr_t


421 
	$t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

423 
t˝ù_msg
 *
msg
;

425 i‡(
mbox
 !
SYS_MBOX_NULL
) {

426 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

427 i‡(
msg
 =
NULL
) {

428  
ERR_MEM
;

431 
msg
->
ty≥
 = 
TCPIP_MSG_UNTIMEOUT
;

432 
msg
->msg.
tmo
.
h
 = h;

433 
msg
->msg.
tmo
.
¨g
 =árg;

434 
	`sys_mbox_po°
(
mbox
, 
msg
);

435  
ERR_OK
;

437  
ERR_VAL
;

438 
	}
}

440 #i‡
LWIP_NETCONN


449 
îr_t


450 
	$t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
)

452 
t˝ù_msg
 
msg
;

454 i‡(
mbox
 !
SYS_MBOX_NULL
) {

455 
msg
.
ty≥
 = 
TCPIP_MSG_API
;

456 
msg
.msg.
≠imsg
 =ápimsg;

457 
	`sys_mbox_po°
(
mbox
, &
msg
);

458 
	`sys_¨ch_£m_waô
(
≠imsg
->
msg
.
c⁄n
->
›_com∂ëed
, 0);

459  
ERR_OK
;

461  
ERR_VAL
;

462 
	}
}

464 #i‡
LWIP_TCPIP_CORE_LOCKING


473 
îr_t


474 
	$t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
)

476 
	`LOCK_TCPIP_CORE
();

477 
≠imsg
->
	`fun˘i⁄
(&◊pimsg->
msg
));

478 
	`UNLOCK_TCPIP_CORE
();

479  
ERR_OK
;

481 
	}
}

485 #i‡
LWIP_NETIF_API


486 #i‡!
LWIP_TCPIP_CORE_LOCKING


494 
îr_t


495 
	$t˝ù_√tiÁpi
(
√tiÁpi_msg
* 
√tiÁpimsg
)

497 
t˝ù_msg
 
msg
;

499 i‡(
mbox
 !
SYS_MBOX_NULL
) {

500 
√tiÁpimsg
->
msg
.
£m
 = 
	`sys_£m_√w
(0);

501 i‡(
√tiÁpimsg
->
msg
.
£m
 =
SYS_SEM_NULL
) {

502 
√tiÁpimsg
->
msg
.
îr
 = 
ERR_MEM
;

503  
√tiÁpimsg
->
msg
.
îr
;

506 
msg
.
ty≥
 = 
TCPIP_MSG_NETIFAPI
;

507 
msg
.msg.
√tiÁpimsg
 =Çetifapimsg;

508 
	`sys_mbox_po°
(
mbox
, &
msg
);

509 
	`sys_£m_waô
(
√tiÁpimsg
->
msg
.
£m
);

510 
	`sys_£m_‰ì
(
√tiÁpimsg
->
msg
.
£m
);

511  
√tiÁpimsg
->
msg
.
îr
;

513  
ERR_VAL
;

514 
	}
}

524 
îr_t


525 
	$t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
* 
√tiÁpimsg
)

527 
	`LOCK_TCPIP_CORE
();

528 
√tiÁpimsg
->
	`fun˘i⁄
(&“ëiÁpimsg->
msg
));

529 
	`UNLOCK_TCPIP_CORE
();

530  
√tiÁpimsg
->
msg
.
îr
;

531 
	}
}

544 
t˝ù_öô
((* 
öôfunc
)(*), *
¨g
)

546 
	`lwù_öô
();

548 
t˝ù_öô_d⁄e
 = 
öôfunc
;

549 
t˝ù_öô_d⁄e_¨g
 = 
¨g
;

550 
mbox
 = 
	`sys_mbox_√w
(
TCPIP_MBOX_SIZE
);

551 #i‡
LWIP_TCPIP_CORE_LOCKING


552 
lock_t˝ù_c‹e
 = 
	`sys_£m_√w
(1);

555 
	`sys_thªad_√w
(
TCPIP_THREAD_NAME
, 
t˝ù_thªad
, 
NULL
, 
TCPIP_THREAD_STACKSIZE
, 
TCPIP_THREAD_PRIO
);

556 
	}
}

565 
	$pbuf_‰ì_öt
(*
p
)

567 
pbuf
 *
q
 = 
p
;

568 
	`pbuf_‰ì
(
q
);

569 
	}
}

577 
îr_t


578 
	$pbuf_‰ì_ˇŒback
(
pbuf
 *
p
)

580  
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_öt
, 
p
, 0);

581 
	}
}

590 
îr_t


591 
	$mem_‰ì_ˇŒback
(*
m
)

593  
	`t˝ù_ˇŒback_wôh_block
(
mem_‰ì
, 
m
, 0);

594 
	}
}

	@core/dhcp.c

71 
	~"lwù/›t.h
"

73 #i‡
LWIP_DHCP


75 
	~"lwù/°©s.h
"

76 
	~"lwù/mem.h
"

77 
	~"lwù/udp.h
"

78 
	~"lwù/ù_addr.h
"

79 
	~"lwù/√tif.h
"

80 
	~"lwù/öë.h
"

81 
	~"lwù/sys.h
"

82 
	~"lwù/dh˝.h
"

83 
	~"lwù/autoù.h
"

84 
	~"lwù/dns.h
"

85 
	~"√tif/ëh¨p.h
"

87 
	~<°rög.h
>

94 #ifde‡
DHCP_GLOBAL_XID_HEADER


95 #ö˛udê
DHCP_GLOBAL_XID_HEADER


100 
	#DHCP_MAX_MSG_LEN
(
√tif
Ë“ëif->
mtu
)

	)

101 
	#DHCP_MAX_MSG_LEN_MIN_REQUIRED
 576

	)

104 
dh˝_h™dÀ_ack
(
√tif
 *netif);

105 
dh˝_h™dÀ_«k
(
√tif
 *netif);

106 
dh˝_h™dÀ_of„r
(
√tif
 *netif);

108 
îr_t
 
dh˝_discovî
(
√tif
 *netif);

109 
îr_t
 
dh˝_£À˘
(
√tif
 *netif);

110 
dh˝_check
(
√tif
 *netif);

111 
dh˝_böd
(
√tif
 *netif);

112 #i‡
DHCP_DOES_ARP_CHECK


113 
îr_t
 
dh˝_de˛öe
(
√tif
 *netif);

115 
îr_t
 
dh˝_ªböd
(
√tif
 *netif);

116 
dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
);

119 
dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

120 
îr_t
 
dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp);

121 
u8_t
 *
dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, u8_à
›ti⁄_ty≥
);

122 
u8_t
 
dh˝_gë_›ti⁄_byã
(u8_à*
±r
);

124 
u16_t
 
dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
);

126 
u32_t
 
dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
);

127 
dh˝_‰ì_ª∂y
(
dh˝
 *dhcp);

130 
dh˝_timeout
(
√tif
 *netif);

131 
dh˝_t1_timeout
(
√tif
 *netif);

132 
dh˝_t2_timeout
(
√tif
 *netif);

136 
îr_t
 
dh˝_¸óã_ªque°
(
√tif
 *netif);

138 
dh˝_dñëe_ªque°
(
√tif
 *netif);

140 
dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
);

142 
dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
);

143 
dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
);

144 
dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
);

146 
dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp);

161 
	$dh˝_h™dÀ_«k
(
√tif
 *netif)

163 
dh˝
 *dh˝ = 
√tif
->dhcp;

164 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_«k“ëif=%pË%c%c%"
U16_F
"\n",

165 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

167 
	`√tif_£t_down
(
√tif
);

169 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

170 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

171 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

173 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

175 
	`dh˝_discovî
(
√tif
);

176 
	}
}

188 
	$dh˝_check
(
√tif
 *netif)

190 
dh˝
 *dh˝ = 
√tif
->dhcp;

191 
îr_t
 
ªsu…
;

192 
u16_t
 
m£cs
;

193 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_check“ëif=%pË%c%c\n", (*)
√tif
, (
s16_t
Íëif->
«me
[0],

194 (
s16_t
)
√tif
->
«me
[1]));

195 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_CHECKING
);

198 
ªsu…
 = 
	`ëh¨p_quîy
(
√tif
, &
dh˝
->
of„ªd_ù_addr
, 
NULL
);

199 i‡(
ªsu…
 !
ERR_OK
) {

200 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_check: couldÇotÖerform ARP query\n"));

202 
dh˝
->
åõs
++;

203 
m£cs
 = 500;

204 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

205 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_check(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

206 
	}
}

214 
	$dh˝_h™dÀ_of„r
(
√tif
 *netif)

216 
dh˝
 *dh˝ = 
√tif
->dhcp;

218 
u8_t
 *
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SERVER_ID
);

219 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_of„r“ëif=%pË%c%c%"
U16_F
"\n",

220 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

221 i‡(
›ti⁄_±r
 !
NULL
) {

222 
dh˝
->
£rvî_ù_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

223 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): sîvî 0x%08"
X32_F
"\n", 
dh˝
->
£rvî_ù_addr
.
addr
));

225 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, (
ù_addr
 *)&dh˝->
msg_ö
->
yüddr
);

226 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): of„∏f‹ 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

228 
	`dh˝_£À˘
(
√tif
);

230 
	}
}

240 
îr_t


241 
	$dh˝_£À˘
(
√tif
 *netif)

243 
dh˝
 *dh˝ = 
√tif
->dhcp;

244 
îr_t
 
ªsu…
;

245 
u16_t
 
m£cs
;

246 #i‡
LWIP_NETIF_HOSTNAME


247 c⁄° *
p
;

250 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_£À˘“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

251 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REQUESTING
);

254 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

255 i‡(
ªsu…
 =
ERR_OK
) {

256 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

257 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

259 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

260 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

263 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

264 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

266 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

267 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

269 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

270 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

271 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

272 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

273 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

275 #i‡
LWIP_NETIF_HOSTNAME


276 
p
 = (c⁄° *)
√tif
->
ho°«me
;

277 i‡(
p
 !
NULL
) {

278 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

279 *
p
) {

280 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

285 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

287 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

292 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

294 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

295 
	`dh˝_dñëe_ªque°
(
√tif
);

296 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_select: REQUESTING\n"));

298 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_select: couldÇotállocate DHCPÑequest\n"));

300 
dh˝
->
åõs
++;

301 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

302 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

303 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_£À˘(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

304  
ªsu…
;

305 
	}
}

312 
	$dh˝_cﬂr£_tmr
()

314 
√tif
 *√ti‡
√tif_li°
;

315 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_coarse_tmr()\n"));

317 
√tif
 !
NULL
) {

319 i‡(
√tif
->
dh˝
 !
NULL
) {

321 i‡(
√tif
->
dh˝
->
t2_timeout
-- == 1) {

322 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å2Åimeout\n"));

324 
	`dh˝_t2_timeout
(
√tif
);

326 } i‡(
√tif
->
dh˝
->
t1_timeout
-- == 1) {

327 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å1Åimeout\n"));

329 
	`dh˝_t1_timeout
(
√tif
);

333 
√tif
 =Çëif->
√xt
;

335 
	}
}

345 
	$dh˝_föe_tmr
()

347 
√tif
 *√ti‡
√tif_li°
;

349 
√tif
 !
NULL
) {

351 i‡(
√tif
->
dh˝
 !
NULL
) {

353 i‡(
√tif
->
dh˝
->
ªque°_timeout
 > 1) {

354 
√tif
->
dh˝
->
ªque°_timeout
--;

356 i‡(
√tif
->
dh˝
->
ªque°_timeout
 == 1) {

357 
√tif
->
dh˝
->
ªque°_timeout
--;

359 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_fine_tmr():ÑequestÅimeout\n"));

361 
	`dh˝_timeout
(
√tif
);

365 
√tif
 =Çëif->
√xt
;

367 
	}
}

378 
	$dh˝_timeout
(
√tif
 *netif)

380 
dh˝
 *dh˝ = 
√tif
->dhcp;

381 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_timeout()\n"));

383 i‡((
dh˝
->
°©e
 =
DHCP_BACKING_OFF
Ë|| (dh˝->°©ê=
DHCP_SELECTING
)) {

384 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout():Ñestarting discovery\n"));

385 
	`dh˝_discovî
(
√tif
);

387 } i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

388 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING, DHCPÑequestÅimed out\n"));

389 i‡(
dh˝
->
åõs
 <= 5) {

390 
	`dh˝_£À˘
(
√tif
);

392 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING,Ñeleasing,Ñestarting\n"));

393 
	`dh˝_ªÀa£
(
√tif
);

394 
	`dh˝_discovî
(
√tif
);

397 } i‡(
dh˝
->
°©e
 =
DHCP_CHECKING
) {

398 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): CHECKING, ARPÑequestÅimed out\n"));

399 i‡(
dh˝
->
åõs
 <= 1) {

400 
	`dh˝_check
(
√tif
);

405 
	`dh˝_böd
(
√tif
);

409 i‡(
dh˝
->
°©e
 =
DHCP_RENEWING
) {

410 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RENEWING, DHCPÑequestÅimed out\n"));

413 
	`dh˝_ª√w
(
√tif
);

415 } i‡(
dh˝
->
°©e
 =
DHCP_REBINDING
) {

416 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REBINDING, DHCPÑequestÅimed out\n"));

417 i‡(
dh˝
->
åõs
 <= 8) {

418 
	`dh˝_ªböd
(
√tif
);

420 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));

421 
	`dh˝_ªÀa£
(
√tif
);

422 
	`dh˝_discovî
(
√tif
);

425 
	}
}

433 
	$dh˝_t1_timeout
(
√tif
 *netif)

435 
dh˝
 *dh˝ = 
√tif
->dhcp;

436 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout()\n"));

437 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

440 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout(): mustÑenew\n"));

441 
	`dh˝_ª√w
(
√tif
);

443 
	}
}

451 
	$dh˝_t2_timeout
(
√tif
 *netif)

453 
dh˝
 *dh˝ = 
√tif
->dhcp;

454 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout()\n"));

455 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

457 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout(): mustÑebind\n"));

458 
	`dh˝_ªböd
(
√tif
);

460 
	}
}

468 
	$dh˝_h™dÀ_ack
(
√tif
 *netif)

470 
dh˝
 *dh˝ = 
√tif
->dhcp;

471 
u8_t
 *
›ti⁄_±r
;

473 
dh˝
->
of„ªd_¢_mask
.
addr
 = 0;

474 
dh˝
->
of„ªd_gw_addr
.
addr
 = 0;

475 
dh˝
->
of„ªd_bc_addr
.
addr
 = 0;

478 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_LEASE_TIME
);

479 i‡(
›ti⁄_±r
 !
NULL
) {

481 
dh˝
->
of„ªd_t0_Àa£
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

484 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T1
);

485 i‡(
›ti⁄_±r
 !
NULL
) {

487 
dh˝
->
of„ªd_t1_ª√w
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

490 
dh˝
->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t0_Àa£
 / 2;

494 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T2
);

495 i‡(
›ti⁄_±r
 !
NULL
) {

497 
dh˝
->
of„ªd_t2_ªböd
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

500 
dh˝
->
of„ªd_t2_ªböd
 = dh˝->
of„ªd_t0_Àa£
;

504 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, &dh˝->
msg_ö
->
yüddr
);

512 
	`ù_addr_£t
(&
dh˝
->
of„ªd_si_addr
, &dh˝->
msg_ö
->
süddr
);

514 i‡(
dh˝
->
msg_ö
->
fûe
[0]) {

515 
dh˝
->
boŸ_fûe_«me
 = 
	`mem_mÆloc
(
	`°æí
(dh˝->
msg_ö
->
fûe
) + 1);

516 
	`°r˝y
(
dh˝
->
boŸ_fûe_«me
, dh˝->
msg_ö
->
fûe
);

521 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

523 i‡(
›ti⁄_±r
 !
NULL
) {

524 
dh˝
->
of„ªd_¢_mask
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

528 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_ROUTER
);

529 i‡(
›ti⁄_±r
 !
NULL
) {

530 
dh˝
->
of„ªd_gw_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

534 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

535 i‡(
›ti⁄_±r
 !
NULL
) {

536 
dh˝
->
of„ªd_bc_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

540 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

541 i‡(
›ti⁄_±r
 !
NULL
) {

542 
u8_t
 
n
;

543 
dh˝
->
dns_cou¡
 = 
	`dh˝_gë_›ti⁄_byã
(&
›ti⁄_±r
[1]Ë/ (
u32_t
)(
ù_addr
);

545 i‡(
dh˝
->
dns_cou¡
 > 
DHCP_MAX_DNS
)

546 
dh˝
->
dns_cou¡
 = 
DHCP_MAX_DNS
;

547 
n
 = 0;Ç < 
dh˝
->
dns_cou¡
;Ç++) {

548 
dh˝
->
of„ªd_dns_addr
[
n
].
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2 +Ç * 4]));

549 #i‡
LWIP_DNS


550 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&(
dh˝
->
of„ªd_dns_addr
[n].
addr
)));

553 #i‡
LWIP_DNS


554 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&
ù_addr_™y
));

557 
	}
}

571 
îr_t


572 
	$dh˝_°¨t
(
√tif
 *netif)

574 
dh˝
 *dhcp;

575 
îr_t
 
ªsu…
 = 
ERR_OK
;

577 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

578 
dh˝
 = 
√tif
->dhcp;

579 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

582 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

585 i‡(
√tif
->
mtu
 < 
DHCP_MAX_MSG_LEN_MIN_REQUIRED
) {

586 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): Cannot useÅhisÇetif with DHCP: MTU isÅoo small\n"));

587  
ERR_MEM
;

591 i‡(
dh˝
 =
NULL
) {

592 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): startingÇew DHCP client\n"));

593 
dh˝
 = 
	`mem_mÆloc
((dhcp));

594 i‡(
dh˝
 =
NULL
) {

595 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇotállocate dhcp\n"));

596  
ERR_MEM
;

599 
√tif
->
dh˝
 = dhcp;

600 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start():állocated dhcp"));

603 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("dhcp_start():Ñestarting DHCP configuration\n"));

604 i‡(
dh˝
->
pcb
 !
NULL
) {

605 
	`udp_ªmove
(
dh˝
->
pcb
);

607 i‡(
dh˝
->
p
 !
NULL
) {

608 
	`pbuf_‰ì
(
dh˝
->
p
);

613 
	`mem£t
(
dh˝
, 0, (dhcp));

615 
dh˝
->
pcb
 = 
	`udp_√w
();

616 i‡(
dh˝
->
pcb
 =
NULL
) {

617 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇot obtainÖcb\n"));

618 
	`mem_‰ì
((*)
dh˝
);

619 
√tif
->
dh˝
 = dh˝ = 
NULL
;

620  
ERR_MEM
;

622 #i‡
IP_SOF_BROADCAST


623 
dh˝
->
pcb
->
so_›ti⁄s
|=
SOF_BROADCAST
;

626 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

627 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

629 
	`udp_ªcv
(
dh˝
->
pcb
, 
dh˝_ªcv
, 
√tif
);

630 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): starting DHCP configuration\n"));

632 
ªsu…
 = 
	`dh˝_discovî
(
√tif
);

633 i‡(
ªsu…
 !
ERR_OK
) {

635 
	`dh˝_°›
(
√tif
);

636  
ERR_MEM
;

639 
√tif
->
Êags
 |
NETIF_FLAG_DHCP
;

640  
ªsu…
;

641 
	}
}

653 
	$dh˝_öf‹m
(
√tif
 *netif)

655 
dh˝
 *dh˝, *
ﬁd_dh˝
 = 
√tif
->dhcp;

656 
îr_t
 
ªsu…
 = 
ERR_OK
;

657 
dh˝
 = 
	`mem_mÆloc
((dhcp));

658 i‡(
dh˝
 =
NULL
) {

659 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇotállocate dhcp\n"));

662 
√tif
->
dh˝
 = dhcp;

663 
	`mem£t
(
dh˝
, 0, (dhcp));

665 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform():állocated dhcp\n"));

666 
dh˝
->
pcb
 = 
	`udp_√w
();

667 i‡(
dh˝
->
pcb
 =
NULL
) {

668 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇot obtainÖcb"));

669 
	`mem_‰ì
((*)
dh˝
);

672 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform(): createdÇew udpÖcb\n"));

674 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

675 i‡(
ªsu…
 =
ERR_OK
) {

677 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

678 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_INFORM
);

680 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

681 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

683 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

685 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

687 #i‡
IP_SOF_BROADCAST


688 
dh˝
->
pcb
->
so_›ti⁄s
|=
SOF_BROADCAST
;

690 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

691 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
);

692 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_inform: INFORMING\n"));

693 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

694 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

695 
	`dh˝_dñëe_ªque°
(
√tif
);

697 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform: couldÇotállocate DHCPÑequest\n"));

700 i‡(
dh˝
->
pcb
 !
NULL
) {

701 
	`udp_ªmove
(
dh˝
->
pcb
);

703 
dh˝
->
pcb
 = 
NULL
;

704 
	`mem_‰ì
((*)
dh˝
);

705 
√tif
->
dh˝
 = 
ﬁd_dh˝
;

706 
	}
}

708 #i‡
DHCP_DOES_ARP_CHECK


715 
	$dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
)

717 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

718 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_arp_reply()\n"));

720 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
°©e
 =
DHCP_CHECKING
)) {

721 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_¨p_ª∂y(): CHECKING,áΩÑïly f‹ 0x%08"
X32_F
"\n", 
addr
->addr));

724 i‡(
	`ù_addr_cmp
(
addr
, &
√tif
->
dh˝
->
of„ªd_ù_addr
)) {

726 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1, ("dhcp_arp_reply():árpÑeply matched with offeredáddress, declining\n"));

727 
	`dh˝_de˛öe
(
√tif
);

730 
	}
}

741 
îr_t


742 
	$dh˝_de˛öe
(
√tif
 *netif)

744 
dh˝
 *dh˝ = 
√tif
->dhcp;

745 
îr_t
 
ªsu…
 = 
ERR_OK
;

746 
u16_t
 
m£cs
;

747 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_decline()\n"));

748 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

750 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

751 i‡(
ªsu…
 =
ERR_OK
) {

752 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

753 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DECLINE
);

755 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

756 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

758 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

760 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

763 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

765 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

766 
	`dh˝_dñëe_ªque°
(
√tif
);

767 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_decline: BACKING OFF\n"));

769 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_decline: couldÇotállocate DHCPÑequest\n"));

771 
dh˝
->
åõs
++;

772 
m£cs
 = 10*1000;

773 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

774 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_de˛öe(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

775  
ªsu…
;

776 
	}
}

785 
îr_t


786 
	$dh˝_discovî
(
√tif
 *netif)

788 
dh˝
 *dh˝ = 
√tif
->dhcp;

789 
îr_t
 
ªsu…
 = 
ERR_OK
;

790 
u16_t
 
m£cs
;

791 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_discover()\n"));

792 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, 
IP_ADDR_ANY
);

793 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_SELECTING
);

795 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

796 i‡(
ªsu…
 =
ERR_OK
) {

797 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: makingÑequest\n"));

798 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

799 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DISCOVER
);

801 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

802 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

804 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

805 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

806 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

807 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

808 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

810 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

812 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover:Ñealloc()ing\n"));

813 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

815 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

816 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));

817 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

818 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: deleting()ing\n"));

819 
	`dh˝_dñëe_ªque°
(
√tif
);

820 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_discover: SELECTING\n"));

822 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_discover: couldÇotállocate DHCPÑequest\n"));

824 
dh˝
->
åõs
++;

825 #i‡
LWIP_DHCP_AUTOIP_COOP


826 if(
dh˝
->
åõs
 >
LWIP_DHCP_AUTOIP_COOP_TRIES
 && dh˝->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_OFF
) {

827 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_ON
;

828 
	`autoù_°¨t
(
√tif
);

831 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

832 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

833 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_discovî(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

834  
ªsu…
;

835 
	}
}

844 
	$dh˝_böd
(
√tif
 *netif)

846 
u32_t
 
timeout
;

847 
dh˝
 *dhcp;

848 
ù_addr
 
¢_mask
, 
gw_addr
;

849 
	`LWIP_ERROR
("dh˝_böd:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

850 
dh˝
 = 
√tif
->dhcp;

851 
	`LWIP_ERROR
("dh˝_böd: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

852 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_böd“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

855 i‡(
dh˝
->
of„ªd_t1_ª√w
 != 0xffffffffUL) {

857 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å1ÑíewÆÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t1_ª√w
));

858 
timeout
 = (
dh˝
->
of„ªd_t1_ª√w
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

859 if(
timeout
 > 0xffff) {

860 
timeout
 = 0xffff;

862 
dh˝
->
t1_timeout
 = (
u16_t
)
timeout
;

863 i‡(
dh˝
->
t1_timeout
 == 0) {

864 
dh˝
->
t1_timeout
 = 1;

866 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t1_ª√w
*1000));

869 i‡(
dh˝
->
of„ªd_t2_ªböd
 != 0xffffffffUL) {

870 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å2ÑebödÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t2_ªböd
));

871 
timeout
 = (
dh˝
->
of„ªd_t2_ªböd
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

872 if(
timeout
 > 0xffff) {

873 
timeout
 = 0xffff;

875 
dh˝
->
t2_timeout
 = (
u16_t
)
timeout
;

876 i‡(
dh˝
->
t2_timeout
 == 0) {

877 
dh˝
->
t2_timeout
 = 1;

879 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t2_ªböd
*1000));

882 
	`ù_addr_£t
(&
¢_mask
, &
dh˝
->
of„ªd_¢_mask
);

886 i‡(
¢_mask
.
addr
 == 0) {

888 
u8_t
 
fú°_o˘ë
 = 
	`ù4_addr1
(&
¢_mask
);

889 i‡(
fú°_o˘ë
 <= 127) {

890 
¢_mask
.
addr
 = 
	`ht⁄l
(0xff000000);

891 } i‡(
fú°_o˘ë
 >= 192) {

892 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffffff00);

894 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffff0000);

898 
	`ù_addr_£t
(&
gw_addr
, &
dh˝
->
of„ªd_gw_addr
);

900 i‡(
gw_addr
.
addr
 == 0) {

902 
gw_addr
.
addr
 = (
dh˝
->
of„ªd_ù_addr
.add∏& 
¢_mask
.addr);

904 
gw_addr
.
addr
 |
	`ht⁄l
(0x00000001);

907 #i‡
LWIP_DHCP_AUTOIP_COOP


908 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

909 
	`autoù_°›
(
√tif
);

910 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

914 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): IP: 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

915 
	`√tif_£t_ùaddr
(
√tif
, &
dh˝
->
of„ªd_ù_addr
);

916 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): SN: 0x%08"
X32_F
"\n", 
¢_mask
.
addr
));

917 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

918 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): GW: 0x%08"
X32_F
"\n", 
gw_addr
.
addr
));

919 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

921 
	`√tif_£t_up
(
√tif
);

923 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BOUND
);

924 
	}
}

931 
îr_t


932 
	$dh˝_ª√w
(
√tif
 *netif)

934 
dh˝
 *dh˝ = 
√tif
->dhcp;

935 
îr_t
 
ªsu…
;

936 
u16_t
 
m£cs
;

937 #i‡
LWIP_NETIF_HOSTNAME


938 c⁄° *
p
;

940 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_renew()\n"));

941 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_RENEWING
);

944 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

945 i‡(
ªsu…
 =
ERR_OK
) {

947 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

948 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

950 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

951 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

953 #i‡
LWIP_NETIF_HOSTNAME


954 
p
 = (c⁄° *)
√tif
->
ho°«me
;

955 i‡(
p
 !
NULL
) {

956 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

957 *
p
) {

958 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

964 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

965 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

969 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

970 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

973 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

975 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

977 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

978 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

979 
	`dh˝_dñëe_ªque°
(
√tif
);

981 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_renew: RENEWING\n"));

983 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_renew: couldÇotállocate DHCPÑequest\n"));

985 
dh˝
->
åõs
++;

987 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 2000 : 20 * 1000;

988 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

989 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ª√w(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

990  
ªsu…
;

991 
	}
}

998 
îr_t


999 
	$dh˝_ªböd
(
√tif
 *netif)

1001 
dh˝
 *dh˝ = 
√tif
->dhcp;

1002 
îr_t
 
ªsu…
;

1003 
u16_t
 
m£cs
;

1004 #i‡
LWIP_NETIF_HOSTNAME


1005 c⁄° *
p
;

1007 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind()\n"));

1008 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBINDING
);

1011 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1012 i‡(
ªsu…
 =
ERR_OK
) {

1014 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1015 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

1017 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

1018 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

1020 #i‡
LWIP_NETIF_HOSTNAME


1021 
p
 = (c⁄° *)
√tif
->
ho°«me
;

1022 i‡(
p
 !
NULL
) {

1023 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

1024 *
p
) {

1025 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

1031 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

1032 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

1034 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

1035 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

1038 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1040 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1043 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

1044 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

1045 
	`dh˝_dñëe_ªque°
(
√tif
);

1046 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind: REBINDING\n"));

1048 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_rebind: couldÇotállocate DHCPÑequest\n"));

1050 
dh˝
->
åõs
++;

1051 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1052 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1053 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªböd(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1054  
ªsu…
;

1055 
	}
}

1062 
îr_t


1063 
	$dh˝_ªÀa£
(
√tif
 *netif)

1065 
dh˝
 *dh˝ = 
√tif
->dhcp;

1066 
îr_t
 
ªsu…
;

1067 
u16_t
 
m£cs
;

1068 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_release()\n"));

1071 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1073 
dh˝
->
£rvî_ù_addr
.
addr
 = 0;

1074 
dh˝
->
of„ªd_ù_addr
.
addr
 = dh˝->
of„ªd_¢_mask
.addr = 0;

1075 
dh˝
->
of„ªd_gw_addr
.
addr
 = dh˝->
of„ªd_bc_addr
.addr = 0;

1076 
dh˝
->
of„ªd_t0_Àa£
 = dh˝->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t2_ªböd
 = 0;

1077 
dh˝
->
dns_cou¡
 = 0;

1080 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1081 i‡(
ªsu…
 =
ERR_OK
) {

1082 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1083 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_RELEASE
);

1085 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1087 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1089 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

1090 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1091 
	`dh˝_dñëe_ªque°
(
√tif
);

1092 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_release: RELEASED, DHCP_OFF\n"));

1094 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_release: couldÇotállocate DHCPÑequest\n"));

1096 
dh˝
->
åõs
++;

1097 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1098 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1099 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªÀa£(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1101 
	`√tif_£t_down
(
√tif
);

1103 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

1104 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

1105 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

1108  
ªsu…
;

1109 
	}
}

1117 
	$dh˝_°›
(
√tif
 *netif)

1119 
dh˝
 *dh˝ = 
√tif
->dhcp;

1120 
	`LWIP_ERROR
("dh˝_°›:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1122 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

1124 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_stop()\n"));

1126 i‡(
dh˝
 !
NULL
) {

1127 #i‡
LWIP_DHCP_AUTOIP_COOP


1128 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

1129 
	`autoù_°›
(
√tif
);

1130 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

1134 i‡(
dh˝
->
pcb
 !
NULL
) {

1135 
	`udp_ªmove
(
dh˝
->
pcb
);

1136 
dh˝
->
pcb
 = 
NULL
;

1138 i‡(
dh˝
->
p
 !
NULL
) {

1139 
	`pbuf_‰ì
(
dh˝
->
p
);

1140 
dh˝
->
p
 = 
NULL
;

1143 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1144 
	`mem_‰ì
((*)
dh˝
);

1145 
√tif
->
dh˝
 = 
NULL
;

1147 
	}
}

1157 
	$dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
)

1159 i‡(
√w_°©e
 !
dh˝
->
°©e
) {

1160 
dh˝
->
°©e
 = 
√w_°©e
;

1161 
dh˝
->
åõs
 = 0;

1163 
	}
}

1171 
	$dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
)

1173 
	`LWIP_ASSERT
("dh˝_›ti⁄: dh˝->›ti⁄s_out_À¿+ 2 + o±i⁄_À¿<DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U + 
›ti⁄_Àn
 <
DHCP_OPTIONS_LEN
);

1174 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_ty≥
;

1175 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_Àn
;

1176 
	}
}

1182 
	$dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
)

1184 
	`LWIP_ASSERT
("dh˝_›ti⁄_byã: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1185 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
vÆue
;

1186 
	}
}

1189 
	$dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
)

1191 
	`LWIP_ASSERT
("dh˝_›ti⁄_sh‹t: dh˝->›ti⁄s_out_À¿+ 2 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U <
DHCP_OPTIONS_LEN
);

1192 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff00U) >> 8);

1193 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
Ë(
vÆue
 & 0x00ffU);

1194 
	}
}

1197 
	$dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
)

1199 
	`LWIP_ASSERT
("dh˝_›ti⁄_l⁄g: dh˝->›ti⁄s_out_À¿+ 4 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 4U <
DHCP_OPTIONS_LEN
);

1200 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff000000UL) >> 24);

1201 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x00ff0000UL) >> 16);

1202 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x0000ff00UL) >> 8);

1203 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x000000ffUL));

1204 
	}
}

1216 
îr_t


1217 
	$dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp)

1219 
u16_t
 
ªt
;

1220 
	`LWIP_ERROR
("dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_ARG
;);

1221 
	`LWIP_ERROR
("dh˝->∞!NULL", (
dh˝
->
p
 !
NULL
),  
ERR_VAL
;);

1223 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1225 i‡(
dh˝
->
p
->
tŸ_Àn
 > ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
)) {

1226 
dh˝
->
›ti⁄s_ö_Àn
 = dh˝->
p
->
tŸ_Àn
 - ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1227 
dh˝
->
›ti⁄s_ö
 = 
	`mem_mÆloc
(dh˝->
›ti⁄s_ö_Àn
);

1228 i‡(
dh˝
->
›ti⁄s_ö
 =
NULL
) {

1229 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->options\n"));

1230  
ERR_MEM
;

1233 
dh˝
->
msg_ö
 = 
	`mem_mÆloc
((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1234 i‡(
dh˝
->
msg_ö
 =
NULL
) {

1235 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->msg_in\n"));

1236 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1237 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1238  
ERR_MEM
;

1242 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
msg_ö
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
, 0);

1243 
	`LWIP_ASSERT
("ªà=sizeof(°ru˘ dh˝_msgË- DHCP_OPTIONS_LEN", 
ªt
 =(
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1244 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytes into dhcp->msg_in[]\n",

1245 (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
));

1247 i‡(
dh˝
->
›ti⁄s_ö
 !
NULL
) {

1249 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
›ti⁄s_ö
, dh˝->
›ti⁄s_ö_Àn
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1250 
	`LWIP_ASSERT
("ªà=dh˝->›ti⁄s_ö_Àn", 
ªt
 =
dh˝
->
›ti⁄s_ö_Àn
);

1251 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytesÅo dhcp->options_in[]\n",

1252 
dh˝
->
›ti⁄s_ö_Àn
));

1254 
	`LWIP_UNUSED_ARG
(
ªt
);

1255  
ERR_OK
;

1256 
	}
}

1263 
	$dh˝_‰ì_ª∂y
(
dh˝
 *dhcp)

1265 i‡(
dh˝
->
msg_ö
 !
NULL
) {

1266 
	`mem_‰ì
((*)
dh˝
->
msg_ö
);

1267 
dh˝
->
msg_ö
 = 
NULL
;

1269 i‡(
dh˝
->
›ti⁄s_ö
) {

1270 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1271 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1272 
dh˝
->
›ti⁄s_ö_Àn
 = 0;

1274 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("dhcp_free_reply(): free'd\n"));

1275 
	}
}

1281 
	$dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

1283 
√tif
 *√ti‡(√ti‡*)
¨g
;

1284 
dh˝
 *dh˝ = 
√tif
->dhcp;

1285 
dh˝_msg
 *
ª∂y_msg
 = (dh˝_msg *)
p
->
∑ylﬂd
;

1286 
u8_t
 *
›ti⁄s_±r
;

1287 
u8_t
 
msg_ty≥
;

1288 
u8_t
 
i
;

1289 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_ªcv’bu‡%pË‰om DHCP sîvî %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"Ö‹à%"U16_F"\n", (*)
p
,

1290 (
u16_t
)(
	`¡ohl
(
addr
->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),

1291 (
u16_t
)(
	`¡ohl
(
addr
->addrË>> 8 & 0xff), (u16_t)“tohl◊ddr->addrË& 0xff), 
p‹t
));

1292 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->À¿%"
U16_F
"\n", 
p
->
Àn
));

1293 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->tŸ_À¿%"
U16_F
"\n", 
p
->
tŸ_Àn
));

1295 
	`LWIP_UNUSED_ARG
(
pcb
);

1296 
	`LWIP_UNUSED_ARG
(
addr
);

1297 
	`LWIP_UNUSED_ARG
(
p‹t
);

1298 
dh˝
->
p
 =Ö;

1300 i‡(
ª∂y_msg
->
›
 !
DHCP_BOOTREPLY
) {

1301 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("nŸá DHCPÑïly mesßge, buàty≥ %"
U16_F
"\n", (
u16_t
)
ª∂y_msg
->
›
));

1302 
‰ì_pbuf_™d_ªtu∫
;

1305 
i
 = 0; i < 
√tif
->
hwaddr_Àn
; i++) {

1306 i‡(
√tif
->
hwaddr
[
i
] !
ª∂y_msg
->
chaddr
[i]) {

1307 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("√tif->hwaddr[%"
U16_F
"]==%02"
X16_F
" !=Ñeply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",

1308 (
u16_t
)
i
, (u16_t)
√tif
->
hwaddr
[i], (u16_t)i, (u16_t)
ª∂y_msg
->
chaddr
[i]));

1309 
‰ì_pbuf_™d_ªtu∫
;

1313 i‡(
	`¡ohl
(
ª∂y_msg
->
xid
Ë!
dh˝
->xid) {

1314 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id mism©chÑïly_msg->xid(%"
X32_F
")!=dh˝->xid(%"X32_F")\n",
	`¡ohl
(
ª∂y_msg
->
xid
),
dh˝
->xid));

1315 
‰ì_pbuf_™d_ªtu∫
;

1318 i‡(
	`dh˝_unfﬁd_ª∂y
(
dh˝
Ë!
ERR_OK
) {

1319 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("problem unfolding DHCP message -Åoo short on memory?\n"));

1320 
‰ì_pbuf_™d_ªtu∫
;

1323 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));

1325 
›ti⁄s_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
);

1326 i‡(
›ti⁄s_±r
 =
NULL
) {

1327 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OPTION_MESSAGE_TYPE optionÇot found\n"));

1328 
‰ì_pbuf_™d_ªtu∫
;

1332 
msg_ty≥
 = 
	`dh˝_gë_›ti⁄_byã
(
›ti⁄s_±r
 + 2);

1334 i‡(
msg_ty≥
 =
DHCP_ACK
) {

1335 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_ACKÑeceived\n"));

1337 i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

1338 
	`dh˝_h™dÀ_ack
(
√tif
);

1339 
dh˝
->
ªque°_timeout
 = 0;

1340 #i‡
DHCP_DOES_ARP_CHECK


1342 
	`dh˝_check
(
√tif
);

1345 
	`dh˝_böd
(
√tif
);

1349 i‡((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

1350 
dh˝
->
ªque°_timeout
 = 0;

1351 
	`dh˝_böd
(
√tif
);

1355 i‡((
msg_ty≥
 =
DHCP_NAK
) &&

1356 ((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REQUESTING
) ||

1357 (
dh˝
->
°©e
 =
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
 ))) {

1358 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_NAKÑeceived\n"));

1359 
dh˝
->
ªque°_timeout
 = 0;

1360 
	`dh˝_h™dÀ_«k
(
√tif
);

1363 i‡((
msg_ty≥
 =
DHCP_OFFER
Ë&& (
dh˝
->
°©e
 =
DHCP_SELECTING
)) {

1364 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OFFERÑeceived in DHCP_SELECTING state\n"));

1365 
dh˝
->
ªque°_timeout
 = 0;

1367 
	`dh˝_h™dÀ_of„r
(
√tif
);

1369 
‰ì_pbuf_™d_ªtu∫
:

1370 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1371 
	`pbuf_‰ì
(
p
);

1372 
dh˝
->
p
 = 
NULL
;

1373 
	}
}

1380 
îr_t


1381 
	$dh˝_¸óã_ªque°
(
√tif
 *netif)

1383 
dh˝
 *dhcp;

1384 
u16_t
 
i
;

1385 #i‚de‡
DHCP_GLOBAL_XID


1390 
u32_t
 
xid
 = 0xABCD0000;

1392 
u32_t
 
xid
;

1393 
u8_t
 
xid_öôüli£d
 = 0;

1394 i‡(!
xid_öôüli£d
) {

1395 
xid
 = 
DHCP_GLOBAL_XID
;

1396 
xid_öôüli£d
 = !xid_initialised;

1399 
	`LWIP_ERROR
("dh˝_¸óã_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

1400 
dh˝
 = 
√tif
->dhcp;

1401 
	`LWIP_ERROR
("dh˝_¸óã_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_VAL
;);

1402 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->p_ouà=NULL", 
dh˝
->
p_out
 =
NULL
);

1403 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->msg_ouà=NULL", 
dh˝
->
msg_out
 =
NULL
);

1404 
dh˝
->
p_out
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dh˝_msg
), 
PBUF_RAM
);

1405 i‡(
dh˝
->
p_out
 =
NULL
) {

1406 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_create_request(): couldÇotállocateÖbuf\n"));

1407  
ERR_MEM
;

1409 
	`LWIP_ASSERT
("dhcp_create_request: checkÅhat firstÖbuf can hold struct dhcp_msg",

1410 (
dh˝
->
p_out
->
Àn
 >(
dh˝_msg
)));

1413 i‡(
dh˝
->
åõs
==0)

1414 
xid
++;

1415 
dh˝
->
xid
 = xid;

1416 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2,

1417 ("å™ß˘i⁄ id xid(%"
X32_F
")\n", 
xid
));

1419 
dh˝
->
msg_out
 = (
dh˝_msg
 *)dh˝->
p_out
->
∑ylﬂd
;

1421 
dh˝
->
msg_out
->
›
 = 
DHCP_BOOTREQUEST
;

1423 
dh˝
->
msg_out
->
hty≥
 = 
DHCP_HTYPE_ETH
;

1425 
dh˝
->
msg_out
->
hÀn
 = 
DHCP_HLEN_ETH
;

1426 
dh˝
->
msg_out
->
h›s
 = 0;

1427 
dh˝
->
msg_out
->
xid
 = 
	`ht⁄l
(dhcp->xid);

1428 
dh˝
->
msg_out
->
£cs
 = 0;

1429 
dh˝
->
msg_out
->
Êags
 = 0;

1430 
dh˝
->
msg_out
->
cüddr
.
addr
 = 0;

1431 i‡(
dh˝
->
°©e
==
DHCP_BOUND
 || dh˝->°©e==
DHCP_RENEWING
 || dh˝->°©e==
DHCP_REBINDING
) {

1432 
dh˝
->
msg_out
->
cüddr
.
addr
 = 
√tif
->
ù_addr
.addr;

1434 
dh˝
->
msg_out
->
yüddr
.
addr
 = 0;

1435 
dh˝
->
msg_out
->
süddr
.
addr
 = 0;

1436 
dh˝
->
msg_out
->
güddr
.
addr
 = 0;

1437 
i
 = 0; i < 
DHCP_CHADDR_LEN
; i++) {

1439 
dh˝
->
msg_out
->
chaddr
[
i
] = (ò< 
√tif
->
hwaddr_Àn
Ë?Çëif->
hwaddr
[i] : 0 ;

1441 
i
 = 0; i < 
DHCP_SNAME_LEN
; i++) {

1442 
dh˝
->
msg_out
->
¢ame
[
i
] = 0;

1444 
i
 = 0; i < 
DHCP_FILE_LEN
; i++) {

1445 
dh˝
->
msg_out
->
fûe
[
i
] = 0;

1447 
dh˝
->
msg_out
->
cookõ
 = 
	`ht⁄l
(0x63825363UL);

1448 
dh˝
->
›ti⁄s_out_Àn
 = 0;

1450 
i
 = 0; i < 
DHCP_OPTIONS_LEN
; i++) {

1451 
dh˝
->
msg_out
->
›ti⁄s
[
i
] = (
u8_t
)i;

1453  
ERR_OK
;

1454 
	}
}

1462 
	$dh˝_dñëe_ªque°
(
√tif
 *netif)

1464 
dh˝
 *dhcp;

1465 
	`LWIP_ERROR
("dh˝_dñëe_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1466 
dh˝
 = 
√tif
->dhcp;

1467 
	`LWIP_ERROR
("dh˝_dñëe_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1468 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->p_ouà!NULL", 
dh˝
->
p_out
 !
NULL
);

1469 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->msg_ouà!NULL", 
dh˝
->
msg_out
 !
NULL
);

1470 i‡(
dh˝
->
p_out
 !
NULL
) {

1471 
	`pbuf_‰ì
(
dh˝
->
p_out
);

1473 
dh˝
->
p_out
 = 
NULL
;

1474 
dh˝
->
msg_out
 = 
NULL
;

1475 
	}
}

1486 
	$dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp)

1488 
	`LWIP_ERROR
("dh˝_›ti⁄_åaûî: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1489 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->msg_ouà!NULL\n", 
dh˝
->
msg_out
 !
NULL
);

1490 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1491 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
DHCP_OPTION_END
;

1493 (
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_MIN_OPTIONS_LEN
) || (dhcp->options_out_len & 3)) {

1495 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1497 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 0;

1499 
	}
}

1510 
u8_t
 *
	$dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
)

1512 
u8_t
 
ovîlﬂd
 = 
DHCP_OVERLOAD_NONE
;

1515 i‡((
dh˝
->
›ti⁄s_ö
 !
NULL
Ë&& (dh˝->
›ti⁄s_ö_Àn
 > 0)) {

1517 
u8_t
 *
›ti⁄s
 = (u8_à*)
dh˝
->
›ti⁄s_ö
;

1518 
u16_t
 
off£t
 = 0;

1520 (
off£t
 < 
dh˝
->
›ti⁄s_ö_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1523 i‡(
›ti⁄s
[
off£t
] =
DHCP_OPTION_OVERLOAD
) {

1524 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("overloaded message detected\n"));

1526 
off£t
 += 2;

1527 
ovîlﬂd
 = 
›ti⁄s
[
off£t
++];

1530 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1531 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£à%"
U16_F
" i¿›ti⁄s\n", 
off£t
));

1532  &
›ti⁄s
[
off£t
];

1535 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("skùpög o±i⁄ %"
U16_F
" i¿›ti⁄s\n", 
›ti⁄s
[
off£t
]));

1537 
off£t
++;

1539 
off£t
 +1 + 
›ti⁄s
[offset];

1543 i‡(
ovîlﬂd
 !
DHCP_OVERLOAD_NONE
) {

1544 
u16_t
 
fõld_Àn
;

1545 i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_FILE
) {

1546 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded file field\n"));

1547 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
fûe
;

1548 
fõld_Àn
 = 
DHCP_FILE_LEN
;

1549 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME
) {

1550 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded sname field\n"));

1551 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1552 
fõld_Àn
 = 
DHCP_SNAME_LEN
;

1555 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded snameánd file field\n"));

1556 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1557 
fõld_Àn
 = 
DHCP_FILE_LEN
 + 
DHCP_SNAME_LEN
;

1559 
off£t
 = 0;

1562 (
off£t
 < 
fõld_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1563 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1564 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£t=%"
U16_F
"\n", 
off£t
));

1565  &
›ti⁄s
[
off£t
];

1568 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("skùpög o±i⁄ %"
U16_F
"\n", 
›ti⁄s
[
off£t
]));

1570 
off£t
++;

1571 
off£t
 +1 + 
›ti⁄s
[offset];

1576  
NULL
;

1577 
	}
}

1587 
u8_t


1588 
	$dh˝_gë_›ti⁄_byã
(
u8_t
 *
±r
)

1590 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ byã vÆue=%"
U16_F
"\n", (
u16_t
)(*
±r
)));

1591  *
±r
;

1592 
	}
}

1603 
u16_t


1604 
	$dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
)

1606 
u16_t
 
vÆue
;

1607 
vÆue
 = *
±r
++ << 8;

1608 
vÆue
 |*
±r
;

1609 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ sh‹àvÆue=%"
U16_F
"\n", 
vÆue
));

1610  
vÆue
;

1611 
	}
}

1622 
u32_t
 
	$dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
)

1624 
u32_t
 
vÆue
;

1625 
vÆue
 = (
u32_t
)(*
±r
++) << 24;

1626 
vÆue
 |(
u32_t
)(*
±r
++) << 16;

1627 
vÆue
 |(
u32_t
)(*
±r
++) << 8;

1628 
vÆue
 |(
u32_t
)(*
±r
++);

1629 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄Ü⁄g vÆue=%"
U32_F
"\n", 
vÆue
));

1630  
vÆue
;

1631 
	}
}

	@core/dns.c

75 
	~"lwù/›t.h
"

77 #i‡
LWIP_DNS


79 
	~"lwù/udp.h
"

80 
	~"lwù/mem.h
"

81 
	~"lwù/dns.h
"

83 
	~<°rög.h
>

86 #i‚de‡
DNS_SERVER_ADDRESS


87 
	#DNS_SERVER_ADDRESS
 
	`öë_addr
("208.67.222.222"Ë

	)

91 #i‚de‡
DNS_SERVER_PORT


92 
	#DNS_SERVER_PORT
 53

	)

96 #i‚de‡
DNS_MAX_RETRIES


97 
	#DNS_MAX_RETRIES
 4

	)

101 #i‚de‡
DNS_MAX_TTL


102 
	#DNS_MAX_TTL
 604800

	)

106 
	#DNS_FLAG1_RESPONSE
 0x80

	)

107 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

108 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

109 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

110 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

111 
	#DNS_FLAG1_TRUNC
 0x02

	)

112 
	#DNS_FLAG1_RD
 0x01

	)

113 
	#DNS_FLAG2_RA
 0x80

	)

114 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

115 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

116 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

119 
	#DNS_STATE_UNUSED
 0

	)

120 
	#DNS_STATE_NEW
 1

	)

121 
	#DNS_STATE_ASKING
 2

	)

122 
	#DNS_STATE_DONE
 3

	)

124 #ifde‡
PACK_STRUCT_USE_INCLUDES


125 
	~"¨ch/bp°ru˘.h
"

127 
PACK_STRUCT_BEGIN


129 
	sdns_hdr
 {

130 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

131 
PACK_STRUCT_FIELD
(
u8_t
 
Êags1
);

132 
PACK_STRUCT_FIELD
(
u8_t
 
Êags2
);

133 
PACK_STRUCT_FIELD
(
u16_t
 
numque°i⁄s
);

134 
PACK_STRUCT_FIELD
(
u16_t
 
num™swîs
);

135 
PACK_STRUCT_FIELD
(
u16_t
 
numauthº
);

136 
PACK_STRUCT_FIELD
(
u16_t
 
numexå¨r
);

137 } 
	gPACK_STRUCT_STRUCT
;

138 
	gPACK_STRUCT_END


139 #ifde‡
PACK_STRUCT_USE_INCLUDES


140 
	~"¨ch/ï°ru˘.h
"

142 
	#SIZEOF_DNS_HDR
 12

	)

144 #ifde‡
PACK_STRUCT_USE_INCLUDES


145 
	~"¨ch/bp°ru˘.h
"

147 
PACK_STRUCT_BEGIN


149 
	sdns_quîy
 {

152 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

153 
PACK_STRUCT_FIELD
(
u16_t
 
˛ass
);

154 } 
	gPACK_STRUCT_STRUCT
;

155 
	gPACK_STRUCT_END


156 #ifde‡
PACK_STRUCT_USE_INCLUDES


157 
	~"¨ch/ï°ru˘.h
"

159 
	#SIZEOF_DNS_QUERY
 4

	)

161 #ifde‡
PACK_STRUCT_USE_INCLUDES


162 
	~"¨ch/bp°ru˘.h
"

164 
PACK_STRUCT_BEGIN


166 
	sdns_™swî
 {

169 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

170 
PACK_STRUCT_FIELD
(
u16_t
 
˛ass
);

171 
PACK_STRUCT_FIELD
(
u32_t
 
âl
);

172 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

173 } 
	gPACK_STRUCT_STRUCT
;

174 
	gPACK_STRUCT_END


175 #ifde‡
PACK_STRUCT_USE_INCLUDES


176 
	~"¨ch/ï°ru˘.h
"

178 
	#SIZEOF_DNS_ANSWER
 10

	)

181 
	sdns_èbÀ_íåy
 {

182 
u8_t
 
	m°©e
;

183 
u8_t
 
	mnumdns
;

184 
u8_t
 
	mtmr
;

185 
u8_t
 
	mªåõs
;

186 
u8_t
 
	m£qno
;

187 
u8_t
 
	mîr
;

188 
u32_t
 
	mâl
;

189 
	m«me
[
DNS_MAX_NAME_LENGTH
];

190 
ù_addr
 
	mùaddr
;

192 
dns_found_ˇŒback
 
	mfound
;

193 *
	m¨g
;

196 #i‡
DNS_LOCAL_HOSTLIST


198 
	sloˇl_ho°li°_íåy
 {

200 c⁄° *
	m«me
;

202 
u32_t
 
	maddr
;

203 
loˇl_ho°li°_íåy
 *
	m√xt
;

206 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


209 
loˇl_ho°li°_íåy
 *
	gloˇl_ho°li°_dy«mic
;

214 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_PRE


215 
	#DNS_LOCAL_HOSTLIST_STORAGE_PRE
 

	)

219 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_POST


220 
	#DNS_LOCAL_HOSTLIST_STORAGE_POST


	)

222 
DNS_LOCAL_HOSTLIST_STORAGE_PRE
 
loˇl_ho°li°_íåy
 
	gloˇl_ho°li°_°©ic
[]

223 
	gDNS_LOCAL_HOSTLIST_STORAGE_POST
 = 
DNS_LOCAL_HOSTLIST_INIT
;

227 
dns_öô_loˇl
();

232 
dns_ªcv
(*
s
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

233 
dns_check_íåõs
();

240 
udp_pcb
 *
	gdns_pcb
;

241 
u8_t
 
	gdns_£qno
;

242 
dns_èbÀ_íåy
 
	gdns_èbÀ
[
DNS_TABLE_SIZE
];

243 
ù_addr
 
	gdns_£rvîs
[
DNS_MAX_SERVERS
];

245 #i‡(
DNS_USES_STATIC_BUF
 == 1)

246 
u8_t
 
	gdns_∑ylﬂd
[
DNS_MSG_SIZE
];

254 
	$dns_öô
()

256 
ù_addr
 
dns£rvî
;

259 
dns£rvî
.
addr
 = 
DNS_SERVER_ADDRESS
;

261 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_init: initializing\n"));

264 i‡(
dns_pcb
 =
NULL
) {

265 
dns_pcb
 = 
	`udp_√w
();

267 i‡(
dns_pcb
 !
NULL
) {

270 
	`LWIP_ASSERT
("For implicit initializationÅo work, DNS_STATE_UNUSEDÇeedsÅo be 0",

271 
DNS_STATE_UNUSED
 == 0);

274 
	`udp_böd
(
dns_pcb
, 
IP_ADDR_ANY
, 0);

275 
	`udp_ªcv
(
dns_pcb
, 
dns_ªcv
, 
NULL
);

278 
	`dns_£t£rvî
(0, &
dns£rvî
);

281 #i‡
DNS_LOCAL_HOSTLIST


282 
	`dns_öô_loˇl
();

284 
	}
}

293 
	$dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
)

295 i‡((
numdns
 < 
DNS_MAX_SERVERS
Ë&& (
dns_pcb
 !
NULL
) &&

296 (
dns£rvî
 !
NULL
Ë&& (dns£rvî->
addr
 !=0 )) {

297 
dns_£rvîs
[
numdns
] = (*
dns£rvî
);

299 
	}
}

308 
ù_addr


309 
	$dns_gë£rvî
(
u8_t
 
numdns
)

311 i‡(
numdns
 < 
DNS_MAX_SERVERS
) {

312  
dns_£rvîs
[
numdns
];

314  *
IP_ADDR_ANY
;

316 
	}
}

323 
	$dns_tmr
()

325 i‡(
dns_pcb
 !
NULL
) {

326 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_tmr: dns_check_entries\n"));

327 
	`dns_check_íåõs
();

329 
	}
}

331 #i‡
DNS_LOCAL_HOSTLIST


333 
	$dns_öô_loˇl
()

335 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && 
	`deföed
(
DNS_LOCAL_HOSTLIST_INIT
)

336 
i
;

337 
loˇl_ho°li°_íåy
 *
íåy
;

339 
loˇl_ho°li°_íåy
 
loˇl_ho°li°_öô
[] = 
DNS_LOCAL_HOSTLIST_INIT
;

340 
i
 = 0; i < (
loˇl_ho°li°_öô
Ë/ (
loˇl_ho°li°_íåy
); i++) {

341 
íåy
 = 
	`mem_mÆloc
((
loˇl_ho°li°_íåy
));

342 
	`LWIP_ASSERT
("mem-îr‹ i¿dns_öô_loˇl", 
íåy
 !
NULL
);

343 i‡(
íåy
 !
NULL
) {

344 
loˇl_ho°li°_íåy
 *
öô_íåy
 = &
loˇl_ho°li°_öô
[
i
];

345 
íåy
->
«me
 = 
öô_íåy
->name;

346 
íåy
->
addr
 = 
öô_íåy
->addr;

347 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

348 
loˇl_ho°li°_dy«mic
 = 
íåy
;

352 
	}
}

361 
u32_t


362 
	$dns_lookup_loˇl
(c⁄° *
ho°«me
)

364 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


365 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

366 
íåy
 !
NULL
) {

367 if(
	`°rcmp
(
íåy
->
«me
, 
ho°«me
) == 0) {

368  
íåy
->
addr
;

370 
íåy
 =É¡ry->
√xt
;

373 
i
;

374 
i
 = 0; i < (
loˇl_ho°li°_°©ic
Ë/ (
loˇl_ho°li°_íåy
); i++) {

375 if(
	`°rcmp
(
loˇl_ho°li°_°©ic
[
i
].
«me
, 
ho°«me
) == 0) {

376  
loˇl_ho°li°_°©ic
[
i
].
addr
;

380  
INADDR_NONE
;

381 
	}
}

383 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


393 
	$dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
)

395 
ªmoved
 = 0;

396 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

397 
loˇl_ho°li°_íåy
 *
œ°_íåy
 = 
NULL
;

398 
íåy
 !
NULL
) {

399 i‡(((
ho°«me
 =
NULL
Ë|| !
	`°rcmp
(
íåy
->
«me
, hostname)) &&

400 ((
addr
 =
NULL
Ë|| (
íåy
->addr ==áddr->addr))) {

401 
loˇl_ho°li°_íåy
 *
‰ì_íåy
;

402 i‡(
œ°_íåy
 !
NULL
) {

403 
œ°_íåy
->
√xt
 = 
íåy
->next;

405 
loˇl_ho°li°_dy«mic
 = 
íåy
->
√xt
;

407 
‰ì_íåy
 = 
íåy
;

408 
íåy
 =É¡ry->
√xt
;

409 
	`mem_‰ì
(
‰ì_íåy
);

410 
ªmoved
++;

412 
œ°_íåy
 = 
íåy
;

413 
íåy
 =É¡ry->
√xt
;

416  
ªmoved
;

417 
	}
}

427 
îr_t


428 
	$dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
)

430 
loˇl_ho°li°_íåy
 *
íåy
;

431 
íåy
 = 
	`mem_mÆloc
((
loˇl_ho°li°_íåy
));

432 i‡(
íåy
 =
NULL
) {

433  
ERR_MEM
;

435 
íåy
->
«me
 = 
ho°«me
;

436 
íåy
->
addr
 =áddr->addr;

437 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

438 
loˇl_ho°li°_dy«mic
 = 
íåy
;

439  
ERR_OK
;

440 
	}
}

457 
u32_t


458 
	$dns_lookup
(c⁄° *
«me
)

460 
u8_t
 
i
;

461 #i‡
DNS_LOCAL_HOSTLIST
 || 
	`deföed
(
DNS_LOOKUP_LOCAL_EXTERN
)

462 
u32_t
 
addr
;

464 #i‡
DNS_LOCAL_HOSTLIST


465 i‡((
addr
 = 
	`dns_lookup_loˇl
(
«me
)Ë!
INADDR_NONE
) {

466  
addr
;

469 #ifde‡
DNS_LOOKUP_LOCAL_EXTERN


470 if((
addr
 = 
	`DNS_LOOKUP_LOCAL_EXTERN
(
«me
)Ë!
INADDR_NONE
) {

471  
addr
;

476 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

477 i‡((
dns_èbÀ
[
i
].
°©e
 =
DNS_STATE_DONE
) &&

478 (
	`°rcmp
(
«me
, 
dns_èbÀ
[
i
].name) == 0)) {

479 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_lookup: \"%s\": found = ", 
«me
));

480 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, &(
dns_èbÀ
[
i
].
ùaddr
));

481 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

482  
dns_èbÀ
[
i
].
ùaddr
.
addr
;

486  
INADDR_NONE
;

487 
	}
}

489 #i‡
DNS_DOES_NAME_CHECK


500 
u8_t


501 
	$dns_com∑ª_«me
(*
quîy
, *
ª•⁄£
)

503 
n
;

506 
n
 = *
ª•⁄£
++;

508 i‡((
n
 & 0xc0) == 0xc0) {

513 
n
 > 0) {

514 i‡((*
quîy
Ë!(*
ª•⁄£
)) {

517 ++
ª•⁄£
;

518 ++
quîy
;

519 --
n
;

521 ++
quîy
;

523 } *
ª•⁄£
 != 0);

526 
	}
}

536 
	$dns_∑r£_«me
(*
quîy
)

538 
n
;

541 
n
 = *
quîy
++;

543 i‡((
n
 & 0xc0) == 0xc0) {

548 
n
 > 0) {

549 ++
quîy
;

550 --
n
;

553 } *
quîy
 != 0);

555  
quîy
 + 1;

556 
	}
}

567 
îr_t


568 
	$dns_£nd
(
u8_t
 
numdns
, c⁄° * 
«me
, u8_à
id
)

570 
îr_t
 
îr
;

571 
dns_hdr
 *
hdr
;

572 
dns_quîy
 
qry
;

573 
pbuf
 *
p
;

574 *
quîy
, *
≈å
;

575 c⁄° *
pHo°«me
;

576 
u8_t
 
n
;

578 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_£nd: dns_£rvîs[%"
U16_F
"] \"%s\":Ñequest\n",

579 (
u16_t
)(
numdns
), 
«me
));

580 
	`LWIP_ASSERT
("dn†£rvî ouào‡¨øy", 
numdns
 < 
DNS_MAX_SERVERS
);

581 
	`LWIP_ASSERT
("dn†£rvî ha†nÿIPáddªs†£t", 
dns_£rvîs
[
numdns
].
addr
 != 0);

584 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
SIZEOF_DNS_HDR
 + 
DNS_MAX_NAME_LENGTH
 +

585 
SIZEOF_DNS_QUERY
, 
PBUF_RAM
);

586 i‡(
p
 !
NULL
) {

587 
	`LWIP_ASSERT
("pbu‡mu° bêö o√Öõ˚", 
p
->
√xt
 =
NULL
);

589 
hdr
 = (
dns_hdr
*)
p
->
∑ylﬂd
;

590 
	`mem£t
(
hdr
, 0, 
SIZEOF_DNS_HDR
);

591 
hdr
->
id
 = 
	`ht⁄s
(id);

592 
hdr
->
Êags1
 = 
DNS_FLAG1_RD
;

593 
hdr
->
numque°i⁄s
 = 
	`ht⁄s
(1);

594 
quîy
 = (*)
hdr
 + 
SIZEOF_DNS_HDR
;

595 
pHo°«me
 = 
«me
;

596 --
pHo°«me
;

600 ++
pHo°«me
;

601 
≈å
 = 
quîy
;

602 ++
quîy
;

603 
n
 = 0; *
pHo°«me
 != '.' && *pHostname != 0; ++pHostname) {

604 *
quîy
 = *
pHo°«me
;

605 ++
quîy
;

606 ++
n
;

608 *
≈å
 = 
n
;

609 } *
pHo°«me
 != 0);

610 *
quîy
++='\0';

613 
qry
.
ty≥
 = 
	`ht⁄s
(
DNS_RRTYPE_A
);

614 
qry
.
˛ass
 = 
	`ht⁄s
(
DNS_RRCLASS_IN
);

615 
	`MEMCPY
–
quîy
, &
qry
, 
SIZEOF_DNS_QUERY
);

618 
	`pbuf_ªÆloc
(
p
, (
quîy
 + 
SIZEOF_DNS_QUERY
Ë- ((*)’->
∑ylﬂd
)));

621 
	`udp_c⁄√˘
(
dns_pcb
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

623 
îr
 = 
	`udp_£ndto
(
dns_pcb
, 
p
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

626 
	`pbuf_‰ì
(
p
);

628 
îr
 = 
ERR_MEM
;

631  
îr
;

632 
	}
}

644 
	$dns_check_íåy
(
u8_t
 
i
)

646 
dns_èbÀ_íåy
 *
pE¡ry
 = &
dns_èbÀ
[
i
];

648 
	`LWIP_ASSERT
("¨øy index ouào‡bounds", 
i
 < 
DNS_TABLE_SIZE
);

650 
pE¡ry
->
°©e
) {

652 
DNS_STATE_NEW
: {

654 
pE¡ry
->
°©e
 = 
DNS_STATE_ASKING
;

655 
pE¡ry
->
numdns
 = 0;

656 
pE¡ry
->
tmr
 = 1;

657 
pE¡ry
->
ªåõs
 = 0;

660 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

664 
DNS_STATE_ASKING
: {

665 i‡(--
pE¡ry
->
tmr
 == 0) {

666 i‡(++
pE¡ry
->
ªåõs
 =
DNS_MAX_RETRIES
) {

667 i‡((
pE¡ry
->
numdns
+1<
DNS_MAX_SERVERS
Ë&& (
dns_£rvîs
[pE¡ry->numdns+1].
addr
!=0)) {

669 
pE¡ry
->
numdns
++;

670 
pE¡ry
->
tmr
 = 1;

671 
pE¡ry
->
ªåõs
 = 0;

674 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\":Åimeout\n", 
pE¡ry
->
«me
));

676 i‡(
pE¡ry
->
found
)

677 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

679 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

680 
pE¡ry
->
found
 = 
NULL
;

686 
pE¡ry
->
tmr
 =ÖE¡ry->
ªåõs
;

689 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

694 
DNS_STATE_DONE
: {

696 i‡(--
pE¡ry
->
âl
 == 0) {

697 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\": flush\n", 
pE¡ry
->
«me
));

699 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

700 
pE¡ry
->
found
 = 
NULL
;

704 
DNS_STATE_UNUSED
:

708 
	`LWIP_ASSERT
("unknown dns_tableÉntry state:", 0);

711 
	}
}

717 
	$dns_check_íåõs
()

719 
u8_t
 
i
;

721 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

722 
	`dns_check_íåy
(
i
);

724 
	}
}

732 
	$dns_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

734 
u8_t
 
i
;

735 *
pHo°«me
;

736 
dns_hdr
 *
hdr
;

737 
dns_™swî
 
™s
;

738 
dns_èbÀ_íåy
 *
pE¡ry
;

739 
u8_t
 
nque°i⁄s
, 
«nswîs
;

740 #i‡(
DNS_USES_STATIC_BUF
 == 0)

741 
u8_t
 
dns_∑ylﬂd
[
DNS_MSG_SIZE
];

743 #i‡(
DNS_USES_STATIC_BUF
 == 2)

744 
u8_t
* 
dns_∑ylﬂd
;

747 
	`LWIP_UNUSED_ARG
(
¨g
);

748 
	`LWIP_UNUSED_ARG
(
pcb
);

749 
	`LWIP_UNUSED_ARG
(
addr
);

750 
	`LWIP_UNUSED_ARG
(
p‹t
);

753 i‡(
p
->
tŸ_Àn
 > 
DNS_MSG_SIZE
) {

754 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo big\n"));

756 
memîr1
;

760 i‡(
p
->
tŸ_Àn
 < (
SIZEOF_DNS_HDR
 + 
SIZEOF_DNS_QUERY
 + 
SIZEOF_DNS_ANSWER
)) {

761 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo small\n"));

763 
memîr1
;

766 #i‡(
DNS_USES_STATIC_BUF
 == 2)

767 
dns_∑ylﬂd
 = 
	`mem_mÆloc
(
p
->
tŸ_Àn
);

768 i‡(
dns_∑ylﬂd
 =
NULL
) {

769 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv: mem_mallocÉrror\n"));

771 
memîr1
;

776 i‡(
	`pbuf_c›y_∑πül
(
p
, 
dns_∑ylﬂd
,Ö->
tŸ_Àn
, 0) ==Ö->tot_len) {

778 
hdr
 = (
dns_hdr
*)
dns_∑ylﬂd
;

779 
i
 = 
	`ht⁄s
(
hdr
->
id
);

780 i‡(
i
 < 
DNS_TABLE_SIZE
) {

781 
pE¡ry
 = &
dns_èbÀ
[
i
];

782 if(
pE¡ry
->
°©e
 =
DNS_STATE_ASKING
) {

784 
pE¡ry
->
°©e
 = 
DNS_STATE_DONE
;

785 
pE¡ry
->
îr
 = 
hdr
->
Êags2
 & 
DNS_FLAG2_ERR_MASK
;

789 
nque°i⁄s
 = 
	`ht⁄s
(
hdr
->
numque°i⁄s
);

790 
«nswîs
 = 
	`ht⁄s
(
hdr
->
num™swîs
);

793 i‡(((
hdr
->
Êags1
 & 
DNS_FLAG1_RESPONSE
Ë=0Ë|| (
pE¡ry
->
îr
 !0Ë|| (
nque°i⁄s
 != 1)) {

794 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿Êags\n", 
pE¡ry
->
«me
));

796 
ª•⁄£îr
;

799 #i‡
DNS_DOES_NAME_CHECK


801 i‡(
	`dns_com∑ª_«me
((*)(
pE¡ry
->
«me
), (*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
) != 0) {

802 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ÇŸ m©chÅÿquîy\n", 
pE¡ry
->
«me
));

804 
ª•⁄£îr
;

809 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
Ë+ 
SIZEOF_DNS_QUERY
;

811 
«nswîs
 > 0) {

813 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)pHostname);

816 
	`MEMCPY
(&
™s
, 
pHo°«me
, 
SIZEOF_DNS_ANSWER
);

817 if((
	`¡ohs
(
™s
.
ty≥
Ë=
DNS_RRTYPE_A
Ë&& (¡ohs◊ns.
˛ass
Ë=
DNS_RRCLASS_IN
Ë&& (¡ohs◊ns.
Àn
Ë=(
ù_addr
)) ) {

819 
pE¡ry
->
âl
 = 
	`¡ohl
(
™s
.ttl);

820 i‡(
pE¡ry
->
âl
 > 
DNS_MAX_TTL
) {

821 
pE¡ry
->
âl
 = 
DNS_MAX_TTL
;

824 
	`MEMCPY
–&(
pE¡ry
->
ùaddr
), (
pHo°«me
+
SIZEOF_DNS_ANSWER
), (
ù_addr
));

825 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ = ", 
pE¡ry
->
«me
));

826 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, (&(
pE¡ry
->
ùaddr
)));

827 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

829 i‡(
pE¡ry
->
found
) {

830 (*
pE¡ry
->
found
)’E¡ry->
«me
, &pE¡ry->
ùaddr
,ÖE¡ry->
¨g
);

833 
memîr2
;

835 
pHo°«me
 =ÖHo°«mê+ 
SIZEOF_DNS_ANSWER
 + 
	`ht⁄s
(
™s
.
Àn
);

837 --
«nswîs
;

839 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿ª•⁄£\n", 
pE¡ry
->
«me
));

841 
ª•⁄£îr
;

847 
memîr2
;

849 
ª•⁄£îr
:

851 i‡(
pE¡ry
->
found
) {

852 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

855 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

856 
pE¡ry
->
found
 = 
NULL
;

858 
memîr2
:

859 #i‡(
DNS_USES_STATIC_BUF
 == 2)

861 
	`mem_‰ì
(
dns_∑ylﬂd
);

864 
memîr1
:

866 
	`pbuf_‰ì
(
p
);

868 
	}
}

878 
îr_t


879 
	$dns_íqueue
(c⁄° *
«me
, 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
)

881 
u8_t
 
i
;

882 
u8_t
 
l£q
, 
l£qi
;

883 
dns_èbÀ_íåy
 *
pE¡ry
 = 
NULL
;

886 
l£q
 = 
l£qi
 = 0;

887 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

888 
pE¡ry
 = &
dns_èbÀ
[
i
];

890 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_UNUSED
)

894 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_DONE
) {

895 i‡((
dns_£qno
 - 
pE¡ry
->
£qno
Ë> 
l£q
) {

896 
l£q
 = 
dns_£qno
 - 
pE¡ry
->
£qno
;

897 
l£qi
 = 
i
;

903 i‡(
i
 =
DNS_TABLE_SIZE
) {

904 i‡((
l£qi
 >
DNS_TABLE_SIZE
Ë|| (
dns_èbÀ
[l£qi].
°©e
 !
DNS_STATE_DONE
)) {

906 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": DNSÉ¡rõ†èbÀ i†fuŒ\n", 
«me
));

907  
ERR_MEM
;

910 
i
 = 
l£qi
;

911 
pE¡ry
 = &
dns_èbÀ
[
i
];

916 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": u£ DNSÉ¡ry %"
U16_F
"\n", 
«me
, (
u16_t
)(
i
)));

919 
pE¡ry
->
°©e
 = 
DNS_STATE_NEW
;

920 
pE¡ry
->
£qno
 = 
dns_£qno
++;

921 
pE¡ry
->
found
 = found;

922 
pE¡ry
->
¨g
 = 
ˇŒback_¨g
;

923 
	`°r˝y
(
pE¡ry
->
«me
,Çame);

926 
	`dns_check_íåy
(
i
);

929  
ERR_INPROGRESS
;

930 
	}
}

950 
îr_t


951 
	$dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
, 
dns_found_ˇŒback
 
found
,

952 *
ˇŒback_¨g
)

956 i‡((
dns_pcb
 =
NULL
Ë|| (
addr
 == NULL) ||

957 (!
ho°«me
) || (!hostname[0]) ||

958 (
	`°æí
(
ho°«me
Ë>
DNS_MAX_NAME_LENGTH
)) {

959  
ERR_VAL
;

962 #i‡
LWIP_HAVE_LOOPIF


963 i‡(
	`°rcmp
(
ho°«me
,"localhost")==0) {

964 
addr
->add∏
INADDR_LOOPBACK
;

965  
ERR_OK
;

971 i‡(((
addr
->add∏
	`öë_addr
(
ho°«me
)Ë!
INADDR_NONE
) ||

972 ((
addr
->add∏
	`dns_lookup
(
ho°«me
)Ë!
INADDR_NONE
)) {

973  
ERR_OK
;

977  
	`dns_íqueue
(
ho°«me
, 
found
, 
ˇŒback_¨g
);

978 
	}
}

	@core/init.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öô.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/sockës.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝.h
"

53 
	~"lwù/¢mp_msg.h
"

54 
	~"lwù/autoù.h
"

55 
	~"lwù/igmp.h
"

56 
	~"lwù/dns.h
"

57 
	~"√tif/ëh¨p.h
"

62 #i‚de‡
BYTE_ORDER


65 #i‡(!
IP_SOF_BROADCAST
 && 
IP_SOF_BROADCAST_RECV
)

68 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

71 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

74 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

77 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

80 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

83 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

86 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

89 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

92 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

95 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

98 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

101 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

104 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

107 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

110 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

113 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

116 #i‡(
PPP_SUPPORT
 && (
NO_SYS
==1))

119 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

122 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

125 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

128 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

131 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

134 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

137 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

140 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

143 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

146 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

150 #i‡((
NO_SYS
==0Ë&& (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
)))

153 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

156 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

159 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

162 #i‡(
PBUF_POOL_BUFSIZE
 <
MEM_ALIGNMENT
)

165 #i‡(
TCP_QUEUE_OOSEQ
 && !
LWIP_TCP
)

168 #i‡(
DNS_LOCAL_HOSTLIST
 && !
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && !(
deföed
(
DNS_LOCAL_HOSTLIST_INIT
)))

175 #ifde‡
MEMP_NUM_TCPIP_MSG


178 #ifde‡
MEMP_NUM_API_MSG


181 #ifde‡
TCP_REXMIT_DEBUG


184 #ifde‡
RAW_STATS


187 #ifde‡
ETHARP_QUEUE_FIRST


190 #ifde‡
ETHARP_ALWAYS_INSERT


193 #i‡
SO_REUSE


199 #ifde‡
LWIP_DEBUG


201 
	$lwù_ßnôy_check
()

204 #i‡
LWIP_NETCONN


205 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

206 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

208 #i‡
LWIP_TCP


209 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

210 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

211 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

212 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

213 i‡(
TCP_SNDLOWAT
 > 
TCP_SND_BUF
)

214 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan orÉqualÅo TCP_SND_BUF.\n"));

215 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

216 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

217 i‡(
TCP_WND
 < 
TCP_MSS
)

218 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

220 
	}
}

222 
	#lwù_ßnôy_check
()

	)

229 
	$lwù_öô
()

232 
	`lwù_ßnôy_check
();

235 
	`°©s_öô
();

236 
	`sys_öô
();

237 
	`mem_öô
();

238 
	`memp_öô
();

239 
	`pbuf_öô
();

240 
	`√tif_öô
();

241 #i‡
LWIP_SOCKET


242 
	`lwù_sockë_öô
();

244 
	`ù_öô
();

245 #i‡
LWIP_ARP


246 
	`ëh¨p_öô
();

248 #i‡
LWIP_RAW


249 
	`øw_öô
();

251 #i‡
LWIP_UDP


252 
	`udp_öô
();

254 #i‡
LWIP_TCP


255 
	`t˝_öô
();

257 #i‡
LWIP_SNMP


258 
	`¢mp_öô
();

260 #i‡
LWIP_AUTOIP


261 
	`autoù_öô
();

263 #i‡
LWIP_IGMP


264 
	`igmp_öô
();

266 #i‡
LWIP_DNS


267 
	`dns_öô
();

269 
	}
}

	@core/ipv4/autoip.c

65 
	~"lwù/›t.h
"

67 #i‡
LWIP_AUTOIP


69 
	~"lwù/mem.h
"

70 
	~"lwù/udp.h
"

71 
	~"lwù/ù_addr.h
"

72 
	~"lwù/√tif.h
"

73 
	~"lwù/autoù.h
"

74 
	~"√tif/ëh¨p.h
"

76 
	~<°dlib.h
>

77 
	~<°rög.h
>

80 
	#AUTOIP_NET
 0xA9FE0000

	)

82 
	#AUTOIP_RANGE_START
 (
AUTOIP_NET
 | 0x0100)

	)

84 
	#AUTOIP_RANGE_END
 (
AUTOIP_NET
 | 0xFEFF)

	)

89 #i‚de‡
LWIP_AUTOIP_RAND


90 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

91 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

92 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

93 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

94 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

101 #i‚de‡
LWIP_AUTOIP_CREATE_SEED_ADDR


102 
	#LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
) \

103 (
AUTOIP_RANGE_START
 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) | \

104 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)))

	)

108 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

111 
autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr
 *
IPAddr
);

114 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

117 
îr_t
 
autoù_böd
(
√tif
 *netif);

123 
	$autoù_öô
()

125 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_init()\n"));

126 
	}
}

132 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

135 
de„nd
 = 1;

137 if(
de„nd
) {

138 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

142 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

146 
	`autoù_°¨t
(
√tif
);

148 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

150 
	`autoù_¨p_™noun˚
(
√tif
);

151 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

154 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

157 
	`autoù_°¨t
(
√tif
);

159 
	}
}

168 
	$autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr
 *
IPAddr
)

174 
u32_t
 
addr
 = 
	`¡ohl
(
	`LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
));

175 
addr
 +
√tif
->
autoù
->
åõd_Œùaddr
;

176 
addr
 = 
AUTOIP_NET
 | (addr & 0xffff);

179 i‡(
addr
 < 
AUTOIP_RANGE_START
) {

180 
addr
 +
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

182 i‡(
addr
 > 
AUTOIP_RANGE_END
) {

183 
addr
 -
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

185 
	`LWIP_ASSERT
("AUTOIPáddªs†nŸ i¿ønge", (
addr
 >
AUTOIP_RANGE_START
) &&

186 (
addr
 <
AUTOIP_RANGE_END
));

187 
IPAddr
->
addr
 = 
	`ht⁄l
(addr);

189 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

190 ("autoù_¸óã_addr():Årõd_Œùaddr=%"
U16_F
", 0x%08"
X32_F
"\n",

191 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), (
u32_t
)(
IPAddr
->
addr
)));

192 
	}
}

199 
îr_t


200 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

202  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

203 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

204 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

205 
	}
}

212 
îr_t


213 
	$autoù_böd
(
√tif
 *netif)

215 
autoù
 *autoù = 
√tif
->autoip;

216 
ù_addr
 
¢_mask
, 
gw_addr
;

218 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

219 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" 0x%08"
X32_F
"\n",

220 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
, 
autoù
->
Œùaddr
.
addr
));

222 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

223 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

225 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

226 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

227 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

230 
	`√tif_£t_up
(
√tif
);

232  
ERR_OK
;

233 
	}
}

240 
îr_t


241 
	$autoù_°¨t
(
√tif
 *netif)

243 
autoù
 *autoù = 
√tif
->autoip;

244 
îr_t
 
ªsu…
 = 
ERR_OK
;

246 if(
	`√tif_is_up
(
√tif
)) {

247 
	`√tif_£t_down
(
√tif
);

253 
√tif
->
ù_addr
.
addr
 = 0;

254 
√tif
->
√tmask
.
addr
 = 0;

255 
√tif
->
gw
.
addr
 = 0;

257 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

258 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

259 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

260 if(
autoù
 =
NULL
) {

262 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

264 
autoù
 = 
	`mem_mÆloc
((autoip));

265 if(
autoù
 =
NULL
) {

266 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

268  
ERR_MEM
;

270 
	`mem£t
–
autoù
, 0, (autoip));

272 
√tif
->
autoù
 =áutoip;

273 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

275 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

276 
autoù
->
âw
 = 0;

277 
autoù
->
£¡_num
 = 0;

278 
	`mem£t
(&
autoù
->
Œùaddr
, 0, (
ù_addr
));

279 
autoù
->
œ°c⁄Êi˘
 = 0;

282 
	`autoù_¸óã_addr
(
√tif
, &(
autoù
->
Œùaddr
));

283 
autoù
->
åõd_Œùaddr
++;

284 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

285 
autoù
->
£¡_num
 = 0;

291 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

299 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

300 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

303  
ªsu…
;

304 
	}
}

311 
îr_t


312 
	$autoù_°›
(
√tif
 *netif)

314 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

315 
	`√tif_£t_down
(
√tif
);

316  
ERR_OK
;

317 
	}
}

323 
	$autoù_tmr
()

325 
√tif
 *√ti‡
√tif_li°
;

327 
√tif
 !
NULL
) {

329 i‡(
√tif
->
autoù
 !
NULL
) {

330 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

331 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

334 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

335 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

336 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

338 
√tif
->
autoù
->
°©e
) {

339 
AUTOIP_STATE_PROBING
:

340 if(
√tif
->
autoù
->
âw
 > 0) {

341 
√tif
->
autoù
->
âw
--;

343 if(
√tif
->
autoù
->
£¡_num
 =
PROBE_NUM
) {

344 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

345 
√tif
->
autoù
->
£¡_num
 = 0;

346 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

348 
	`ëh¨p_ªque°
(
√tif
, &“ëif->
autoù
->
Œùaddr
));

349 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

351 
√tif
->
autoù
->
£¡_num
++;

353 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

354 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

355 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

360 
AUTOIP_STATE_ANNOUNCING
:

361 if(
√tif
->
autoù
->
âw
 > 0) {

362 
√tif
->
autoù
->
âw
--;

364 if(
√tif
->
autoù
->
£¡_num
 == 0) {

368 
	`autoù_böd
(
√tif
);

371 if(
√tif
->
autoù
->
£¡_num
 =
ANNOUNCE_NUM
) {

372 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

373 
√tif
->
autoù
->
£¡_num
 = 0;

374 
√tif
->
autoù
->
âw
 = 0;

376 
	`autoù_¨p_™noun˚
(
√tif
);

377 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

379 
√tif
->
autoù
->
£¡_num
++;

380 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

387 
√tif
 =Çëif->
√xt
;

389 
	}
}

398 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

400 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_arp_reply()\n"));

401 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

407 
ù_addr
 
sùaddr
, 
dùaddr
;

408 
ëh_addr
 
√tiÁddr
;

409 
√tiÁddr
.
addr
[0] = 
√tif
->
hwaddr
[0];

410 
√tiÁddr
.
addr
[1] = 
√tif
->
hwaddr
[1];

411 
√tiÁddr
.
addr
[2] = 
√tif
->
hwaddr
[2];

412 
√tiÁddr
.
addr
[3] = 
√tif
->
hwaddr
[3];

413 
√tiÁddr
.
addr
[4] = 
√tif
->
hwaddr
[4];

414 
√tiÁddr
.
addr
[5] = 
√tif
->
hwaddr
[5];

419 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

420 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

422 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

423 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

424 (
√tif
->
autoù
->
£¡_num
 == 0))) {

431 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

432 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

433 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

434 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

436 
	`autoù_°¨t
(
√tif
);

443 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

444 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

445 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

447 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

451 
	}
}

	@core/ipv4/icmp.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_ICMP


46 
	~"lwù/icmp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/öë_chksum.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

54 
	~<°rög.h
>

59 #i‚de‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


60 
	#LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
 1

	)

64 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

66 
icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
);

78 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
u8_t
 
ty≥
;

81 #ifde‡
LWIP_DEBUG


82 
u8_t
 
code
;

84 
icmp_echo_hdr
 *
õcho
;

85 
ù_hdr
 *
ùhdr
;

86 
ù_addr
 
tm∑ddr
;

87 
s16_t
 
hÀn
;

89 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

90 
	`¢mp_öc_icmpömsgs
();

93 
ùhdr
 = 
p
->
∑ylﬂd
;

94 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

95 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

96 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

97 
À√º
;

100 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

101 #ifde‡
LWIP_DEBUG


102 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

104 
ty≥
) {

105 
ICMP_ECHO
:

106 #i‡!
LWIP_MULTICAST_PING
 || !
LWIP_BROADCAST_PING


108 
ac˚±ed
 = 1;

109 #i‡!
LWIP_MULTICAST_PING


111 i‡(
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

112 
ac˚±ed
 = 0;

115 #i‡!
LWIP_BROADCAST_PING


117 i‡(
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
)) {

118 
ac˚±ed
 = 0;

122 i‡(!
ac˚±ed
) {

123 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

124 
	`ICMP_STATS_INC
(
icmp
.
îr
);

125 
	`pbuf_‰ì
(
p
);

130 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

131 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

132 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

133 
À√º
;

135 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

136 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

137 
	`pbuf_‰ì
(
p
);

138 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

139 
	`¢mp_öc_icmpöîr‹s
();

142 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


143 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

147 
pbuf
 *
r
;

149 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

150 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

151 
memîr
;

154 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

155 i‡(
r
 =
NULL
) {

156 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

157 
memîr
;

159 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

160 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

162 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

163 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

164 
memîr
;

166 
ùhdr
 = 
r
->
∑ylﬂd
;

168 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

169 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

170 
memîr
;

173 
	`pbuf_‰ì
(
p
);

175 
p
 = 
r
;

178 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

179 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

180 
memîr
;

187 
õcho
 = 
p
->
∑ylﬂd
;

188 
tm∑ddr
.
addr
 = 
ùhdr
->
§c
.addr;

189 
ùhdr
->
§c
.
addr
 = iphdr->
de°
.addr;

190 
ùhdr
->
de°
.
addr
 = 
tm∑ddr
.addr;

191 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

193 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP_ECHO
 << 8))) {

194 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8) + 1;

196 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8);

200 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

201 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

202 #i‡
CHECKSUM_GEN_IP


203 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

206 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

208 
	`¢mp_öc_icmpoutmsgs
();

210 
	`¢mp_öc_icmpouãch‹ïs
();

212 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

213 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

215 
îr_t
 
ªt
;

216 
ªt
 = 
	`ù_ouçut_if
(
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

217 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

218 i‡(
ªt
 !
ERR_OK
) {

219 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

224 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

225 (
s16_t
)
ty≥
, (s16_t)
code
));

226 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

227 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

229 
	`pbuf_‰ì
(
p
);

231 
À√º
:

232 
	`pbuf_‰ì
(
p
);

233 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

234 
	`¢mp_öc_icmpöîr‹s
();

236 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


237 
memîr
:

238 
	`pbuf_‰ì
(
p
);

239 
	`ICMP_STATS_INC
(
icmp
.
îr
);

240 
	`¢mp_öc_icmpöîr‹s
();

243 
	}
}

255 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

257 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_DUR
, 
t
);

258 
	}
}

260 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


269 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

271 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_TE
, 
t
);

272 
	}
}

285 
	$icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
)

287 
pbuf
 *
q
;

288 
ù_hdr
 *
ùhdr
;

290 
icmp_echo_hdr
 *
icmphdr
;

293 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

294 
PBUF_RAM
);

295 i‡(
q
 =
NULL
) {

296 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

299 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

300 (
q
->
Àn
 >((
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

302 
ùhdr
 = 
p
->
∑ylﬂd
;

303 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

304 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

305 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

306 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

307 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

309 
icmphdr
 = 
q
->
∑ylﬂd
;

310 
icmphdr
->
ty≥
 =Åype;

311 
icmphdr
->
code
 = code;

312 
icmphdr
->
id
 = 0;

313 
icmphdr
->
£qno
 = 0;

316 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_echo_hdr
), (u8_à*)
p
->payload,

317 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

320 
icmphdr
->
chksum
 = 0;

321 
icmphdr
->
chksum
 = 
	`öë_chksum
(icmphdr, 
q
->
Àn
);

322 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

324 
	`¢mp_öc_icmpoutmsgs
();

326 
	`¢mp_öc_icmpouâimìxcds
();

327 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

328 
	`pbuf_‰ì
(
q
);

329 
	}
}

	@core/ipv4/igmp.c

80 
	~"lwù/›t.h
"

82 #i‡
LWIP_IGMP


84 
	~"lwù/igmp.h
"

85 
	~"lwù/debug.h
"

86 
	~"lwù/def.h
"

87 
	~"lwù/mem.h
"

88 
	~"lwù/ù.h
"

89 
	~"lwù/öë.h
"

90 
	~"lwù/öë_chksum.h
"

91 
	~"lwù/√tif.h
"

92 
	~"lwù/icmp.h
"

93 
	~"lwù/udp.h
"

94 
	~"lwù/t˝.h
"

95 
	~"lwù/°©s.h
"

97 
	~"°rög.h
"

103 
igmp_group
* 
	gigmp_group_li°
;

104 
ù_addr
 
	gÆlsy°ems
;

105 
ù_addr
 
	gÆÃouãrs
;

111 
	$igmp_öô
()

113 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

115 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

116 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

117 
	}
}

119 #ifde‡
LWIP_DEBUG


124 
	$igmp_dump_group_li°
()

126 
igmp_group
 *
group
 = 
igmp_group_li°
;

128 
group
 !
NULL
) {

129 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

130 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

131 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
öãrÁ˚
));

132 
group
 = group->
√xt
;

134 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

135 
	}
}

137 
	#igmp_dump_group_li°
()

	)

145 
îr_t


146 
	$igmp_°¨t
(
√tif
 *netif)

148 
igmp_group
* 
group
;

150 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%p\n", 
√tif
));

152 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

154 i‡(
group
 !
NULL
) {

155 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

156 
group
->
u£
++;

159 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

160 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

161 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

162 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

163 
√tif
->
	`igmp_mac_fûãr
–√tif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

166  
ERR_OK
;

169  
ERR_MEM
;

170 
	}
}

177 
îr_t


178 
	$igmp_°›
(
√tif
 *netif)

180 
igmp_group
 *
group
 = 
igmp_group_li°
;

181 
igmp_group
 *
¥ev
 = 
NULL
;

182 
igmp_group
 *
√xt
;

185 
group
 !
NULL
) {

186 
√xt
 = 
group
->next;

188 i‡(
group
->
öãrÁ˚
 =
√tif
) {

190 i‡(
group
 =
igmp_group_li°
) {

191 
igmp_group_li°
 = 
√xt
;

194 i‡(
¥ev
 !
NULL
) {

195 
¥ev
->
√xt
 =Çext;

198 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

199 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

200 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

201 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

202 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

205 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

208 
¥ev
 = 
group
;

211 
group
 = 
√xt
;

213  
ERR_OK
;

214 
	}
}

222 
	$igmp_ªp‹t_groups
–
√tif
 *netif)

224 
igmp_group
 *
group
 = 
igmp_group_li°
;

226 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%p\n", 
√tif
));

228 
group
 !
NULL
) {

229 i‡(
group
->
öãrÁ˚
 =
√tif
) {

230 
	`igmp_dñayög_membî
–
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

232 
group
 = group->
√xt
;

234 
	}
}

244 
igmp_group
 *

245 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

247 
igmp_group
 *
group
 = 
igmp_group_li°
;

249 
group
 !
NULL
) {

250 i‡((
group
->
öãrÁ˚
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

251  
group
;

253 
group
 = group->
√xt
;

259  
NULL
;

260 
	}
}

270 
igmp_group
 *

271 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

273 
igmp_group
 *
group
 = 
igmp_group_li°
;

276 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

277 i‡(
group
 !
NULL
) {

279  
group
;

283 
group
 = 
	`memp_mÆloc
(
MEMP_IGMP_GROUP
);

284 i‡(
group
 !
NULL
) {

285 
group
->
öãrÁ˚
 = 
iÂ
;

286 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

287 
group
->
timî
 = 0;

288 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

289 
group
->
œ°_ªp‹ãr_Êag
 = 0;

290 
group
->
u£
 = 0;

291 
group
->
√xt
 = 
igmp_group_li°
;

293 
igmp_group_li°
 = 
group
;

296 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

297 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

298 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
iÂ
));

300  
group
;

301 
	}
}

309 
îr_t


310 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

312 
îr_t
 
îr
 = 
ERR_OK
;

315 i‡(
igmp_group_li°
 =
group
) {

316 
igmp_group_li°
 = 
group
->
√xt
;

319 
igmp_group
 *
tmpGroup
;

320 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

321 i‡(
tmpGroup
->
√xt
 =
group
) {

322 
tmpGroup
->
√xt
 = 
group
->next;

327 i‡(
tmpGroup
 =
NULL
)

328 
îr
 = 
ERR_ARG
;

331 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

333  
îr
;

334 
	}
}

344 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
)

346 
ù_hdr
 * 
ùhdr
;

347 
igmp_msg
* 
igmp
;

348 
igmp_group
* 
group
;

349 
igmp_group
* 
grou¥ef
;

352 
ùhdr
 = 
p
->
∑ylﬂd
;

353 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

354 
	`pbuf_‰ì
(
p
);

355 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

356 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

360 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

361 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

362 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

363 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

364 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
öp
));

367 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

368 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

369 
	`pbuf_‰ì
(
p
);

370 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

371 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

376 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

379 i‡(!
group
) {

380 
	`pbuf_‰ì
(
p
);

381 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

386 
igmp
->
igmp_msgty≥
) {

387 
IGMP_MEMB_QUERY
: {

389 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& (
igmp
->
igmp_group_addªss
.
addr
 == 0)) {

391 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

393 i‡(
igmp
->
igmp_maxª•
 == 0) {

394 
	`IGMP_STATS_INC
(
igmp
.
v1_rxed
);

395 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

396 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

399 
	`IGMP_STATS_INC
(
igmp
.
group_quîy_rxed
);

400 
grou¥ef
 = 
igmp_group_li°
;

401 
grou¥ef
) {

403 i‡((
grou¥ef
->
öãrÁ˚
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

404 
	`igmp_dñayög_membî
–
grou¥ef
, 
igmp
->
igmp_maxª•
);

406 
grou¥ef
 = grou¥ef->
√xt
;

410 i‡(
group
->
group_addªss
.
addr
 != 0) {

411 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

412 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

413 i‡(
	`ù_addr_cmp
 (
de°
, &
Ælsy°ems
)) {

414 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

416 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
igmp
->
igmp_group_addªss
);

418 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

421 i‡(
group
 !
NULL
) {

422 
	`IGMP_STATS_INC
(
igmp
.
uniˇ°_quîy
);

423 
	`igmp_dñayög_membî
–
group
, 
igmp
->
igmp_maxª•
);

429 
IGMP_V2_MEMB_REPORT
: {

430 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

432 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_rxed
);

433 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

435 
group
->
timî
 = 0;

436 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

437 
group
->
œ°_ªp‹ãr_Êag
 = 0;

442 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",

443 
igmp
->
igmp_msgty≥
, 
group
->
group_°©e
, &group, group->
öãrÁ˚
));

448 
	`pbuf_‰ì
(
p
);

450 
	}
}

459 
îr_t


460 
	$igmp_joögroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

462 
îr_t
 
îr
 = 
ERR_VAL
;

463 
igmp_group
 *
group
;

464 
√tif
 *netif;

467 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

468 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

471 
√tif
 = 
√tif_li°
;

472 
√tif
 !
NULL
) {

474 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

476 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

478 i‡(
group
 !
NULL
) {

480 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

481 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

484 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

485 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

486 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

489 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

490 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

491 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

492 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

493 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

496 
	`IGMP_STATS_INC
(
igmp
.
joö_£¡
);

497 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

499 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

502 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

505 
group
->
u£
++;

507 
îr
 = 
ERR_OK
;

511 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

512  
ERR_MEM
;

516 
√tif
 =Çëif->
√xt
;

519  
îr
;

520 
	}
}

529 
îr_t


530 
	$igmp_Àavegroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

532 
îr_t
 
îr
 = 
ERR_VAL
;

533 
igmp_group
 *
group
;

534 
√tif
 *netif;

537 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

538 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

541 
√tif
 = 
√tif_li°
;

542 
√tif
 !
NULL
) {

544 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

546 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

548 i‡(
group
 !
NULL
) {

550 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

551 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

552 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

555 i‡(
group
->
u£
 <= 1) {

557 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

558 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

559 
	`IGMP_STATS_INC
(
igmp
.
Àave_£¡
);

560 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

564 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

565 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

566 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

567 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

568 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

571 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

572 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

573 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

576 
	`igmp_ªmove_group
(
group
);

579 
group
->
u£
--;

582 
îr
 = 
ERR_OK
;

585 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

589 
√tif
 =Çëif->
√xt
;

592  
îr
;

593 
	}
}

600 
	$igmp_tmr
()

602 
igmp_group
 *
group
 = 
igmp_group_li°
;

604 
group
 !
NULL
) {

605 i‡(
group
->
timî
 != 0) {

606 
group
->
timî
 -= 1;

607 i‡(
group
->
timî
 == 0) {

608 
	`igmp_timeout
(
group
);

611 
group
 = group->
√xt
;

613 
	}
}

622 
	$igmp_timeout
(
igmp_group
 *
group
)

625 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

626 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

627 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

628 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
öãrÁ˚
));

630 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

632 
	}
}

642 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

647 
group
->
timî
 = 
max_time
;

648 
	}
}

656 
	$igmp_°›_timî
(
igmp_group
 *
group
)

658 
group
->
timî
 = 0;

659 
	}
}

668 
	$igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
)

670 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
) ||

671 ((
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
Ë&& (
maxª•
 > group->
timî
))) {

672 
	`igmp_°¨t_timî
(
group
, (
maxª•
)/2);

673 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

675 
	}
}

696 
îr_t


697 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

698 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif)

701 
u16_t
 
ø
[2];

702 
ø
[0] = 
	`ht⁄s
 (
ROUTER_ALERT
);

703 
ø
[1] = 0x0000;

704  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 0, 
¥Ÿo
, 
√tif
, 
ø
, 
ROUTER_ALERTLEN
);

705 
	}
}

714 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

716 
pbuf
* 
p
 = 
NULL
;

717 
igmp_msg
* 
igmp
 = 
NULL
;

718 
ù_addr
 
§c
 = {0};

719 
ù_addr
* 
de°
 = 
NULL
;

722 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
);

724 i‡(
p
) {

725 
igmp
 = 
p
->
∑ylﬂd
;

726 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

727 (
p
->
Àn
 >(
igmp_msg
)));

728 
	`ù_addr_£t
(&
§c
, &((
group
->
öãrÁ˚
)->
ù_addr
));

730 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

731 
de°
 = &(
group
->
group_addªss
);

732 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_£¡
);

733 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

734 
group
->
œ°_ªp‹ãr_Êag
 = 1;

736 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

737 
de°
 = &
ÆÃouãrs
;

738 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

742 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

743 
igmp
->
igmp_msgty≥
 = 
ty≥
;

744 
igmp
->
igmp_maxª•
 = 0;

745 
igmp
->
igmp_checksum
 = 0;

746 
igmp
->
igmp_checksum
 = 
	`öë_chksum
–igmp, 
IGMP_MINLEN
);

748 
	`igmp_ù_ouçut_if
(
p
, &
§c
, 
de°
, 
IGMP_TTL
, 
IP_PROTO_IGMP
, 
group
->
öãrÁ˚
);

751 
	`pbuf_‰ì
(
p
);

753 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

755 
	}
}

	@core/ipv4/inet.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë.h
"

44 #i‚de‡
i•röt


45 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

46 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

47 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

48 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

49 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

50 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

60 
u32_t


61 
	$öë_addr
(c⁄° *
˝
)

63 
ö_addr
 
vÆ
;

65 i‡(
	`öë_©⁄
(
˝
, &
vÆ
)) {

66  (
vÆ
.
s_addr
);

68  (
INADDR_NONE
);

69 
	}
}

83 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
)

85 
u32_t
 
vÆ
;

86 
u8_t
 
ba£
;

87 
c
;

88 
u32_t
 
∑πs
[4];

89 
u32_t
 *
µ
 = 
∑πs
;

91 
c
 = *
˝
;

98 i‡(!
	`isdigô
(
c
))

100 
vÆ
 = 0;

101 
ba£
 = 10;

102 i‡(
c
 == '0') {

103 
c
 = *++
˝
;

104 i‡(
c
 == 'x' || c == 'X') {

105 
ba£
 = 16;

106 
c
 = *++
˝
;

108 
ba£
 = 8;

111 i‡(
	`isdigô
(
c
)) {

112 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

113 
c
 = *++
˝
;

114 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

115 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

116 
c
 = *++
˝
;

120 i‡(
c
 == '.') {

127 i‡(
µ
 >
∑πs
 + 3)

129 *
µ
++ = 
vÆ
;

130 
c
 = *++
˝
;

137 i‡(
c
 !'\0' && !
	`is•a˚
(c))

143 
µ
 - 
∑πs
 + 1) {

152 i‡(
vÆ
 > 0xffffffUL)

154 
vÆ
 |
∑πs
[0] << 24;

158 i‡(
vÆ
 > 0xffff)

160 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

164 i‡(
vÆ
 > 0xff)

166 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

169 i‡(
addr
)

170 
addr
->
s_addr
 = 
	`ht⁄l
(
vÆ
);

172 
	}
}

183 
	$öë_¡ﬂ
(
ö_addr
 
addr
)

185 
°r
[16];

186 
u32_t
 
s_addr
 = 
addr
.s_addr;

187 
öv
[3];

188 *
Ω
;

189 
u8_t
 *
≠
;

190 
u8_t
 
ªm
;

191 
u8_t
 
n
;

192 
u8_t
 
i
;

194 
Ω
 = 
°r
;

195 
≠
 = (
u8_t
 *)&
s_addr
;

196 
n
 = 0;Ç < 4;Ç++) {

197 
i
 = 0;

199 
ªm
 = *
≠
 % (
u8_t
)10;

200 *
≠
 /(
u8_t
)10;

201 
öv
[
i
++] = '0' + 
ªm
;

202 } *
≠
);

203 
i
--)

204 *
Ω
++ = 
öv
[
i
];

205 *
Ω
++ = '.';

206 
≠
++;

208 *--
Ω
 = 0;

209  
°r
;

210 
	}
}

225 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

233 
u16_t


234 
	$ht⁄s
(
u16_t
 
n
)

236  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

237 
	}
}

245 
u16_t


246 
	$¡ohs
(
u16_t
 
n
)

248  
	`ht⁄s
(
n
);

249 
	}
}

257 
u32_t


258 
	$ht⁄l
(
u32_t
 
n
)

260  ((
n
 & 0xff) << 24) |

261 ((
n
 & 0xff00) << 8) |

262 ((
n
 & 0xff0000UL) >> 8) |

263 ((
n
 & 0xff000000UL) >> 24);

264 
	}
}

272 
u32_t


273 
	$¡ohl
(
u32_t
 
n
)

275  
	`ht⁄l
(
n
);

276 
	}
}

	@core/ipv4/inet_chksum.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë_chksum.h
"

42 
	~"lwù/öë.h
"

44 
	~<°ddef.h
>

57 #i‚de‡
LWIP_CHKSUM


58 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

59 #i‚de‡
LWIP_CHKSUM_ALGORITHM


60 
	#LWIP_CHKSUM_ALGORITHM
 1

	)

64 #i‚de‡
LWIP_CHKSUM_ALGORITHM


65 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

69 #i‡
LWIP_PLATFORM_BYTESWAP
 && (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

71 
	#SWAP_BYTES_IN_WORD
(
w
Ë
	`LWIP_PLATFORM_HTONS
(w)

	)

74 
	#SWAP_BYTES_IN_WORD
(
w
Ë((w & 0xffË<< 8Ë| ((w & 0xff00Ë>> 8)

	)

78 
	#FOLD_U32T
(
u
Ë((u >> 16Ë+ (u & 0x0000ffffUL))

	)

80 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

91 
u16_t


92 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

94 
u32_t
 
acc
;

95 
u16_t
 
§c
;

96 
u8_t
 *
o˘ë±r
;

98 
acc
 = 0;

100 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

101 
Àn
 > 1) {

104 
§c
 = (*
o˘ë±r
) << 8;

105 
o˘ë±r
++;

107 
§c
 |(*
o˘ë±r
);

108 
o˘ë±r
++;

109 
acc
 +
§c
;

110 
Àn
 -= 2;

112 i‡(
Àn
 > 0) {

114 
§c
 = (*
o˘ë±r
) << 8;

115 
acc
 +
§c
;

118 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

119 i‡((
acc
 & 0xffff0000UL) != 0) {

120 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

125  
	`ht⁄s
((
u16_t
)
acc
);

126 
	}
}

129 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

145 
u16_t


146 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

148 
u8_t
 *
pb
 = 
d©≠å
;

149 
u16_t
 *
ps
, 
t
 = 0;

150 
u32_t
 
sum
 = 0;

151 
odd
 = ((
u32_t
)
pb
 & 1);

154 i‡(
odd
 && 
Àn
 > 0) {

155 ((
u8_t
 *)&
t
)[1] = *
pb
++;

156 
Àn
--;

160 
ps
 = (
u16_t
 *)
pb
;

161 
Àn
 > 1) {

162 
sum
 +*
ps
++;

163 
Àn
 -= 2;

167 i‡(
Àn
 > 0) {

168 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;;

172 
sum
 +
t
;

176 
sum
 = 
	`FOLD_U32T
(sum);

177 
sum
 = 
	`FOLD_U32T
(sum);

180 i‡(
odd
) {

181 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

184  
sum
;

185 
	}
}

188 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

201 
u16_t


202 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

204 
u8_t
 *
pb
 = 
d©≠å
;

205 
u16_t
 *
ps
, 
t
 = 0;

206 
u32_t
 *
∂
;

207 
u32_t
 
sum
 = 0, 
tmp
;

209 
odd
 = ((
u32_t
)
pb
 & 1);

211 i‡(
odd
 && 
Àn
 > 0) {

212 ((
u8_t
 *)&
t
)[1] = *
pb
++;

213 
Àn
--;

216 
ps
 = (
u16_t
 *)
pb
;

218 i‡(((
u32_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

219 
sum
 +*
ps
++;

220 
Àn
 -= 2;

223 
∂
 = (
u32_t
 *)
ps
;

225 
Àn
 > 7) {

226 
tmp
 = 
sum
 + *
∂
++;

227 i‡(
tmp
 < 
sum
) {

228 
tmp
++;

231 
sum
 = 
tmp
 + *
∂
++;

232 i‡(
sum
 < 
tmp
) {

233 
sum
++;

236 
Àn
 -= 8;

240 
sum
 = 
	`FOLD_U32T
(sum);

242 
ps
 = (
u16_t
 *)
∂
;

245 
Àn
 > 1) {

246 
sum
 +*
ps
++;

247 
Àn
 -= 2;

251 i‡(
Àn
 > 0) {

252 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

255 
sum
 +
t
;

259 
sum
 = 
	`FOLD_U32T
(sum);

260 
sum
 = 
	`FOLD_U32T
(sum);

262 i‡(
odd
) {

263 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

266  
sum
;

267 
	}
}

282 
u16_t


283 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

284 
ù_addr
 *
§c
, ù_add∏*
de°
,

285 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

287 
u32_t
 
acc
;

288 
pbuf
 *
q
;

289 
u8_t
 
sw≠≥d
;

291 
acc
 = 0;

292 
sw≠≥d
 = 0;

294 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

295 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

296 (*)
q
, (*)q->
√xt
));

297 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

301 
acc
 = 
	`FOLD_U32T
(acc);

302 i‡(
q
->
Àn
 % 2 != 0) {

303 
sw≠≥d
 = 1 - swapped;

304 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

309 i‡(
sw≠≥d
) {

310 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

312 
acc
 +(
§c
->
addr
 & 0xffffUL);

313 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

314 
acc
 +(
de°
->
addr
 & 0xffffUL);

315 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

316 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

317 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

321 
acc
 = 
	`FOLD_U32T
(acc);

322 
acc
 = 
	`FOLD_U32T
(acc);

323 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

324  (
u16_t
)~(
acc
 & 0xffffUL);

325 
	}
}

340 #i‡
LWIP_UDPLITE


341 
u16_t


342 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

343 
ù_addr
 *
§c
, ù_add∏*
de°
,

344 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

346 
u32_t
 
acc
;

347 
pbuf
 *
q
;

348 
u8_t
 
sw≠≥d
;

349 
u16_t
 
chkÀn
;

351 
acc
 = 0;

352 
sw≠≥d
 = 0;

354 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

355 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

356 (*)
q
, (*)q->
√xt
));

357 
chkÀn
 = 
q
->
Àn
;

358 i‡(
chkÀn
 > 
chksum_Àn
) {

359 
chkÀn
 = 
chksum_Àn
;

361 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

362 
chksum_Àn
 -
chkÀn
;

363 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

366 
acc
 = 
	`FOLD_U32T
(acc);

367 i‡(
q
->
Àn
 % 2 != 0) {

368 
sw≠≥d
 = 1 - swapped;

369 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

374 i‡(
sw≠≥d
) {

375 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

377 
acc
 +(
§c
->
addr
 & 0xffffUL);

378 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

379 
acc
 +(
de°
->
addr
 & 0xffffUL);

380 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

381 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

382 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

386 
acc
 = 
	`FOLD_U32T
(acc);

387 
acc
 = 
	`FOLD_U32T
(acc);

388 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

389  (
u16_t
)~(
acc
 & 0xffffUL);

390 
	}
}

403 
u16_t


404 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

406  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

407 
	}
}

416 
u16_t


417 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

419 
u32_t
 
acc
;

420 
pbuf
 *
q
;

421 
u8_t
 
sw≠≥d
;

423 
acc
 = 0;

424 
sw≠≥d
 = 0;

425 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

426 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

427 
acc
 = 
	`FOLD_U32T
(acc);

428 i‡(
q
->
Àn
 % 2 != 0) {

429 
sw≠≥d
 = 1 - swapped;

430 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

434 i‡(
sw≠≥d
) {

435 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

437  (
u16_t
)~(
acc
 & 0xffffUL);

438 
	}
}

	@core/ipv4/ip.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/öë.h
"

47 
	~"lwù/öë_chksum.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/°©s.h
"

57 
	~"¨ch/≥rf.h
"

63 
√tif
 *
	gcuºít_√tif
;

68 c⁄° 
ù_hdr
 *
	gcuºít_hódî
;

78 
√tif
 *

79 
	$ù_cuºít_√tif
()

81  
cuºít_√tif
;

82 
	}
}

92 c⁄° 
ù_hdr
 *

93 
	$ù_cuºít_hódî
()

95  
cuºít_hódî
;

96 
	}
}

107 
√tif
 *

108 
	$ù_rouã
(
ù_addr
 *
de°
)

110 
√tif
 *netif;

113 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

115 i‡(
	`√tif_is_up
(
√tif
)) {

116 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

118  
√tif
;

122 i‡((
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(netif_default))) {

123 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ù_rouã: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

124 
	`IP_STATS_INC
(
ù
.
πîr
);

125 
	`¢mp_öc_ùouä‹ouãs
();

126  
NULL
;

129  
√tif_deÁu…
;

130 
	}
}

132 #i‡
IP_FORWARD


143 
√tif
 *

144 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

146 
√tif
 *netif;

148 
PERF_START
;

150 
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
));

151 i‡(
√tif
 =
NULL
) {

152 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ 0x%"
X32_F
" found\n",

153 
ùhdr
->
de°
.
addr
));

154 
	`¢mp_öc_ùouä‹ouãs
();

155  (
√tif
 *)
NULL
;

159 i‡(
√tif
 =
öp
) {

160 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

161 
	`¢mp_öc_ùouä‹ouãs
();

162  (
√tif
 *)
NULL
;

166 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

168 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

169 
	`¢mp_öc_ùöhdªº‹s
();

170 #i‡
LWIP_ICMP


172 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

173 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

176  (
√tif
 *)
NULL
;

180 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`ht⁄s
(0xffff - 0x100)) {

181 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100) + 1);

183 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100));

186 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ0x%"
X32_F
"\n",

187 
ùhdr
->
de°
.
addr
));

189 
	`IP_STATS_INC
(
ù
.
fw
);

190 
	`IP_STATS_INC
(
ù
.
xmô
);

191 
	`¢mp_öc_ùf‹wd©agøms
();

193 
	`PERF_STOP
("ip_forward");

195 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

196  
√tif
;

197 
	}
}

214 
îr_t


215 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

217 
ù_hdr
 *
ùhdr
;

218 
√tif
 *netif;

219 
u16_t
 
ùhdr_hÀn
;

220 
u16_t
 
ùhdr_Àn
;

221 #i‡
LWIP_DHCP


222 
check_ù_§c
=1;

225 
	`IP_STATS_INC
(
ù
.
ªcv
);

226 
	`¢mp_öc_ùöª˚ives
();

229 
ùhdr
 = 
p
->
∑ylﬂd
;

230 i‡(
	`IPH_V
(
ùhdr
) != 4) {

231 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 1, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

232 
	`ù_debug_¥öt
(
p
);

233 
	`pbuf_‰ì
(
p
);

234 
	`IP_STATS_INC
(
ù
.
îr
);

235 
	`IP_STATS_INC
(
ù
.
dr›
);

236 
	`¢mp_öc_ùöhdªº‹s
();

237  
ERR_OK
;

241 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

243 
ùhdr_hÀn
 *= 4;

245 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

248 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

249 i‡(
ùhdr_hÀn
 > 
p
->
Àn
)

250 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

251 
ùhdr_hÀn
, 
p
->
Àn
));

252 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
)

253 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), "

255 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

257 
	`pbuf_‰ì
(
p
);

258 
	`IP_STATS_INC
(
ù
.
À√º
);

259 
	`IP_STATS_INC
(
ù
.
dr›
);

260 
	`¢mp_öc_ùödisˇrds
();

261  
ERR_OK
;

265 #i‡
CHECKSUM_CHECK_IP


266 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

268 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

269 
	`ù_debug_¥öt
(
p
);

270 
	`pbuf_‰ì
(
p
);

271 
	`IP_STATS_INC
(
ù
.
chkîr
);

272 
	`IP_STATS_INC
(
ù
.
dr›
);

273 
	`¢mp_öc_ùöhdªº‹s
();

274  
ERR_OK
;

280 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

283 #i‡
LWIP_IGMP


284 i‡(
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

285 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &(
ùhdr
->
de°
)))) {

286 
√tif
 = 
öp
;

288 
√tif
 = 
NULL
;

296 
fú°
 = 1;

297 
√tif
 = 
öp
;

299 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

300 
ùhdr
->
de°
.
addr
, 
√tif
->
ù_addr
.addr,

301 
ùhdr
->
de°
.
addr
 & 
√tif
->
√tmask
.addr,

302 
√tif
->
ù_addr
.
addr
 &Çëif->
√tmask
.addr,

303 
ùhdr
->
de°
.
addr
 & ~(
√tif
->
√tmask
.addr)));

306 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

308 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
)) ||

310 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
√tif
)) {

311 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

312 
√tif
->
«me
[0],Çetif->name[1]));

317 i‡(
fú°
) {

318 
fú°
 = 0;

319 
√tif
 = 
√tif_li°
;

321 
√tif
 =Çëif->
√xt
;

323 i‡(
√tif
 =
öp
) {

324 
√tif
 =Çëif->
√xt
;

326 } 
√tif
 !
NULL
);

329 #i‡
LWIP_DHCP


334 i‡(
√tif
 =
NULL
) {

336 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

337 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

338 
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
)));

339 i‡(
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
Ë=
DHCP_CLIENT_PORT
) {

340 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input: DHCPÖacketáccepted.\n"));

341 
√tif
 = 
öp
;

342 
check_ù_§c
 = 0;

349 #i‡
LWIP_DHCP


350 i‡(
check_ù_§c
)

352 { i‡((
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
§c
), 
öp
)) ||

353 (
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
§c
)))) {

355 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:Öacket source isÇot valid.\n"));

357 
	`pbuf_‰ì
(
p
);

358 
	`IP_STATS_INC
(
ù
.
dr›
);

359 
	`¢mp_öc_ùöaddªº‹s
();

360 
	`¢mp_öc_ùödisˇrds
();

361  
ERR_OK
;

366 i‡(
√tif
 =
NULL
) {

368 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:ÖacketÇot for us.\n"));

369 #i‡
IP_FORWARD


371 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
)) {

373 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

377 
	`¢mp_öc_ùöaddªº‹s
();

378 
	`¢mp_öc_ùödisˇrds
();

380 
	`pbuf_‰ì
(
p
);

381  
ERR_OK
;

384 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`ht⁄s
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

385 #i‡
IP_REASSEMBLY


386 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

387 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`ht⁄s
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

389 
p
 = 
	`ù_ªass
(p);

391 i‡(
p
 =
NULL
) {

392  
ERR_OK
;

394 
ùhdr
 = 
p
->
∑ylﬂd
;

396 
	`pbuf_‰ì
(
p
);

397 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

398 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

399 
	`IP_STATS_INC
(
ù
.
›ãº
);

400 
	`IP_STATS_INC
(
ù
.
dr›
);

402 
	`¢mp_öc_ùöunknow≈rŸos
();

403  
ERR_OK
;

407 #i‡
IP_OPTIONS_ALLOWED
 == 0

409 #i‡
LWIP_IGMP


411 if((
ùhdr_hÀn
 > 
IP_HLEN
 && (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

413 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

415 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

416 
	`pbuf_‰ì
(
p
);

417 
	`IP_STATS_INC
(
ù
.
›ãº
);

418 
	`IP_STATS_INC
(
ù
.
dr›
);

420 
	`¢mp_öc_ùöunknow≈rŸos
();

421  
ERR_OK
;

426 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

427 
	`ù_debug_¥öt
(
p
);

428 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

430 
cuºít_√tif
 = 
öp
;

431 
cuºít_hódî
 = 
ùhdr
;

433 #i‡
LWIP_RAW


435 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

439 
	`IPH_PROTO
(
ùhdr
)) {

440 #i‡
LWIP_UDP


441 
IP_PROTO_UDP
:

442 #i‡
LWIP_UDPLITE


443 
IP_PROTO_UDPLITE
:

445 
	`¢mp_öc_ùödñivîs
();

446 
	`udp_öput
(
p
, 
öp
);

449 #i‡
LWIP_TCP


450 
IP_PROTO_TCP
:

451 
	`¢mp_öc_ùödñivîs
();

452 
	`t˝_öput
(
p
, 
öp
);

455 #i‡
LWIP_ICMP


456 
IP_PROTO_ICMP
:

457 
	`¢mp_öc_ùödñivîs
();

458 
	`icmp_öput
(
p
, 
öp
);

461 #i‡
LWIP_IGMP


462 
IP_PROTO_IGMP
:

463 
	`igmp_öput
(
p
,
öp
,&(
ùhdr
->
de°
));

467 #i‡
LWIP_ICMP


469 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) &&

470 !
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

471 
p
->
∑ylﬂd
 = 
ùhdr
;

472 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

475 
	`pbuf_‰ì
(
p
);

477 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

479 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

480 
	`IP_STATS_INC
(
ù
.
dr›
);

481 
	`¢mp_öc_ùöunknow≈rŸos
();

485 
cuºít_√tif
 = 
NULL
;

486 
cuºít_hódî
 = 
NULL
;

488  
ERR_OK
;

489 
	}
}

516 
îr_t


517 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

518 
u8_t
 
âl
, u8_à
tos
,

519 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

521 #i‡
IP_OPTIONS_SEND


522  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
, 
NULL
, 0);

523 
	}
}

531 
îr_t
 
	$ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

532 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

533 
u16_t
 
›éí
)

536 
ù_hdr
 *
ùhdr
;

537 
u16_t
 
ù_id
 = 0;

539 
	`¢mp_öc_ùouåeque°s
();

542 i‡(
de°
 !
IP_HDRINCL
) {

543 
u16_t
 
ù_hÀn
 = 
IP_HLEN
;

544 #i‡
IP_OPTIONS_SEND


545 
u16_t
 
›éí_Æig√d
 = 0;

546 i‡(
›éí
 != 0) {

548 
›éí_Æig√d
 = ((
›éí
 + 3) & ~3);

549 
ù_hÀn
 +
›éí_Æig√d
;

551 i‡(
	`pbuf_hódî
(
p
, 
›éí_Æig√d
)) {

552 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output_if_opt:ÇotÉnoughÑoom for IP options inÖbuf\n"));

553 
	`IP_STATS_INC
(
ù
.
îr
);

554 
	`¢mp_öc_ùoutdisˇrds
();

555  
ERR_BUF
;

557 
	`MEMCPY
(
p
->
∑ylﬂd
, 
ù_›ti⁄s
, 
›éí
);

558 i‡(
›éí
 < 
›éí_Æig√d
) {

560 
	`mem£t
(((*)
p
->
∑ylﬂd
Ë+ 
›éí
, 0, 
›éí_Æig√d
 - optlen);

565 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

566 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

568 
	`IP_STATS_INC
(
ù
.
îr
);

569 
	`¢mp_öc_ùoutdisˇrds
();

570  
ERR_BUF
;

573 
ùhdr
 = 
p
->
∑ylﬂd
;

574 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

575 (
p
->
Àn
 >(
ù_hdr
)));

577 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

578 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

580 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

582 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
ù_hÀn
 / 4, 
tos
);

583 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

584 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

585 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

586 ++
ù_id
;

588 i‡(
	`ù_addr_ißny
(
§c
)) {

589 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

591 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

594 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

595 #i‡
CHECKSUM_GEN_IP


596 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
ù_hÀn
));

600 
ùhdr
 = 
p
->
∑ylﬂd
;

601 
de°
 = &(
ùhdr
->dest);

604 #i‡
IP_FRAG


606 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu))

607  
	`ù_‰ag
(
p
,
√tif
,
de°
);

610 
	`IP_STATS_INC
(
ù
.
xmô
);

612 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

613 
	`ù_debug_¥öt
(
p
);

615 #i‡(
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

616 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

618 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

620  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

624 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

626  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

628 
	}
}

647 
îr_t


648 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

649 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

651 
√tif
 *netif;

653 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

654 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

655 
	`IP_STATS_INC
(
ù
.
πîr
);

656  
ERR_RTE
;

659  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

660 
	}
}

662 #i‡
LWIP_NETIF_HWADDRHINT


681 
îr_t


682 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

683 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

685 
√tif
 *netif;

686 
îr_t
 
îr
;

688 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

689 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

690 
	`IP_STATS_INC
(
ù
.
πîr
);

691  
ERR_RTE
;

694 
√tif
->
addr_höt
 =áddr_hint;

695 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

696 
√tif
->
addr_höt
 = 
NULL
;

698  
îr
;

699 
	}
}

702 #i‡
IP_DEBUG


707 
	$ù_debug_¥öt
(
pbuf
 *
p
)

709 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

710 
u8_t
 *
∑ylﬂd
;

712 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

714 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

715 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

716 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

717 
	`IPH_V
(
ùhdr
),

718 
	`IPH_HL
(
ùhdr
),

719 
	`IPH_TOS
(
ùhdr
),

720 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

721 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

722 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

723 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

724 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

725 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

726 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

727 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

728 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

729 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

730 
	`IPH_TTL
(
ùhdr
),

731 
	`IPH_PROTO
(
ùhdr
),

732 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

733 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

734 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

735 
	`ù4_addr1
(&
ùhdr
->
§c
),

736 
	`ù4_addr2
(&
ùhdr
->
§c
),

737 
	`ù4_addr3
(&
ùhdr
->
§c
),

738 
	`ù4_addr4
(&
ùhdr
->
§c
)));

739 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

740 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

741 
	`ù4_addr1
(&
ùhdr
->
de°
),

742 
	`ù4_addr2
(&
ùhdr
->
de°
),

743 
	`ù4_addr3
(&
ùhdr
->
de°
),

744 
	`ù4_addr4
(&
ùhdr
->
de°
)));

745 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

746 
	}
}

	@core/ipv4/ip_addr.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/√tif.h
"

44 
	#IP_ADDR_ANY_VALUE
 0x00000000UL

	)

45 
	#IP_ADDR_BROADCAST_VALUE
 0xffffffffUL

	)

48 c⁄° 
ù_addr
 
	gù_addr_™y
 = { 
IP_ADDR_ANY_VALUE
 };

49 c⁄° 
ù_addr
 
	gù_addr_brﬂdˇ°
 = { 
IP_ADDR_BROADCAST_VALUE
 };

58 
u8_t
 
	$ù_addr_isbrﬂdˇ°
(
ù_addr
 *
addr
, 
√tif
 *netif)

60 
u32_t
 
addr2ã°
;

62 
addr2ã°
 = 
addr
->addr;

64 i‡((~
addr2ã°
 =
IP_ADDR_ANY_VALUE
) ||

65 (
addr2ã°
 =
IP_ADDR_ANY_VALUE
))

68 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0)

73 i‡(
addr2ã°
 =
√tif
->
ù_addr
.
addr
)

76 i‡(
	`ù_addr_√tcmp
(
addr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

78 && ((
addr2ã°
 & ~
√tif
->
√tmask
.
addr
) ==

79 (
IP_ADDR_BROADCAST_VALUE
 & ~
√tif
->
√tmask
.
addr
)))

84 
	}
}

	@core/ipv4/ip_frag.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù_‰ag.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/öë.h
"

45 
	~"lwù/öë_chksum.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/¢mp.h
"

48 
	~"lwù/°©s.h
"

49 
	~"lwù/icmp.h
"

51 
	~<°rög.h
>

53 #i‡
IP_REASSEMBLY


67 #i‚de‡
IP_REASS_CHECK_OVERLAP


68 
	#IP_REASS_CHECK_OVERLAP
 1

	)

75 #i‚de‡
IP_REASS_FREE_OLDEST


76 
	#IP_REASS_FREE_OLDEST
 1

	)

79 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

86 #ifde‡
PACK_STRUCT_USE_INCLUDES


87 
	~"¨ch/bp°ru˘.h
"

89 
PACK_STRUCT_BEGIN


90 
	sù_ªass_hñ≥r
 {

91 
PACK_STRUCT_FIELD
(
pbuf
 *
√xt_pbuf
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
°¨t
);

93 
PACK_STRUCT_FIELD
(
u16_t
 
íd
);

94 } 
	gPACK_STRUCT_STRUCT
;

95 
	gPACK_STRUCT_END


96 #ifde‡
PACK_STRUCT_USE_INCLUDES


97 
	~"¨ch/ï°ru˘.h
"

100 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

101 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

102 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

103 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

106 
ù_ªassd©a
 *
	gªassd©agøms
;

107 
u16_t
 
	gù_ªass_pbufcou¡
;

110 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

111 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

120 
	$ù_ªass_tmr
()

122 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

124 
r
 = 
ªassd©agøms
;

125 
r
 !
NULL
) {

128 i‡(
r
->
timî
 > 0) {

129 
r
->
timî
--;

130 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

131 
¥ev
 = 
r
;

132 
r
 =Ñ->
√xt
;

135 
ù_ªassd©a
 *
tmp
;

136 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

137 
tmp
 = 
r
;

139 
r
 =Ñ->
√xt
;

141 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

144 
	}
}

156 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

158 
pbufs_‰ìd
 = 0;

159 
pbuf
 *
p
;

160 
ù_ªass_hñ≥r
 *
ùrh
;

162 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

163 i‡(
¥ev
 !
NULL
) {

164 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

167 
	`¢mp_öc_ùªasmÁûs
();

168 #i‡
LWIP_ICMP


169 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

170 i‡(
ùrh
->
°¨t
 == 0) {

173 
p
 = 
ùr
->p;

174 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

176 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

177 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

178 
pbufs_‰ìd
 +
	`pbuf_˛í
(
p
);

179 
	`pbuf_‰ì
(
p
);

185 
p
 = 
ùr
->p;

186 
p
 !
NULL
) {

187 
pbuf
 *
pcur
;

188 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

189 
pcur
 = 
p
;

191 
p
 = 
ùrh
->
√xt_pbuf
;

192 
pbufs_‰ìd
 +
	`pbuf_˛í
(
pcur
);

193 
	`pbuf_‰ì
(
pcur
);

196 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

197 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

198 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

200  
pbufs_‰ìd
;

201 
	}
}

203 #i‡
IP_REASS_FREE_OLDEST


214 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

219 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

220 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

221 
Ÿhî_d©agøms
;

226 
ﬁde°
 = 
NULL
;

227 
¥ev
 = 
NULL
;

228 
Ÿhî_d©agøms
 = 0;

229 
r
 = 
ªassd©agøms
;

230 
r
 !
NULL
) {

231 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

233 
Ÿhî_d©agøms
++;

234 i‡(
ﬁde°
 =
NULL
) {

235 
ﬁde°
 = 
r
;

236 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

238 
ﬁde°
 = 
r
;

241 i‡(
r
->
√xt
 !
NULL
) {

242 
¥ev
 = 
r
;

244 
r
 =Ñ->
√xt
;

246 i‡(
ﬁde°
 !
NULL
) {

247 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

248 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

250 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

251  
pbufs_‰ìd
;

252 
	}
}

261 
ù_ªassd©a
*

262 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

264 
ù_ªassd©a
* 
ùr
;

266 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

267 i‡(
ùr
 =
NULL
) {

268 #i‡
IP_REASS_FREE_OLDEST


269 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

270 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

272 i‡(
ùr
 =
NULL
)

275 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

276 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

277  
NULL
;

280 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

281 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

284 
ùr
->
√xt
 = 
ªassd©agøms
;

285 
ªassd©agøms
 = 
ùr
;

288 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

289  
ùr
;

290 
	}
}

297 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

301 i‡(
ªassd©agøms
 =
ùr
) {

303 
ªassd©agøms
 = 
ùr
->
√xt
;

306 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

307 
¥ev
->
√xt
 = 
ùr
->next;

311 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
);

312 
	}
}

324 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

326 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

327 
pbuf
 *
q
;

328 
u16_t
 
off£t
,
Àn
;

329 
ù_hdr
 *
‰aghdr
;

330 
vÆid
 = 1;

333 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

334 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

335 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

340 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

341 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

342 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

343 
ùrh
->
√xt_pbuf
 = 
NULL
;

344 
ùrh
->
°¨t
 = 
off£t
;

345 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

349 
q
 = 
ùr
->
p
; q !
NULL
;) {

350 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

351 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

353 
ùrh
->
√xt_pbuf
 = 
q
;

354 i‡(
ùrh_¥ev
 !
NULL
) {

356 #i‡
IP_REASS_CHECK_OVERLAP


357 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

359 
‰ìpbuf
;

362 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

365 
ùr
->
p
 = 
√w_p
;

368 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

370 
‰ìpbuf
;

371 #i‡
IP_REASS_CHECK_OVERLAP


372 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

374 
‰ìpbuf
;

378 i‡(
ùrh_¥ev
 !
NULL
) {

379 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

382 
vÆid
 = 0;

386 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

387 
ùrh_¥ev
 = 
ùrh_tmp
;

391 i‡(
q
 =
NULL
) {

392 i‡(
ùrh_¥ev
 !
NULL
) {

395 #i‡
IP_REASS_CHECK_OVERLAP


396 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

398 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

399 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

400 
vÆid
 = 0;

403 #i‡
IP_REASS_CHECK_OVERLAP


404 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

405 
ùr
->
p
 =
NULL
);

408 
ùr
->
p
 = 
√w_p
;

414 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

416 i‡(
vÆid
) {

419 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

420 
vÆid
 = 0;

423 
ùrh_¥ev
 = 
ùrh
;

424 
q
 = 
ùrh
->
√xt_pbuf
;

425 
q
 !
NULL
) {

426 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

427 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

428 
vÆid
 = 0;

431 
ùrh_¥ev
 = 
ùrh
;

432 
q
 = 
ùrh
->
√xt_pbuf
;

436 i‡(
vÆid
) {

437 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

438 
	`LWIP_ASSERT
("sanity check",

439 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

440 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

441 
ùrh
->
√xt_pbuf
 =
NULL
);

442 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

443 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

450  
vÆid
;

454 #i‡
IP_REASS_CHECK_OVERLAP


455 
‰ìpbuf
:

456 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

457 
	`pbuf_‰ì
(
√w_p
);

460 
	}
}

468 
pbuf
 *

469 
	$ù_ªass
(
pbuf
 *
p
)

471 
pbuf
 *
r
;

472 
ù_hdr
 *
‰aghdr
;

473 
ù_ªassd©a
 *
ùr
;

474 
ù_ªass_hñ≥r
 *
ùrh
;

475 
u16_t
 
off£t
, 
Àn
;

476 
u8_t
 
˛í
;

477 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

479 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

480 
	`¢mp_öc_ùªasmªqds
();

482 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

484 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

485 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

486 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

487 
nuŒªtu∫
;

490 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

491 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

494 
˛í
 = 
	`pbuf_˛í
(
p
);

495 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

496 #i‡
IP_REASS_FREE_OLDEST


497 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

498 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

502 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

503 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

504 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

507 
nuŒªtu∫
;

513 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

517 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

518 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

519 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

520 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

523 
ùr_¥ev
 = 
ùr
;

526 i‡(
ùr
 =
NULL
) {

528 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

530 if(
ùr
 =
NULL
) {

531 
nuŒªtu∫
;

534 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

535 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

540 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

545 
ù_ªass_pbufcou¡
 +
˛í
;

551 i‡((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_MF
) == 0) {

552 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

553 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

554 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

555 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

556 
ùr
->
d©agøm_Àn
));

560 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

563 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

566 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

569 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

570 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

571 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

572 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

573 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

575 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

577 
p
 = 
ùr
->p;

580 
r
 !
NULL
) {

581 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

584 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

585 
	`pbuf_ˇt
(
p
, 
r
);

586 
r
 = 
ùrh
->
√xt_pbuf
;

589 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

592 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

595  
p
;

598 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

599  
NULL
;

601 
nuŒªtu∫
:

602 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

603 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

604 
	`pbuf_‰ì
(
p
);

605  
NULL
;

606 
	}
}

609 #i‡
IP_FRAG


610 #i‡
IP_FRAG_USES_STATIC_BUF


611 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
 + 
MEM_ALIGNMENT
 - 1)];

627 
îr_t


628 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
)

630 
pbuf
 *
ømbuf
;

631 #i‡
IP_FRAG_USES_STATIC_BUF


632 
pbuf
 *
hódî
;

634 
pbuf
 *
√wpbuf
;

635 
ù_hdr
 *
‹igöÆ_ùhdr
;

637 
ù_hdr
 *
ùhdr
;

638 
u16_t
 
nfb
;

639 
u16_t
 
À·
, 
c›
;

640 
u16_t
 
mtu
 = 
√tif
->mtu;

641 
u16_t
 
ofo
, 
omf
;

642 
u16_t
 
œ°
;

643 
u16_t
 
poff
 = 
IP_HLEN
;

644 
u16_t
 
tmp
;

645 #i‡!
IP_FRAG_USES_STATIC_BUF


646 
u16_t
 
√wpbuÊí
 = 0;

647 
u16_t
 
À·_to_c›y
;

651 #i‡
IP_FRAG_USES_STATIC_BUF


656 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
);

657 i‡(
ømbuf
 =
NULL
) {

658 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

659  
ERR_MEM
;

661 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

662 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

665 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

666 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

668 
‹igöÆ_ùhdr
 = 
p
->
∑ylﬂd
;

669 
ùhdr
 = 
‹igöÆ_ùhdr
;

673 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

674 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

675 
omf
 = 
tmp
 & 
IP_MF
;

677 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

679 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

681 
À·
) {

682 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

685 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

686 i‡(!
œ°
)

687 
tmp
 =Åm∞| 
IP_MF
;

690 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

692 #i‡
IP_FRAG_USES_STATIC_BUF


693 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

700 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
);

701 i‡(
ømbuf
 =
NULL
) {

702  
ERR_MEM
;

704 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

705 (
p
->
Àn
 >(
IP_HLEN
)));

706 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

707 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

710 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

711 
p
->
Àn
 -
poff
;

713 
À·_to_c›y
 = 
c›
;

714 
À·_to_c›y
) {

715 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

717 i‡(!
√wpbuÊí
) {

718 
p
 =Ö->
√xt
;

721 
√wpbuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_REF
);

722 i‡(
√wpbuf
 =
NULL
) {

723 
	`pbuf_‰ì
(
ømbuf
);

724  
ERR_MEM
;

727 
√wpbuf
->
∑ylﬂd
 = 
p
->payload;

728 
√wpbuf
->
Àn
 =Çewpbuf->
tŸ_Àn
 = 
√wpbuÊí
;

732 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

733 
À·_to_c›y
 -
√wpbuÊí
;

734 i‡(
À·_to_c›y
)

735 
p
 =Ö->
√xt
;

737 
poff
 = 
√wpbuÊí
;

741 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

742 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

743 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

744 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

746 #i‡
IP_FRAG_USES_STATIC_BUF


747 i‡(
œ°
)

748 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

755 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
);

756 i‡(
hódî
 !
NULL
) {

757 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

758 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

759 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

760 
	`¢mp_öc_ù‰ag¸óãs
();

761 
	`pbuf_‰ì
(
hódî
);

763 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

764 
	`pbuf_‰ì
(
ømbuf
);

765  
ERR_MEM
;

771 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

772 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

781 
	`pbuf_‰ì
(
ømbuf
);

783 
À·
 -
c›
;

784 
ofo
 +
nfb
;

786 #i‡
IP_FRAG_USES_STATIC_BUF


787 
	`pbuf_‰ì
(
ømbuf
);

789 
	`¢mp_öc_ù‰agoks
();

790  
ERR_OK
;

791 
	}
}

	@core/ipv6/icmp6.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/icmp.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

47 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

49 
u8_t
 
ty≥
;

50 
icmp_echo_hdr
 *
õcho
;

51 
ù_hdr
 *
ùhdr
;

52 
ù_addr
 
tm∑ddr
;

54 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

58 
ty≥
 = ((
u8_t
 *)
p
->
∑ylﬂd
)[0];

60 
ty≥
) {

61 
ICMP6_ECHO
:

62 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

64 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

65 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

67 
	`pbuf_‰ì
(
p
);

68 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

71 
õcho
 = 
p
->
∑ylﬂd
;

72 
ùhdr
 = (
ù_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 - 
IP_HLEN
);

73 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

74 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

75 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

78 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp:Ö->À¿%"
S16_F
"Ö->tŸ_À¿%"S16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

79 
	`ù_addr_£t
(&
tm∑ddr
, &(
ùhdr
->
§c
));

80 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(ùhdr->
de°
));

81 
	`ù_addr_£t
(&(
ùhdr
->
de°
), &
tm∑ddr
);

82 
õcho
->
ty≥
 = 
ICMP6_ER
;

84 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP6_ECHO
 << 8))) {

85 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8) + 1;

87 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8);

89 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

90 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

93 
	`ù_ouçut_if
 (
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

94 
ùhdr
->
h›lim
, 
IP_PROTO_ICMP
, 
öp
);

97 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
"ÇŸ suµ‹ãd.\n", (
s16_t
)
ty≥
));

98 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

99 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

102 
	`pbuf_‰ì
(
p
);

103 
	}
}

106 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

108 
pbuf
 *
q
;

109 
ù_hdr
 *
ùhdr
;

110 
icmp_dur_hdr
 *
idur
;

113 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

115 i‡(
q
 =
NULL
) {

116 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

117 
	`pbuf_‰ì
(
p
);

120 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

121 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

123 
ùhdr
 = 
p
->
∑ylﬂd
;

125 
idur
 = 
q
->
∑ylﬂd
;

126 
idur
->
ty≥
 = (
u8_t
)
ICMP6_DUR
;

127 
idur
->
icode
 = (
u8_t
)
t
;

129 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, 
p
->∑ylﬂd, 
IP_HLEN
 + 8);

132 
idur
->
chksum
 = 0;

133 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

134 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

136 
	`ù_ouçut
(
q
, 
NULL
,

137 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

138 
	`pbuf_‰ì
(
q
);

139 
	}
}

142 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

144 
pbuf
 *
q
;

145 
ù_hdr
 *
ùhdr
;

146 
icmp_ã_hdr
 *
ãhdr
;

148 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded\n"));

151 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

153 i‡(
q
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

155 
	`pbuf_‰ì
(
p
);

158 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

159 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

161 
ùhdr
 = 
p
->
∑ylﬂd
;

163 
ãhdr
 = 
q
->
∑ylﬂd
;

164 
ãhdr
->
ty≥
 = (
u8_t
)
ICMP6_TE
;

165 
ãhdr
->
icode
 = (
u8_t
)
t
;

168 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, (u8_à*)
p
->∑ylﬂd, 
IP_HLEN
 + 8);

171 
ãhdr
->
chksum
 = 0;

172 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

173 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

174 
	`ù_ouçut
(
q
, 
NULL
,

175 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

176 
	`pbuf_‰ì
(
q
);

177 
	}
}

	@core/ipv6/inet6.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/öë.h
"

54 
u32_t


55 
	$chksum
(*
d©≠å
, 
u16_t
 
Àn
)

57 
u16_t
 *
sd©≠å
 = 
d©≠å
;

58 
u32_t
 
acc
;

61 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

62 
acc
 +*
sd©≠å
++;

66 i‡(
Àn
 == 1) {

67 
acc
 +
	`ht⁄s
((
u16_t
)(*(
u8_t
 *)
d©≠å
) << 8);

70  
acc
;

72 
	}
}

79 
u16_t


80 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

81 
ù_addr
 *
§c
, ù_add∏*
de°
,

82 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
)

84 
u32_t
 
acc
;

85 
pbuf
 *
q
;

86 
u8_t
 
sw≠≥d
, 
i
;

88 
acc
 = 0;

89 
sw≠≥d
 = 0;

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

92 
acc
 >> 16) {

93 
acc
 = (acc & 0xffff) + (acc >> 16);

95 i‡(
q
->
Àn
 % 2 != 0) {

96 
sw≠≥d
 = 1 - swapped;

97 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

101 i‡(
sw≠≥d
) {

102 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

105 
i
 = 0; i < 8; i++) {

106 
acc
 +((
u16_t
 *)
§c
->
addr
)[
i
] & 0xffff;

107 
acc
 +((
u16_t
 *)
de°
->
addr
)[
i
] & 0xffff;

108 
acc
 >> 16) {

109 
acc
 = (acc & 0xffff) + (acc >> 16);

112 
acc
 +(
u16_t
)
	`ht⁄s
((u16_t)
¥Ÿo
);

113 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[0] & 0xffff;

114 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[1] & 0xffff;

116 
acc
 >> 16) {

117 
acc
 = (acc & 0xffff) + (acc >> 16);

119  ~(
acc
 & 0xffff);

120 
	}
}

128 
u16_t


129 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

131 
u32_t
 
acc
, 
sum
;

133 
acc
 = 
	`chksum
(
d©≠å
, 
Àn
);

134 
sum
 = (
acc
 & 0xffff) + (acc >> 16);

135 
sum
 += (sum >> 16);

136  ~(
sum
 & 0xffff);

137 
	}
}

139 
u16_t


140 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

142 
u32_t
 
acc
;

143 
pbuf
 *
q
;

144 
u8_t
 
sw≠≥d
;

146 
acc
 = 0;

147 
sw≠≥d
 = 0;

148 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

149 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

150 
acc
 >> 16) {

151 
acc
 = (acc & 0xffff) + (acc >> 16);

153 i‡(
q
->
Àn
 % 2 != 0) {

154 
sw≠≥d
 = 1 - swapped;

155 
acc
 = (acc & 0xff << 8) | (acc & 0xff00 >> 8);

159 i‡(
sw≠≥d
) {

160 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

162  ~(
acc
 & 0xffff);

163 
	}
}

	@core/ipv6/ip6.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/ù.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/udp.h
"

51 
	~"lwù/t˝.h
"

53 
	~"lwù/°©s.h
"

55 
	~"¨ch/≥rf.h
"

63 
	$ù_öô
()

65 
	}
}

74 
√tif
 *

75 
	$ù_rouã
(
ù_addr
 *
de°
)

77 
√tif
 *netif;

79 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

80 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

81  
√tif
;

85  
√tif_deÁu…
;

86 
	}
}

96 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
)

98 
√tif
 *netif;

100 
PERF_START
;

102 i‡((
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
))Ë=
NULL
) {

104 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Ço forwardingÑoute found for "));

105 #i‡
IP_DEBUG


106 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

108 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

109 
	`pbuf_‰ì
(
p
);

113 i‡(--
ùhdr
->
h›lim
 == 0) {

114 #i‡
LWIP_ICMP


116 i‡(
ùhdr
->
√xthdr
 !
IP_PROTO_ICMP
) {

117 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

120 
	`pbuf_‰ì
(
p
);

132 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward: forwardingÖacketÅo "));

133 #i‡
IP_DEBUG


134 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

136 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

138 
	`IP_STATS_INC
(
ù
.
fw
);

139 
	`IP_STATS_INC
(
ù
.
xmô
);

141 
	`PERF_STOP
("ip_forward");

143 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

144 
	}
}

157 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
) {

158 
ù_hdr
 *
ùhdr
;

159 
√tif
 *netif;

162 
PERF_START
;

164 #i‡
IP_DEBUG


165 
	`ù_debug_¥öt
(
p
);

169 
	`IP_STATS_INC
(
ù
.
ªcv
);

172 
ùhdr
 = 
p
->
∑ylﬂd
;

175 i‡(
ùhdr
->
v
 != 6) {

176 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖacket dropped dueÅo bad versionÇumber\n"));

177 #i‡
IP_DEBUG


178 
	`ù_debug_¥öt
(
p
);

180 
	`pbuf_‰ì
(
p
);

181 
	`IP_STATS_INC
(
ù
.
îr
);

182 
	`IP_STATS_INC
(
ù
.
dr›
);

187 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

188 #i‡
IP_DEBUG


189 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: iphdr->dest "));

190 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

191 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->ip_addr "));

192 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

193 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

195 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
))) {

201 i‡(
√tif
 =
NULL
) {

203 #i‡
IP_FORWARD


204 
	`ù_f‹w¨d
(
p
, 
ùhdr
);

206 
	`pbuf_‰ì
(
p
);

210 
	`pbuf_ªÆloc
(
p
, 
IP_HLEN
 + 
	`¡ohs
(
ùhdr
->
Àn
));

213 #i‡
IP_DEBUG


219 if(
	`pbuf_hódî
(
p
, -
IP_HLEN
)) {

220 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

224 
ùhdr
->
√xthdr
) {

225 
IP_PROTO_UDP
:

226 
	`udp_öput
(
p
, 
öp
);

228 
IP_PROTO_TCP
:

229 
	`t˝_öput
(
p
, 
öp
);

231 #i‡
LWIP_ICMP


232 
IP_PROTO_ICMP
:

233 
	`icmp_öput
(
p
, 
öp
);

237 #i‡
LWIP_ICMP


239 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

241 
	`pbuf_‰ì
(
p
);

242 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n",

243 
ùhdr
->
√xthdr
));

245 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

246 
	`IP_STATS_INC
(
ù
.
dr›
);

248 
	`PERF_STOP
("ip_input");

249 
	}
}

259 
îr_t


260 
	$ù_ouçut_if
 (
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

261 
u8_t
 
âl
,

262 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

264 
ù_hdr
 *
ùhdr
;

266 
PERF_START
;

268 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

269 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

271 
	`IP_STATS_INC
(
ù
.
îr
);

273  
ERR_BUF
;

275 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

277 
ùhdr
 = 
p
->
∑ylﬂd
;

280 i‡(
de°
 !
IP_HDRINCL
) {

281 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("!IP_HDRLINCL\n"));

282 
ùhdr
->
h›lim
 = 
âl
;

283 
ùhdr
->
√xthdr
 = 
¥Ÿo
;

284 
ùhdr
->
Àn
 = 
	`ht⁄s
(
p
->
tŸ_Àn
 - 
IP_HLEN
);

285 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

287 
ùhdr
->
v
 = 6;

289 i‡(
	`ù_addr_ißny
(
§c
)) {

290 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

292 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

296 
de°
 = &(
ùhdr
->dest);

299 
	`IP_STATS_INC
(
ù
.
xmô
);

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%¯÷í %"
U16_F
")\n", 
√tif
->
«me
[0],Çëif->«me[1], 
p
->
tŸ_Àn
));

302 #i‡
IP_DEBUG


303 
	`ù_debug_¥öt
(
p
);

306 
	`PERF_STOP
("ip_output_if");

307  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

308 
	}
}

316 
îr_t


317 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

318 
u8_t
 
âl
, u8_à
¥Ÿo
)

320 
√tif
 *netif;

321 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

322 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

323 
	`IP_STATS_INC
(
ù
.
πîr
);

324  
ERR_RTE
;

327  
	`ù_ouçut_if
 (
p
, 
§c
, 
de°
, 
âl
, 
¥Ÿo
, 
√tif
);

328 
	}
}

330 #i‡
LWIP_NETIF_HWADDRHINT


331 
îr_t


332 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

333 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

335 
√tif
 *netif;

336 
îr_t
 
îr
;

338 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

339 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

340 
	`IP_STATS_INC
(
ù
.
πîr
);

341  
ERR_RTE
;

344 
√tif
->
addr_höt
 =áddr_hint;

345 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

346 
√tif
->
addr_höt
 = 
NULL
;

348  
îr
;

349 
	}
}

352 #i‡
IP_DEBUG


354 
	$ù_debug_¥öt
(
pbuf
 *
p
)

356 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

358 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

359 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

360 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" | %"
X16_F
"%"X16_F" | %"X16_F"%"X16_F" | (v,Åraffic class, flowÜabel)\n",

361 
ùhdr
->
v
,

362 
ùhdr
->
t˛ass1
, iphdr->
t˛ass2
,

363 
ùhdr
->
Êow1
, iphdr->
Êow2
));

364 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

365 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" | %2"U16_F" | %2"U16_F" | (len,Çexthdr, hoplim)\n",

366 
	`¡ohs
(
ùhdr
->
Àn
),

367 
ùhdr
->
√xthdr
,

368 
ùhdr
->
h›lim
));

369 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

370 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

371 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) >> 16) & 0xffff,

372 
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) & 0xffff));

373 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

374 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) >> 16) & 0xffff,

375 
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) & 0xffff));

376 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

377 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) >> 16) & 0xffff,

378 
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) & 0xffff));

379 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

380 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) >> 16) & 0xffff,

381 
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) & 0xffff));

382 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

383 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

384 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) >> 16) & 0xffff,

385 
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) & 0xffff));

386 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

387 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) >> 16) & 0xffff,

388 
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) & 0xffff));

389 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

390 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) >> 16) & 0xffff,

391 
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) & 0xffff));

392 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

393 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) >> 16) & 0xffff,

394 
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) & 0xffff));

395 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

396 
	}
}

	@core/ipv6/ip6_addr.c

33 
	~"lwù/›t.h
"

34 
	~"lwù/ù_addr.h
"

35 
	~"lwù/öë.h
"

37 
u8_t


38 
	$ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

39 
ù_addr
 *
mask
)

41 ((
addr1
->
addr
[0] & 
mask
->addr[0]Ë=(
addr2
->addr[0] & mask->addr[0]) &&

42 (
addr1
->
addr
[1] & 
mask
->addr[1]Ë=(
addr2
->addr[1] & mask->addr[1]) &&

43 (
addr1
->
addr
[2] & 
mask
->addr[2]Ë=(
addr2
->addr[2] & mask->addr[2]) &&

44 (
addr1
->
addr
[3] & 
mask
->addr[3]Ë=(
addr2
->addr[3] & mask->addr[3]));

46 
	}
}

48 
u8_t


49 
	$ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
)

51 (
addr1
->
addr
[0] =
addr2
->addr[0] &&

52 
addr1
->
addr
[1] =
addr2
->addr[1] &&

53 
addr1
->
addr
[2] =
addr2
->addr[2] &&

54 
addr1
->
addr
[3] =
addr2
->addr[3]);

55 
	}
}

58 
	$ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
)

60 
	`SMEMCPY
(
de°
, 
§c
, (
ù_addr
));

65 
	}
}

67 
u8_t


68 
	$ù_addr_ißny
(
ù_addr
 *
addr
)

70 i‡(
addr
 =
NULL
)  1;

71 ((
addr
->addr[0] |áddr->addr[1] |áddr->addr[2] |áddr->addr[3]) == 0);

72 
	}
}

	@core/mem.c

56 
	~"lwù/›t.h
"

58 #i‡!
MEM_LIBC_MALLOC


60 
	~"lwù/def.h
"

61 
	~"lwù/mem.h
"

62 
	~"lwù/sys.h
"

63 
	~"lwù/°©s.h
"

65 
	~<°rög.h
>

67 #i‡
MEM_USE_POOLS


78 
	$mem_mÆloc
(
mem_size_t
 
size
)

80 
memp_mÆloc_hñ≥r
 *
ñemít
;

81 
memp_t
 
poﬁƒ
;

82 
mem_size_t
 
ªquúed_size
 = 
size
 + (
memp_mÆloc_hñ≥r
);

84 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoolnr++) {

85 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


86 
agaö
:

90 i‡(
ªquúed_size
 <
memp_sizes
[
poﬁƒ
]) {

94 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

95 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

96  
NULL
;

98 
ñemít
 = (
memp_mÆloc_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
);

99 i‡(
ñemít
 =
NULL
) {

102 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


104 i‡(
poﬁƒ
 < 
MEMP_POOL_LAST
) {

105 
poﬁƒ
++;

106 
agaö
;

109  
NULL
;

113 
ñemít
->
poﬁƒ
 =Öoolnr;

115 
ñemít
++;

117  
ñemít
;

118 
	}
}

128 
	$mem_‰ì
(*
rmem
)

130 
memp_mÆloc_hñ≥r
 *
hmem
 = (memp_mÆloc_hñ≥r*)
rmem
;

132 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

133 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

136 
hmem
--;

138 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

139 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

140 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

143 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem);

144 
	}
}

154 
	smem
 {

156 
mem_size_t
 
	m√xt
;

158 
mem_size_t
 
	m¥ev
;

160 
u8_t
 
	mu£d
;

166 #i‚de‡
MIN_SIZE


167 
	#MIN_SIZE
 12

	)

170 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

171 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

172 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

175 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

177 
u8_t
 *
	gøm
;

179 
mem
 *
	gøm_íd
;

181 
mem
 *
	gl‰ì
;

184 
sys_£m_t
 
	gmem_£m
;

186 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


188 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

191 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

192 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

193 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

194 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

195 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

196 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

201 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

202 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_¨ch_£m_waô
(
mem_£m
, 0)

	)

203 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_£m_sig«l
(
mem_£m
)

	)

205 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

206 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

207 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

224 
	$∂ug_hﬁes
(
mem
 *mem)

226 
mem
 *
nmem
;

227 
mem
 *
pmem
;

229 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

230 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

231 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

234 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

236 
nmem
 = (
mem
 *)&
øm
[mem->
√xt
];

237 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

239 i‡(
l‰ì
 =
nmem
) {

240 
l‰ì
 = 
mem
;

242 
mem
->
√xt
 = 
nmem
->next;

243 ((
mem
 *)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
u8_t
 *)mem -Ñam;

247 
pmem
 = (
mem
 *)&
øm
[mem->
¥ev
];

248 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

250 i‡(
l‰ì
 =
mem
) {

251 
l‰ì
 = 
pmem
;

253 
pmem
->
√xt
 = 
mem
->next;

254 ((
mem
 *)&
øm
[mem->
√xt
])->
¥ev
 = (
u8_t
 *)
pmem
 -Ñam;

256 
	}
}

262 
	$mem_öô
()

264 
mem
 *mem;

266 
	`LWIP_ASSERT
("Sanity checkálignment",

267 (
SIZEOF_STRUCT_MEM
 & (
MEM_ALIGNMENT
-1)) == 0);

270 
øm
 = 
	`LWIP_MEM_ALIGN
(
øm_hóp
);

272 
mem
 = (mem *)
øm
;

273 
mem
->
√xt
 = 
MEM_SIZE_ALIGNED
;

274 
mem
->
¥ev
 = 0;

275 
mem
->
u£d
 = 0;

277 
øm_íd
 = (
mem
 *)&
øm
[
MEM_SIZE_ALIGNED
];

278 
øm_íd
->
u£d
 = 1;

279 
øm_íd
->
√xt
 = 
MEM_SIZE_ALIGNED
;

280 
øm_íd
->
¥ev
 = 
MEM_SIZE_ALIGNED
;

282 
mem_£m
 = 
	`sys_£m_√w
(1);

285 
l‰ì
 = (
mem
 *)
øm
;

287 
	`MEM_STATS_AVAIL
(
avaû
, 
MEM_SIZE_ALIGNED
);

288 
	}
}

297 
	$mem_‰ì
(*
rmem
)

299 
mem
 *mem;

300 
	`LWIP_MEM_FREE_DECL_PROTECT
();

302 i‡(
rmem
 =
NULL
) {

303 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("mem_free(p == NULL) was called.\n"));

306 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

308 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

309 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

311 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

312 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

313 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_free: illegal memory\n"));

315 
	`SYS_ARCH_PROTECT
(
Àv
);

316 
	`MEM_STATS_INC
(
ûÀgÆ
);

317 
	`SYS_ARCH_UNPROTECT
(
Àv
);

321 
	`LWIP_MEM_FREE_PROTECT
();

323 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

325 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

327 
mem
->
u£d
 = 0;

329 i‡(
mem
 < 
l‰ì
) {

331 
l‰ì
 = 
mem
;

334 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

337 
	`∂ug_hﬁes
(
mem
);

338 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


339 
mem_‰ì_cou¡
 = 1;

341 
	`LWIP_MEM_FREE_UNPROTECT
();

342 
	}
}

357 
	$mem_ªÆloc
(*
rmem
, 
mem_size_t
 
√wsize
)

359 
mem_size_t
 
size
;

360 
mem_size_t
 
±r
, 
±r2
;

361 
mem
 *mem, *
mem2
;

363 
	`LWIP_MEM_FREE_DECL_PROTECT
();

367 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

369 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

371 
√wsize
 = 
MIN_SIZE_ALIGNED
;

374 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

375  
NULL
;

378 
	`LWIP_ASSERT
("mem_ªÆloc:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

379 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

381 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

382 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

383 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_realloc: illegal memory\n"));

385 
	`SYS_ARCH_PROTECT
(
Àv
);

386 
	`MEM_STATS_INC
(
ûÀgÆ
);

387 
	`SYS_ARCH_UNPROTECT
(
Àv
);

388  
rmem
;

391 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

393 
±r
 = (
u8_t
 *)
mem
 - 
øm
;

395 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

396 
	`LWIP_ASSERT
("mem_ªÆlo¯ˇ¿⁄ly shrök mem‹y", 
√wsize
 <
size
);

397 i‡(
√wsize
 > 
size
) {

399  
NULL
;

401 i‡(
√wsize
 =
size
) {

403  
rmem
;

407 
	`LWIP_MEM_FREE_PROTECT
();

409 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

411 
mem2
 = (
mem
 *)&
øm
[mem->
√xt
];

412 if(
mem2
->
u£d
 == 0) {

414 
mem_size_t
 
√xt
;

416 
√xt
 = 
mem2
->next;

418 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

419 i‡(
l‰ì
 =
mem2
) {

420 
l‰ì
 = (
mem
 *)&
øm
[
±r2
];

422 
mem2
 = (
mem
 *)&
øm
[
±r2
];

423 
mem2
->
u£d
 = 0;

425 
mem2
->
√xt
 =Çext;

427 
mem2
->
¥ev
 = 
±r
;

429 
mem
->
√xt
 = 
±r2
;

433 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

434 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

437 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

445 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

446 
mem2
 = (
mem
 *)&
øm
[
±r2
];

447 i‡(
mem2
 < 
l‰ì
) {

448 
l‰ì
 = 
mem2
;

450 
mem2
->
u£d
 = 0;

451 
mem2
->
√xt
 = 
mem
->next;

452 
mem2
->
¥ev
 = 
±r
;

453 
mem
->
√xt
 = 
±r2
;

454 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

455 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

465 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


466 
mem_‰ì_cou¡
 = 1;

468 
	`LWIP_MEM_FREE_UNPROTECT
();

469  
rmem
;

470 
	}
}

482 
	$mem_mÆloc
(
mem_size_t
 
size
)

484 
mem_size_t
 
±r
, 
±r2
;

485 
mem
 *mem, *
mem2
;

486 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


487 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

489 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

491 i‡(
size
 == 0) {

492  
NULL
;

497 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

499 if(
size
 < 
MIN_SIZE_ALIGNED
) {

501 
size
 = 
MIN_SIZE_ALIGNED
;

504 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

505  
NULL
;

509 
	`sys_¨ch_£m_waô
(
mem_£m
, 0);

510 
	`LWIP_MEM_ALLOC_PROTECT
();

511 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


514 
loˇl_mem_‰ì_cou¡
 = 0;

520 
±r
 = (
u8_t
 *)
l‰ì
 - 
øm
;Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

521 
±r
 = ((
mem
 *)&
øm
[±r])->
√xt
) {

522 
mem
 = (mem *)&
øm
[
±r
];

523 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


524 
mem_‰ì_cou¡
 = 0;

525 
	`LWIP_MEM_ALLOC_UNPROTECT
();

527 
	`LWIP_MEM_ALLOC_PROTECT
();

528 i‡(
mem_‰ì_cou¡
 != 0) {

529 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

531 
mem_‰ì_cou¡
 = 0;

534 i‡((!
mem
->
u£d
) &&

535 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

539 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

550 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

552 
mem2
 = (
mem
 *)&
øm
[
±r2
];

553 
mem2
->
u£d
 = 0;

554 
mem2
->
√xt
 = 
mem
->next;

555 
mem2
->
¥ev
 = 
±r
;

557 
mem
->
√xt
 = 
±r2
;

558 
mem
->
u£d
 = 1;

560 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

561 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

563 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

572 
mem
->
u£d
 = 1;

573 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

576 i‡(
mem
 =
l‰ì
) {

578 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

579 
	`LWIP_MEM_ALLOC_UNPROTECT
();

581 
	`LWIP_MEM_ALLOC_PROTECT
();

582 
l‰ì
 = (
mem
 *)&
øm
[l‰ì->
√xt
];

584 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

586 
	`LWIP_MEM_ALLOC_UNPROTECT
();

587 
	`sys_£m_sig«l
(
mem_£m
);

588 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

589 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

590 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

591 ((
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

592 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

593 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

595  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

598 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


600 } 
loˇl_mem_‰ì_cou¡
 != 0);

602 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 2, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

603 
	`MEM_STATS_INC
(
îr
);

604 
	`LWIP_MEM_ALLOC_UNPROTECT
();

605 
	`sys_£m_sig«l
(
mem_£m
);

606  
NULL
;

607 
	}
}

620 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

622 *
p
;

625 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

626 i‡(
p
) {

628 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

630  
p
;

631 
	}
}

	@core/memp.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/memp.h
"

44 
	~"lwù/pbuf.h
"

45 
	~"lwù/udp.h
"

46 
	~"lwù/øw.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/≠i.h
"

50 
	~"lwù/≠i_msg.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"lwù/ù_‰ag.h
"

57 
	~<°rög.h
>

59 #i‡!
MEMP_MEM_MALLOC


61 
	smemp
 {

62 
memp
 *
	m√xt
;

63 #i‡
MEMP_OVERFLOW_CHECK


64 c⁄° *
	mfûe
;

65 
	mlöe
;

69 #i‡
MEMP_OVERFLOW_CHECK


78 #i‚de‡
MEMP_SANITY_REGION_BEFORE


79 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

81 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

82 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

84 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

86 #i‚de‡
MEMP_SANITY_REGION_AFTER


87 
	#MEMP_SANITY_REGION_AFTER
 16

	)

89 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

90 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

92 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

96 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

97 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

105 
	#MEMP_SIZE
 0

	)

106 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

112 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

116 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

121 #i‡!
MEM_USE_POOLS
 && !
MEMP_MEM_MALLOC


124 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

125 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`LWIP_MEM_ALIGN_SIZE
(size),

	)

126 
	~"lwù/memp_°d.h
"

129 #i‡!
MEMP_MEM_MALLOC


132 c⁄° 
u16_t
 
	gmemp_num
[
MEMP_MAX
] = {

133 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

134 
	~"lwù/memp_°d.h
"

138 #ifde‡
LWIP_DEBUG


139 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

140 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

141 
	~"lwù/memp_°d.h
"

146 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

147 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

148 
	~"lwù/memp_°d.h
"

151 #i‡
MEMP_SANITY_CHECK


156 
	$memp_ßnôy
()

158 
s16_t
 
i
, 
c
;

159 
memp
 *
m
, *
n
;

161 
i
 = 0; i < 
MEMP_MAX
; i++) {

162 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

163 
c
 = 1;

164 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

165 i‡(
n
 =
m
 && --
c
 < 0) {

172 
	}
}

174 #i‡
MEMP_OVERFLOW_CHECK


183 
	$memp_ovîÊow_check_ñemít
(
memp
 *
p
, 
u16_t
 
memp_size
)

185 
u16_t
 
k
;

186 
u8_t
 *
m
;

187 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

188 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

189 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

190 i‡(
m
[
k
] != 0xcd) {

191 
	`LWIP_ASSERT
("detected memp underflow!", 0);

195 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

196 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_size
;

197 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

198 i‡(
m
[
k
] != 0xcd) {

199 
	`LWIP_ASSERT
("detected memp overflow!", 0);

203 
	}
}

211 
	$memp_ovîÊow_check_Æl
()

213 
u16_t
 
i
, 
j
;

214 
memp
 *
p
;

216 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

217 
i
 = 0; i < 
MEMP_MAX
; ++i) {

218 
p
 =Ö;

219 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

220 
	`memp_ovîÊow_check_ñemít
(
p
, 
memp_sizes
[
i
]);

221 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

224 
	}
}

230 
	$memp_ovîÊow_öô
()

232 
u16_t
 
i
, 
j
;

233 
memp
 *
p
;

234 
u8_t
 *
m
;

236 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

237 
i
 = 0; i < 
MEMP_MAX
; ++i) {

238 
p
 =Ö;

239 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

240 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

241 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

242 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

244 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

245 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
];

246 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

248 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

251 
	}
}

260 
	$memp_öô
()

262 
memp
 *memp;

263 
u16_t
 
i
, 
j
;

265 
i
 = 0; i < 
MEMP_MAX
; ++i) {

266 
	`MEMP_STATS_AVAIL
(
u£d
, 
i
, 0);

267 
	`MEMP_STATS_AVAIL
(
max
, 
i
, 0);

268 
	`MEMP_STATS_AVAIL
(
îr
, 
i
, 0);

269 
	`MEMP_STATS_AVAIL
(
avaû
, 
i
, 
memp_num
[i]);

272 
memp
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

274 
i
 = 0; i < 
MEMP_MAX
; ++i) {

275 
memp_èb
[
i
] = 
NULL
;

277 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

278 
memp
->
√xt
 = 
memp_èb
[
i
];

279 
memp_èb
[
i
] = 
memp
;

280 
memp
 = (mem∞*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]

281 #i‡
MEMP_OVERFLOW_CHECK


282 + 
MEMP_SANITY_REGION_AFTER_ALIGNED


287 #i‡
MEMP_OVERFLOW_CHECK


288 
	`memp_ovîÊow_öô
();

290 
	`memp_ovîÊow_check_Æl
();

292 
	}
}

306 #i‡!
MEMP_OVERFLOW_CHECK


307 
	$memp_mÆloc
(
memp_t
 
ty≥
)

309 
	$memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
)

312 
memp
 *memp;

313 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

315 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

317 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

318 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

319 
	`memp_ovîÊow_check_Æl
();

322 
memp
 = 
memp_èb
[
ty≥
];

324 i‡(
memp
 !
NULL
) {

325 
memp_èb
[
ty≥
] = 
memp
->
√xt
;

326 #i‡
MEMP_OVERFLOW_CHECK


327 
memp
->
√xt
 = 
NULL
;

328 
memp
->
fûe
 = file;

329 
memp
->
löe
 =Üine;

331 
	`MEMP_STATS_INC_USED
(
u£d
, 
ty≥
);

332 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

333 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

334 
memp
 = (memp*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

336 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 2, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

337 
	`MEMP_STATS_INC
(
îr
, 
ty≥
);

340 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

342  
memp
;

343 
	}
}

352 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
)

354 
memp
 *memp;

355 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

357 i‡(
mem
 =
NULL
) {

360 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

361 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

363 
memp
 = (mem∞*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

365 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

366 #i‡
MEMP_OVERFLOW_CHECK


367 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

368 
	`memp_ovîÊow_check_Æl
();

370 
	`memp_ovîÊow_check_ñemít
(
memp
, 
memp_sizes
[
ty≥
]);

374 
	`MEMP_STATS_DEC
(
u£d
, 
ty≥
);

376 
memp
->
√xt
 = 
memp_èb
[
ty≥
];

377 
memp_èb
[
ty≥
] = 
memp
;

379 #i‡
MEMP_SANITY_CHECK


380 
	`LWIP_ASSERT
("mem∞ßnôy", 
	`memp_ßnôy
());

383 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

384 
	}
}

	@core/netif.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/t˝.h
"

45 
	~"lwù/¢mp.h
"

46 
	~"lwù/igmp.h
"

47 
	~"√tif/ëh¨p.h
"

48 #i‡
ENABLE_LOOPBACK


49 
	~"lwù/sys.h
"

50 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


51 
	~"lwù/t˝ù.h
"

55 #i‡
LWIP_NETIF_STATUS_CALLBACK


56 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ i‡“->
°©us_ˇŒback
Ë“->°©us_ˇŒback)“); }

	)

58 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ }

	)

61 #i‡
LWIP_NETIF_LINK_CALLBACK


62 
	#NETIF_LINK_CALLBACK
(
n
Ë{ i‡“->
lök_ˇŒback
Ë“->lök_ˇŒback)“); }

	)

64 
	#NETIF_LINK_CALLBACK
(
n
Ë{ }

	)

67 
√tif
 *
	g√tif_li°
;

68 
√tif
 *
	g√tif_deÁu…
;

84 
√tif
 *

85 
√tif_add
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

86 
ù_addr
 *
gw
,

87 *
°©e
,

88 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

89 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

91 
u8_t
 
√ti‚um
 = 0;

94 
√tif
->
ù_addr
.
addr
 = 0;

95 
√tif
->
√tmask
.
addr
 = 0;

96 
√tif
->
gw
.
addr
 = 0;

97 
√tif
->
Êags
 = 0;

98 #i‡
LWIP_DHCP


100 
√tif
->
dh˝
 = 
NULL
;

102 #i‡
LWIP_AUTOIP


104 
√tif
->
autoù
 = 
NULL
;

106 #i‡
LWIP_NETIF_STATUS_CALLBACK


107 
√tif
->
°©us_ˇŒback
 = 
NULL
;

109 #i‡
LWIP_NETIF_LINK_CALLBACK


110 
√tif
->
lök_ˇŒback
 = 
NULL
;

112 #i‡
LWIP_IGMP


113 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

115 #i‡
ENABLE_LOOPBACK


116 
√tif
->
lo›_fú°
 = 
NULL
;

117 
√tif
->
lo›_œ°
 = 
NULL
;

121 
√tif
->
°©e
 = state;

122 
√tif
->
num
 = 
√ti‚um
++;

123 
√tif
->
öput
 = input;

124 #i‡
LWIP_NETIF_HWADDRHINT


125 
√tif
->
addr_höt
 = 
NULL
;

127 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


128 
√tif
->
lo›_˙t_cuºít
 = 0;

131 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

134 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

135  
NULL
;

139 
√tif
->
√xt
 = 
√tif_li°
;

140 
√tif_li°
 = 
√tif
;

141 
	`¢mp_öc_iÊi°
();

143 #i‡
LWIP_IGMP


145 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

146 
	`igmp_°¨t
–
√tif
);

150 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

151 
√tif
->
«me
[0],Çetif->name[1]));

152 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

153 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

154 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

155 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

156 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

157 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

158  
√tif
;

159 
	}
}

171 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

172 
ù_addr
 *
gw
)

174 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

175 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

176 
	`√tif_£t_gw
(
√tif
, 
gw
);

177 
	}
}

184 
	$√tif_ªmove
(
√tif
 *Çetif)

186 i‡–
√tif
 =
NULL
 ) ;

188 #i‡
LWIP_IGMP


190 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

191 
	`igmp_°›
–
√tif
);

195 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

198 i‡(
√tif_li°
 =
√tif
) {

199 
√tif_li°
 = 
√tif
->
√xt
;

200 
	`¢mp_dec_iÊi°
();

204 
√tif
 * 
tmpNëif
;

205 
tmpNëif
 = 
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

206 i‡(
tmpNëif
->
√xt
 =
√tif
) {

207 
tmpNëif
->
√xt
 = 
√tif
->next;

208 
	`¢mp_dec_iÊi°
();

212 i‡(
tmpNëif
 =
NULL
)

216 i‡(
√tif_deÁu…
 =
√tif
)

218 
	`√tif_£t_deÁu…
(
NULL
);

219 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

220 
	}
}

228 
√tif
 *

229 
	$√tif_föd
(*
«me
)

231 
√tif
 *netif;

232 
u8_t
 
num
;

234 i‡(
«me
 =
NULL
) {

235  
NULL
;

238 
num
 = 
«me
[2] - '0';

240 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

241 i‡(
num
 =
√tif
->num &&

242 
«me
[0] =
√tif
->name[0] &&

243 
«me
[1] =
√tif
->name[1]) {

244 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

245  
√tif
;

248 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

249  
NULL
;

250 
	}
}

262 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

266 #i‡
LWIP_TCP


267 
t˝_pcb
 *
pcb
;

268 
t˝_pcb_li°í
 *
Õcb
;

271 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0)

274 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("netif_set_ipaddr:Çetifáddress being changed\n"));

275 
pcb
 = 
t˝_a˘ive_pcbs
;

276 
pcb
 !
NULL
) {

278 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

280 
t˝_pcb
 *
√xt
 = 
pcb
->next;

281 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

282 
	`t˝_ab‹t
(
pcb
);

283 
pcb
 = 
√xt
;

285 
pcb
 =Öcb->
√xt
;

288 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

290 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

291 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

294 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

299 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

300 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

302 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

303 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

304 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

306 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

307 
√tif
->
«me
[0],Çetif->name[1],

308 
	`ù4_addr1
(&
√tif
->
ù_addr
),

309 
	`ù4_addr2
(&
√tif
->
ù_addr
),

310 
	`ù4_addr3
(&
√tif
->
ù_addr
),

311 
	`ù4_addr4
(&
√tif
->
ù_addr
)));

312 
	}
}

323 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
)

325 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

326 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

327 
√tif
->
«me
[0],Çetif->name[1],

328 
	`ù4_addr1
(&
√tif
->
gw
),

329 
	`ù4_addr2
(&
√tif
->
gw
),

330 
	`ù4_addr3
(&
√tif
->
gw
),

331 
	`ù4_addr4
(&
√tif
->
gw
)));

332 
	}
}

344 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
)

346 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

348 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

349 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

350 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

351 
√tif
->
«me
[0],Çetif->name[1],

352 
	`ù4_addr1
(&
√tif
->
√tmask
),

353 
	`ù4_addr2
(&
√tif
->
√tmask
),

354 
	`ù4_addr3
(&
√tif
->
√tmask
),

355 
	`ù4_addr4
(&
√tif
->
√tmask
)));

356 
	}
}

365 
	$√tif_£t_deÁu…
(
√tif
 *netif)

367 i‡(
√tif
 =
NULL
)

370 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

375 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

377 
√tif_deÁu…
 = 
√tif
;

378 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

379 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

380 
	}
}

391 
	$√tif_£t_up
(
√tif
 *netif)

393 i‡–!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )) {

394 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

396 #i‡
LWIP_SNMP


397 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

400 
	`NETIF_LINK_CALLBACK
(
√tif
);

401 
	`NETIF_STATUS_CALLBACK
(
√tif
);

403 #i‡
LWIP_ARP


405 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

406 
	`ëh¨p_gøtuôous
(
√tif
);

411 
	}
}

421 
	$√tif_£t_down
(
√tif
 *netif)

423 i‡–
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )

425 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

426 #i‡
LWIP_SNMP


427 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

430 
	`NETIF_LINK_CALLBACK
(
√tif
);

431 
	`NETIF_STATUS_CALLBACK
(
√tif
);

433 
	}
}

438 
u8_t
 
	$√tif_is_up
(
√tif
 *netif)

440  (
√tif
->
Êags
 & 
NETIF_FLAG_UP
)?1:0;

441 
	}
}

443 #i‡
LWIP_NETIF_STATUS_CALLBACK


447 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif ))

449 i‡–
√tif
 )

450 
√tif
->
°©us_ˇŒback
 = status_callback;

451 
	}
}

454 #i‡
LWIP_NETIF_LINK_CALLBACK


458 
	$√tif_£t_lök_up
(
√tif
 *netif )

460 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

462 #i‡
LWIP_ARP


464 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

465 
	`ëh¨p_gøtuôous
(
√tif
);

469 #i‡
LWIP_IGMP


471 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

472 
	`igmp_ªp‹t_groups
–
√tif
);

476 
	`NETIF_LINK_CALLBACK
(
√tif
);

477 
	}
}

482 
	$√tif_£t_lök_down
(
√tif
 *netif )

484 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

485 
	`NETIF_LINK_CALLBACK
(
√tif
);

486 
	}
}

491 
u8_t
 
	$√tif_is_lök_up
(
√tif
 *netif)

493  (
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) ? 1 : 0;

494 
	}
}

499 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif ))

501 i‡(
√tif
) {

502 
√tif
->
lök_ˇŒback
 =Üink_callback;

504 
	}
}

507 #i‡
ENABLE_LOOPBACK


522 
îr_t


523 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

524 
ù_addr
 *
ùaddr
)

526 
pbuf
 *
r
;

527 
îr_t
 
îr
;

528 
pbuf
 *
œ°
;

529 #i‡
LWIP_LOOPBACK_MAX_PBUFS


530 
u8_t
 
˛í
 = 0;

532 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

533 
	`LWIP_UNUSED_ARG
(
ùaddr
);

536 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

537 i‡(
r
 =
NULL
) {

538  
ERR_MEM
;

540 #i‡
LWIP_LOOPBACK_MAX_PBUFS


541 
˛í
 = 
	`pbuf_˛í
(
r
);

543 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

544 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

545 
	`pbuf_‰ì
(
r
);

546 
r
 = 
NULL
;

547  
ERR_MEM
;

549 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

553 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

554 
	`pbuf_‰ì
(
r
);

555 
r
 = 
NULL
;

556  
îr
;

563 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

565 
	`SYS_ARCH_PROTECT
(
Àv
);

566 if(
√tif
->
lo›_fú°
 !
NULL
) {

567 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

568 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

569 
√tif
->
lo›_œ°
 = 
œ°
;

571 
√tif
->
lo›_fú°
 = 
r
;

572 
√tif
->
lo›_œ°
 = 
œ°
;

574 
	`SYS_ARCH_UNPROTECT
(
Àv
);

576 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


578 
	`t˝ù_ˇŒback
(((*)(*))(
√tif_pﬁl
), 
√tif
);

581  
ERR_OK
;

582 
	}
}

591 
	$√tif_pﬁl
(
√tif
 *netif)

593 
pbuf
 *
ö
;

594 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

598 
	`SYS_ARCH_PROTECT
(
Àv
);

599 
ö
 = 
√tif
->
lo›_fú°
;

600 if(
ö
 !
NULL
) {

601 
pbuf
 *
ö_íd
 = 
ö
;

602 #i‡
LWIP_LOOPBACK_MAX_PBUFS


603 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

605 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

606 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

607 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

609 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

610 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

611 
ö_íd
 = in_íd->
√xt
;

614 if(
ö_íd
 =
√tif
->
lo›_œ°
) {

616 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

619 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

620 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

623 
ö_íd
->
√xt
 = 
NULL
;

625 
	`SYS_ARCH_UNPROTECT
(
Àv
);

627 if(
ö
 !
NULL
) {

629 if(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

630 
	`pbuf_‰ì
(
ö
);

633 
ö
 = 
NULL
;

636 } 
√tif
->
lo›_fú°
 !
NULL
);

637 
	}
}

639 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


644 
	$√tif_pﬁl_Æl
()

646 
√tif
 *√ti‡
√tif_li°
;

648 
√tif
 !
NULL
) {

649 
	`√tif_pﬁl
(
√tif
);

651 
√tif
 =Çëif->
√xt
;

653 
	}
}

	@core/pbuf.c

64 
	~"lwù/›t.h
"

66 
	~"lwù/°©s.h
"

67 
	~"lwù/def.h
"

68 
	~"lwù/mem.h
"

69 
	~"lwù/memp.h
"

70 
	~"lwù/pbuf.h
"

71 
	~"lwù/sys.h
"

72 
	~"¨ch/≥rf.h
"

73 #i‡
TCP_QUEUE_OOSEQ


74 
	~"lwù/t˝.h
"

77 
	~<°rög.h
>

79 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

82 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

84 #i‡
TCP_QUEUE_OOSEQ


85 
	#ALLOC_POOL_PBUF
(
p
Ëdÿ{ (pË
	`Æloc_poﬁ_pbuf
(); } 0)

	)

87 
	#ALLOC_POOL_PBUF
(
p
Ëdÿ{ (pË
	`memp_mÆloc
(
MEMP_PBUF_POOL
); } 0)

	)

91 #i‡
TCP_QUEUE_OOSEQ


99 
pbuf
 *

100 
	$Æloc_poﬁ_pbuf
()

102 
t˝_pcb
 *
pcb
;

103 
pbuf
 *
p
;

105 
ªåy
:

106 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

107 i‡(
NULL
 =
p
) {

108 
pcb
=
t˝_a˘ive_pcbs
; 
NULL
 !pcb;Öcb =Öcb->
√xt
) {

109 i‡(
NULL
 !
pcb
->
oo£q
) {

110 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

111 
pcb
->
oo£q
 = 
NULL
;

112 
ªåy
;

116  
p
;

117 
	}
}

151 
pbuf
 *

152 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
)

154 
pbuf
 *
p
, *
q
, *
r
;

155 
u16_t
 
off£t
;

156 
s32_t
 
ªm_Àn
;

157 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

160 
off£t
 = 0;

161 
œyî
) {

162 
PBUF_TRANSPORT
:

164 
off£t
 +
PBUF_TRANSPORT_HLEN
;

166 
PBUF_IP
:

168 
off£t
 +
PBUF_IP_HLEN
;

170 
PBUF_LINK
:

172 
off£t
 +
PBUF_LINK_HLEN
;

174 
PBUF_RAW
:

177 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

178  
NULL
;

181 
ty≥
) {

182 
PBUF_POOL
:

184 
	`ALLOC_POOL_PBUF
(
p
);

185 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

186 i‡(
p
 =
NULL
) {

187  
NULL
;

189 
p
->
ty≥
 =Åype;

190 
p
->
√xt
 = 
NULL
;

193 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

194 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

195 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

197 
p
->
tŸ_Àn
 = 
Àngth
;

199 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

200 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

201 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

202 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

203 
	`LWIP_ASSERT
("PBUF_POOL_BUFSIZE must be biggerÅhan MEM_ALIGNMENT",

204 (
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
)) > 0 );

206 
p
->
ªf
 = 1;

211 
r
 = 
p
;

213 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

215 
ªm_Àn
 > 0) {

216 
	`ALLOC_POOL_PBUF
(
q
);

217 i‡(
q
 =
NULL
) {

219 
	`pbuf_‰ì
(
p
);

221  
NULL
;

223 
q
->
ty≥
 =Åype;

224 
q
->
Êags
 = 0;

225 
q
->
√xt
 = 
NULL
;

227 
r
->
√xt
 = 
q
;

229 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

230 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

232 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

233 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

234 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

235 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

236 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

237 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

238 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

239 
q
->
ªf
 = 1;

241 
ªm_Àn
 -
q
->
Àn
;

243 
r
 = 
q
;

249 
PBUF_RAM
:

251 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

252 i‡(
p
 =
NULL
) {

253  
NULL
;

256 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

257 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

258 
p
->
√xt
 = 
NULL
;

259 
p
->
ty≥
 =Åype;

261 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

262 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

265 
PBUF_ROM
:

267 
PBUF_REF
:

269 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF
);

270 i‡(
p
 =
NULL
) {

271 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_alloc: CouldÇotállocate MEMP_PBUF for PBUF_%s.\n",

272 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

273  
NULL
;

276 
p
->
∑ylﬂd
 = 
NULL
;

277 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

278 
p
->
√xt
 = 
NULL
;

279 
p
->
ty≥
 =Åype;

282 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

283  
NULL
;

286 
p
->
ªf
 = 1;

288 
p
->
Êags
 = 0;

289 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

290  
p
;

291 
	}
}

310 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

312 
pbuf
 *
q
;

313 
u16_t
 
ªm_Àn
;

314 
s32_t
 
grow
;

316 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

317 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

318 
p
->
ty≥
 =
PBUF_ROM
 ||

319 
p
->
ty≥
 =
PBUF_RAM
 ||

320 
p
->
ty≥
 =
PBUF_REF
);

323 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

330 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

333 
ªm_Àn
 = 
√w_Àn
;

334 
q
 = 
p
;

336 
ªm_Àn
 > 
q
->
Àn
) {

338 
ªm_Àn
 -
q
->
Àn
;

340 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

341 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

343 
q
 = q->
√xt
;

344 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

351 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

353 
q
 = 
	`mem_ªÆloc
(q, (
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)q + 
ªm_Àn
);

354 
	`LWIP_ASSERT
("mem_ªÆlo¯givêq =NULL", 
q
 !
NULL
);

357 
q
->
Àn
 = 
ªm_Àn
;

358 
q
->
tŸ_Àn
 = q->
Àn
;

361 i‡(
q
->
√xt
 !
NULL
) {

363 
	`pbuf_‰ì
(
q
->
√xt
);

366 
q
->
√xt
 = 
NULL
;

368 
	}
}

390 
u8_t


391 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

393 
u16_t
 
ty≥
;

394 *
∑ylﬂd
;

395 
u16_t
 
ö¸emít_magnôude
;

397 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

398 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
))

401 i‡(
hódî_size_ö¸emít
 < 0){

402 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

404 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

406 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

411 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

412 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
);

414 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

415 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

419 
ty≥
 = 
p
->type;

421 
∑ylﬂd
 = 
p
->payload;

424 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

426 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

428 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

429 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_header: failedás %p < %p (notÉnough space forÇew header size)\n",

430 (*)
p
->
∑ylﬂd
,

431 (*)(
p
 + 1)));\

433 
p
->
∑ylﬂd
 =Öayload;

438 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

440 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

442 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

451 
	`LWIP_ASSERT
("badÖbufÅype", 0);

455 
p
->
Àn
 +
hódî_size_ö¸emít
;

456 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

458 
	`LWIP_DEBUGF
(
PBUF_DEBUG
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

459 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

462 
	}
}

497 
u8_t


498 
	$pbuf_‰ì
(
pbuf
 *
p
)

500 
u16_t
 
ty≥
;

501 
pbuf
 *
q
;

502 
u8_t
 
cou¡
;

504 i‡(
p
 =
NULL
) {

505 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

507 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_free(p == NULL) was called.\n"));

510 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_‰ì(%p)\n", (*)
p
));

512 
PERF_START
;

514 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

515 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

516 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
);

518 
cou¡
 = 0;

521 
p
 !
NULL
) {

522 
u16_t
 
ªf
;

523 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

527 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

529 
	`LWIP_ASSERT
("pbuf_‰ì:Ö->ª‡> 0", 
p
->
ªf
 > 0);

531 
ªf
 = --(
p
->ref);

532 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

534 i‡(
ªf
 == 0) {

536 
q
 = 
p
->
√xt
;

537 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

538 
ty≥
 = 
p
->type;

540 i‡(
ty≥
 =
PBUF_POOL
) {

541 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
);

543 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

544 
	`memp_‰ì
(
MEMP_PBUF
, 
p
);

547 
	`mem_‰ì
(
p
);

549 
cou¡
++;

551 
p
 = 
q
;

555 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

557 
p
 = 
NULL
;

560 
	`PERF_STOP
("pbuf_free");

562  
cou¡
;

563 
	}
}

572 
u8_t


573 
	$pbuf_˛í
(
pbuf
 *
p
)

575 
u8_t
 
Àn
;

577 
Àn
 = 0;

578 
p
 !
NULL
) {

579 ++
Àn
;

580 
p
 =Ö->
√xt
;

582  
Àn
;

583 
	}
}

592 
	$pbuf_ªf
(
pbuf
 *
p
)

594 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

596 i‡(
p
 !
NULL
) {

597 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

598 ++(
p
->
ªf
);

599 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

601 
	}
}

614 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

616 
pbuf
 *
p
;

618 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

619 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

622 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

624 
p
->
tŸ_Àn
 +
t
->tot_len;

627 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

628 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

630 
p
->
tŸ_Àn
 +
t
->tot_len;

632 
p
->
√xt
 = 
t
;

636 
	}
}

655 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

657 
	`pbuf_ˇt
(
h
, 
t
);

659 
	`pbuf_ªf
(
t
);

660 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_FRESH
 | 2, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

661 
	}
}

671 
pbuf
 *

672 
	$pbuf_dechaö
(
pbuf
 *
p
)

674 
pbuf
 *
q
;

675 
u8_t
 
èû_g⁄e
 = 1;

677 
q
 = 
p
->
√xt
;

679 i‡(
q
 !
NULL
) {

681 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

683 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

685 
p
->
√xt
 = 
NULL
;

687 
p
->
tŸ_Àn
 =Ö->
Àn
;

689 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

690 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
);

691 i‡(
èû_g⁄e
 > 0) {

692 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
,

693 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

698 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

699  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

700 
	}
}

720 
îr_t


721 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

723 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

725 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_copy(%p, %p)\n",

726 (*)
p_to
, (*)
p_‰om
));

729 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

730 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

735 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

737 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

739 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

742 
Àn
 = 
p_to
->À¿- 
off£t_to
;

744 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

745 
off£t_to
 +
Àn
;

746 
off£t_‰om
 +
Àn
;

747 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

748 i‡(
off£t_to
 =
p_to
->
Àn
) {

750 
off£t_to
 = 0;

751 
p_to
 =Ö_to->
√xt
;

753 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

754 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

756 
off£t_‰om
 = 0;

757 
p_‰om
 =Ö_‰om->
√xt
;

760 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

762 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

763 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

765 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

767 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

768 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

770 } 
p_‰om
);

771 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("pbuf_copy:Énd of chainÑeached.\n"));

772  
ERR_OK
;

773 
	}
}

786 
u16_t


787 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

789 
pbuf
 *
p
;

790 
u16_t
 
À·
;

791 
u16_t
 
buf_c›y_Àn
;

792 
u16_t
 
c›õd_tŸÆ
 = 0;

794 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

795 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

797 
À·
 = 0;

799 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

804 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

805 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

807 
off£t
 -
p
->
Àn
;

810 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

811 i‡(
buf_c›y_Àn
 > 
Àn
)

812 
buf_c›y_Àn
 = 
Àn
;

814 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

815 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

816 
À·
 +
buf_c›y_Àn
;

817 
Àn
 -
buf_c›y_Àn
;

818 
off£t
 = 0;

821  
c›õd_tŸÆ
;

822 
	}
}

834 
îr_t


835 
	$pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
)

837 
pbuf
 *
p
;

838 
u16_t
 
buf_c›y_Àn
;

839 
u16_t
 
tŸÆ_c›y_Àn
 = 
Àn
;

840 
u16_t
 
c›õd_tŸÆ
 = 0;

842 
	`LWIP_ERROR
("pbuf_èke: invÆid buf", (
buf
 !
NULL
),  0;);

843 
	`LWIP_ERROR
("pbuf_èke: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

845 i‡((
buf
 =
NULL
Ë|| (
d©≠å
 =NULLË|| (buf->
tŸ_Àn
 < 
Àn
)) {

846  
ERR_ARG
;

850 
p
 = 
buf
; 
tŸÆ_c›y_Àn
 !0;Ö =Ö->
√xt
) {

851 
	`LWIP_ASSERT
("pbuf_èke: invÆidÖbuf", 
p
 !
NULL
);

852 
buf_c›y_Àn
 = 
tŸÆ_c›y_Àn
;

853 i‡(
buf_c›y_Àn
 > 
p
->
Àn
) {

855 
buf_c›y_Àn
 = 
p
->
Àn
;

858 
	`MEMCPY
(
p
->
∑ylﬂd
, &((*)
d©≠å
)[
c›õd_tŸÆ
], 
buf_c›y_Àn
);

859 
tŸÆ_c›y_Àn
 -
buf_c›y_Àn
;

860 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

862 
	`LWIP_ASSERT
("didÇŸ c›yáŒ d©a", 
tŸÆ_c›y_Àn
 =0 && 
c›õd_tŸÆ
 =
Àn
);

863  
ERR_OK
;

864 
	}
}

878 
pbuf
*

879 
	$pbuf_cﬂÀs˚
(
pbuf
 *
p
, 
pbuf_œyî
 
œyî
)

881 
pbuf
 *
q
;

882 
îr_t
 
îr
;

883 i‡(
p
->
√xt
 =
NULL
) {

884  
p
;

886 
q
 = 
	`pbuf_Æloc
(
œyî
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

887 i‡(
q
 =
NULL
) {

889  
p
;

891 
îr
 = 
	`pbuf_c›y
(
q
, 
p
);

892 
	`LWIP_ASSERT
("pbuf_c›y faûed", 
îr
 =
ERR_OK
);

893 
	`pbuf_‰ì
(
p
);

894  
q
;

895 
	}
}

	@core/raw.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_RAW


45 
	~"lwù/def.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/ù_addr.h
"

49 
	~"lwù/√tif.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

53 
	~"¨ch/≥rf.h
"

55 
	~<°rög.h
>

58 
øw_pcb
 *
	gøw_pcbs
;

77 
u8_t


78 
	$øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
øw_pcb
 *
pcb
, *
¥ev
;

81 
ù_hdr
 *
ùhdr
;

82 
s16_t
 
¥Ÿo
;

83 
u8_t
 
óãn
 = 0;

85 
	`LWIP_UNUSED_ARG
(
öp
);

87 
ùhdr
 = 
p
->
∑ylﬂd
;

88 
¥Ÿo
 = 
	`IPH_PROTO
(
ùhdr
);

90 
¥ev
 = 
NULL
;

91 
pcb
 = 
øw_pcbs
;

94 (
óãn
 =0Ë&& (
pcb
 !
NULL
)) {

95 i‡(
pcb
->
¥Ÿocﬁ
 =
¥Ÿo
) {

96 #i‡
IP_SOF_BROADCAST_RECV


98 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë|| !
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
))

102 i‡(
pcb
->
ªcv
 !
NULL
) {

104 i‡(
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
)) != 0) {

106 
p
 = 
NULL
;

107 
óãn
 = 1;

108 i‡(
¥ev
 !
NULL
) {

111 
¥ev
->
√xt
 = 
pcb
->next;

112 
pcb
->
√xt
 = 
øw_pcbs
;

113 
øw_pcbs
 = 
pcb
;

121 
¥ev
 = 
pcb
;

122 
pcb
 =Öcb->
√xt
;

124  
óãn
;

125 
	}
}

141 
îr_t


142 
	$øw_böd
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

144 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

145  
ERR_OK
;

146 
	}
}

161 
îr_t


162 
	$øw_c⁄√˘
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

164 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

165  
ERR_OK
;

166 
	}
}

183 
øw_ªcv
(
øw_pcb
 *
pcb
,

184 
	$u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
upcb
, 
pbuf
 *
p
,

185 
ù_addr
 *
addr
),

186 *
ªcv_¨g
)

189 
pcb
->
ªcv
 =Ñecv;

190 
pcb
->
ªcv_¨g
 =Ñecv_arg;

191 
	}
}

205 
îr_t


206 
	$øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

208 
îr_t
 
îr
;

209 
√tif
 *netif;

210 
ù_addr
 *
§c_ù
;

211 
pbuf
 *
q
;

213 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_sendto\n"));

216 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

218 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 0, 
PBUF_RAM
);

220 i‡(
q
 =
NULL
) {

221 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("raw_sendto: couldÇotállocate header\n"));

222  
ERR_MEM
;

225 
	`pbuf_chaö
(
q
, 
p
);

227 
	`LWIP_DEBUGF
(
RAW_DEBUG
, ("øw_£ndto:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

230 
q
 = 
p
;

231 if(
	`pbuf_hódî
(
q
, -
IP_HLEN
)) {

232 
	`LWIP_ASSERT
("Can'tÑestore header we justÑemoved!", 0);

233  
ERR_MEM
;

237 i‡((
√tif
 = 
	`ù_rouã
(
ùaddr
)Ë=
NULL
) {

238 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: NÿrouãÅÿ0x%"
X32_F
"\n", 
ùaddr
->
addr
));

240 i‡(
q
 !
p
) {

241 
	`pbuf_‰ì
(
q
);

243  
ERR_RTE
;

246 #i‡
IP_SOF_BROADCAST


248 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ) {

249 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

251 i‡(
q
 !
p
) {

252 
	`pbuf_‰ì
(
q
);

254  
ERR_VAL
;

258 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

260 
§c_ù
 = &(
√tif
->
ù_addr
);

263 
§c_ù
 = &(
pcb
->
loˇl_ù
);

266 #i‡
LWIP_NETIF_HWADDRHINT


267 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

269 
îr
 = 
	`ù_ouçut_if
 (
q
, 
§c_ù
, 
ùaddr
, 
pcb
->
âl
,Öcb->
tos
,Öcb->
¥Ÿocﬁ
, 
√tif
);

270 #i‡
LWIP_NETIF_HWADDRHINT


271 
√tif
->
addr_höt
 = 
NULL
;

275 i‡(
q
 !
p
) {

277 
	`pbuf_‰ì
(
q
);

279  
îr
;

280 
	}
}

289 
îr_t


290 
	$øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
)

292  
	`øw_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
);

293 
	}
}

304 
	$øw_ªmove
(
øw_pcb
 *
pcb
)

306 
øw_pcb
 *
pcb2
;

308 i‡(
øw_pcbs
 =
pcb
) {

310 
øw_pcbs
 =Ñaw_pcbs->
√xt
;

313 
pcb2
 = 
øw_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

315 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

317 
pcb2
->
√xt
 = 
pcb
->next;

321 
	`memp_‰ì
(
MEMP_RAW_PCB
, 
pcb
);

322 
	}
}

334 
øw_pcb
 *

335 
	$øw_√w
(
u8_t
 
¥Ÿo
) {

336 
øw_pcb
 *
pcb
;

338 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_new\n"));

340 
pcb
 = 
	`memp_mÆloc
(
MEMP_RAW_PCB
);

342 i‡(
pcb
 !
NULL
) {

344 
	`mem£t
(
pcb
, 0, (
øw_pcb
));

345 
pcb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

346 
pcb
->
âl
 = 
RAW_TTL
;

347 
pcb
->
√xt
 = 
øw_pcbs
;

348 
øw_pcbs
 = 
pcb
;

350  
pcb
;

351 
	}
}

	@core/snmp/asn1_dec.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

51 
îr_t


52 
	$¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
)

54 
u16_t
 
∂í
, 
ba£
;

55 
u8_t
 *
msg_±r
;

57 
∂í
 = 0;

58 
p
 !
NULL
)

60 
ba£
 = 
∂í
;

61 
∂í
 +
p
->
Àn
;

62 i‡(
ofs
 < 
∂í
)

64 
msg_±r
 = 
p
->
∑ylﬂd
;

65 
msg_±r
 +
ofs
 - 
ba£
;

66 *
ty≥
 = *
msg_±r
;

67  
ERR_OK
;

69 
p
 =Ö->
√xt
;

72  
ERR_ARG
;

73 
	}
}

84 
îr_t


85 
	$¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
)

87 
u16_t
 
∂í
, 
ba£
;

88 
u8_t
 *
msg_±r
;

90 
∂í
 = 0;

91 
p
 !
NULL
)

93 
ba£
 = 
∂í
;

94 
∂í
 +
p
->
Àn
;

95 i‡(
ofs
 < 
∂í
)

97 
msg_±r
 = 
p
->
∑ylﬂd
;

98 
msg_±r
 +
ofs
 - 
ba£
;

100 i‡(*
msg_±r
 < 0x80)

103 *
o˘ës_u£d
 = 1;

104 *
Àngth
 = *
msg_±r
;

105  
ERR_OK
;

107 i‡(*
msg_±r
 == 0x80)

110 
u8_t
 
zîos
;

111 
u8_t
 
i
;

113 *
Àngth
 = 0;

114 
zîos
 = 0;

115 
zîos
 != 2)

117 
i
 = 2;

118 
i
 > 0)

120 
i
--;

121 (*
Àngth
) += 1;

122 
ofs
 += 1;

123 i‡(
ofs
 >
∂í
)

126 
p
 =Ö->
√xt
;

127 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

128 
msg_±r
 = 
p
->
∑ylﬂd
;

129 
∂í
 +
p
->
Àn
;

134 
msg_±r
++;

136 i‡(*
msg_±r
 == 0)

138 
zîos
++;

139 i‡(
zîos
 == 2)

142 
i
 = 0;

147 
zîos
 = 0;

151 *
o˘ës_u£d
 = 1;

152  
ERR_OK
;

154 i‡(*
msg_±r
 == 0x81)

157 
ofs
 += 1;

158 i‡(
ofs
 >
∂í
)

161 
p
 =Ö->
√xt
;

162 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

163 
msg_±r
 = 
p
->
∑ylﬂd
;

168 
msg_±r
++;

170 *
Àngth
 = *
msg_±r
;

171 *
o˘ës_u£d
 = 2;

172  
ERR_OK
;

174 i‡(*
msg_±r
 == 0x82)

176 
u8_t
 
i
;

179 
i
 = 2;

180 
i
 > 0)

182 
i
--;

183 
ofs
 += 1;

184 i‡(
ofs
 >
∂í
)

187 
p
 =Ö->
√xt
;

188 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

189 
msg_±r
 = 
p
->
∑ylﬂd
;

190 
∂í
 +
p
->
Àn
;

195 
msg_±r
++;

197 i‡(
i
 == 0)

200 *
Àngth
 |*
msg_±r
;

205 *
Àngth
 = (*
msg_±r
) << 8;

208 *
o˘ës_u£d
 = 3;

209  
ERR_OK
;

215 *
o˘ës_u£d
 = 1 + ((*
msg_±r
) & 0x7f);

216  
ERR_ARG
;

219 
p
 =Ö->
√xt
;

223  
ERR_ARG
;

224 
	}
}

239 
îr_t


240 
	$¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
)

242 
u16_t
 
∂í
, 
ba£
;

243 
u8_t
 *
msg_±r
;

245 
∂í
 = 0;

246 
p
 !
NULL
)

248 
ba£
 = 
∂í
;

249 
∂í
 +
p
->
Àn
;

250 i‡(
ofs
 < 
∂í
)

252 
msg_±r
 = 
p
->
∑ylﬂd
;

253 
msg_±r
 +
ofs
 - 
ba£
;

254 i‡((
Àn
 > 0) && (len < 6))

257 *
vÆue
 = 0;

258 i‡(*
msg_±r
 & 0x80)

261  
ERR_ARG
;

266 i‡((
Àn
 > 1Ë&& (*
msg_±r
 == 0))

269 
Àn
--;

270 
ofs
 += 1;

271 i‡(
ofs
 >
∂í
)

274 
p
 =Ö->
√xt
;

275 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

276 
msg_±r
 = 
p
->
∑ylﬂd
;

277 
∂í
 +
p
->
Àn
;

282 
msg_±r
++;

287 
Àn
 > 1)

289 
Àn
--;

290 *
vÆue
 |*
msg_±r
;

291 *
vÆue
 <<= 8;

292 
ofs
 += 1;

293 i‡(
ofs
 >
∂í
)

296 
p
 =Ö->
√xt
;

297 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

298 
msg_±r
 = 
p
->
∑ylﬂd
;

299 
∂í
 +
p
->
Àn
;

304 
msg_±r
++;

307 *
vÆue
 |*
msg_±r
;

308  
ERR_OK
;

312  
ERR_ARG
;

315 
p
 =Ö->
√xt
;

318  
ERR_ARG
;

319 
	}
}

332 
îr_t


333 
	$¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
)

335 
u16_t
 
∂í
, 
ba£
;

336 
u8_t
 *
msg_±r
;

337 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


338 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
;

340 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


341 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
 + (
s32_t
) - 1;

343 
u8_t
 
sign
;

345 
∂í
 = 0;

346 
p
 !
NULL
)

348 
ba£
 = 
∂í
;

349 
∂í
 +
p
->
Àn
;

350 i‡(
ofs
 < 
∂í
)

352 
msg_±r
 = 
p
->
∑ylﬂd
;

353 
msg_±r
 +
ofs
 - 
ba£
;

354 i‡((
Àn
 > 0) && (len < 5))

356 i‡(*
msg_±r
 & 0x80)

359 *
vÆue
 = -1;

360 
sign
 = 1;

365 *
vÆue
 = 0;

366 
sign
 = 0;

369 
Àn
 > 1)

371 
Àn
--;

372 i‡(
sign
)

374 *
lsb_±r
 &*
msg_±r
;

375 *
vÆue
 <<= 8;

376 *
lsb_±r
 |= 255;

380 *
lsb_±r
 |*
msg_±r
;

381 *
vÆue
 <<= 8;

383 
ofs
 += 1;

384 i‡(
ofs
 >
∂í
)

387 
p
 =Ö->
√xt
;

388 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

389 
msg_±r
 = 
p
->
∑ylﬂd
;

390 
∂í
 +
p
->
Àn
;

395 
msg_±r
++;

398 i‡(
sign
)

400 *
lsb_±r
 &*
msg_±r
;

404 *
lsb_±r
 |*
msg_±r
;

406  
ERR_OK
;

410  
ERR_ARG
;

413 
p
 =Ö->
√xt
;

416  
ERR_ARG
;

417 
	}
}

428 
îr_t


429 
	$¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
)

431 
u16_t
 
∂í
, 
ba£
;

432 
u8_t
 *
msg_±r
;

433 
s32_t
 *
oid_±r
;

435 
∂í
 = 0;

436 
p
 !
NULL
)

438 
ba£
 = 
∂í
;

439 
∂í
 +
p
->
Àn
;

440 i‡(
ofs
 < 
∂í
)

442 
msg_±r
 = 
p
->
∑ylﬂd
;

443 
msg_±r
 +
ofs
 - 
ba£
;

445 
oid
->
Àn
 = 0;

446 
oid_±r
 = &
oid
->
id
[0];

447 i‡(
Àn
 > 0)

450 i‡(*
msg_±r
 == 0x2B)

453 *
oid_±r
 = 1;

454 
oid_±r
++;

455 *
oid_±r
 = 3;

456 
oid_±r
++;

458 i‡(*
msg_±r
 < 40)

460 *
oid_±r
 = 0;

461 
oid_±r
++;

462 *
oid_±r
 = *
msg_±r
;

463 
oid_±r
++;

465 i‡(*
msg_±r
 < 80)

467 *
oid_±r
 = 1;

468 
oid_±r
++;

469 *
oid_±r
 = (*
msg_±r
) - 40;

470 
oid_±r
++;

474 *
oid_±r
 = 2;

475 
oid_±r
++;

476 *
oid_±r
 = (*
msg_±r
) - 80;

477 
oid_±r
++;

479 
oid
->
Àn
 = 2;

485  
ERR_OK
;

487 
Àn
--;

488 i‡(
Àn
 > 0)

490 
ofs
 += 1;

491 i‡(
ofs
 >
∂í
)

494 
p
 =Ö->
√xt
;

495 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

496 
msg_±r
 = 
p
->
∑ylﬂd
;

497 
∂í
 +
p
->
Àn
;

502 
msg_±r
++;

505 (
Àn
 > 0Ë&& (
oid
->À¿< 
LWIP_SNMP_OBJ_ID_LEN
))

508 i‡(*
msg_±r
 & 0x80)

510 
s32_t
 
sub_id
 = 0;

512 (*
msg_±r
 & 0x80Ë&& (
Àn
 > 1))

514 
Àn
--;

515 
sub_id
 = (sub_id << 7Ë+ (*
msg_±r
 & ~0x80);

516 
ofs
 += 1;

517 i‡(
ofs
 >
∂í
)

520 
p
 =Ö->
√xt
;

521 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

522 
msg_±r
 = 
p
->
∑ylﬂd
;

523 
∂í
 +
p
->
Àn
;

528 
msg_±r
++;

531 i‡(!(*
msg_±r
 & 0x80Ë&& (
Àn
 > 0))

534 
Àn
--;

535 
sub_id
 = (sub_id << 7Ë+ *
msg_±r
;

536 *
oid_±r
 = 
sub_id
;

542 
Àn
--;

543 *
oid_±r
 = *
msg_±r
;

545 i‡(
Àn
 > 0)

548 
ofs
 += 1;

549 i‡(
ofs
 >
∂í
)

552 
p
 =Ö->
√xt
;

553 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

554 
msg_±r
 = 
p
->
∑ylﬂd
;

555 
∂í
 +
p
->
Àn
;

560 
msg_±r
++;

563 
oid_±r
++;

564 
oid
->
Àn
++;

566 i‡(
Àn
 == 0)

569  
ERR_OK
;

574  
ERR_ARG
;

578 
p
 =Ö->
√xt
;

581  
ERR_ARG
;

582 
	}
}

595 
îr_t


596 
	$¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

598 
u16_t
 
∂í
, 
ba£
;

599 
u8_t
 *
msg_±r
;

601 i‡(
Àn
 > 0)

603 
∂í
 = 0;

604 
p
 !
NULL
)

606 
ba£
 = 
∂í
;

607 
∂í
 +
p
->
Àn
;

608 i‡(
ofs
 < 
∂í
)

610 
msg_±r
 = 
p
->
∑ylﬂd
;

611 
msg_±r
 +
ofs
 - 
ba£
;

612 i‡(
øw_Àn
 >
Àn
)

614 
Àn
 > 1)

617 
Àn
--;

618 *
øw
 = *
msg_±r
;

619 
øw
++;

620 
ofs
 += 1;

621 i‡(
ofs
 >
∂í
)

624 
p
 =Ö->
√xt
;

625 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

626 
msg_±r
 = 
p
->
∑ylﬂd
;

627 
∂í
 +
p
->
Àn
;

632 
msg_±r
++;

636 *
øw
 = *
msg_±r
;

637  
ERR_OK
;

642  
ERR_ARG
;

645 
p
 =Ö->
√xt
;

648  
ERR_ARG
;

653  
ERR_OK
;

655 
	}
}

	@core/snmp/asn1_enc.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

50 
	$¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
)

52 i‡(
Àngth
 < 0x80U)

54 *
o˘ës_√eded
 = 1;

56 i‡(
Àngth
 < 0x100U)

58 *
o˘ës_√eded
 = 2;

62 *
o˘ës_√eded
 = 3;

64 
	}
}

77 
	$¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

79 i‡(
vÆue
 < 0x80UL)

81 *
o˘ës_√eded
 = 1;

83 i‡(
vÆue
 < 0x8000UL)

85 *
o˘ës_√eded
 = 2;

87 i‡(
vÆue
 < 0x800000UL)

89 *
o˘ës_√eded
 = 3;

91 i‡(
vÆue
 < 0x80000000UL)

93 *
o˘ës_√eded
 = 4;

97 *
o˘ës_√eded
 = 5;

99 
	}
}

110 
	$¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

112 i‡(
vÆue
 < 0)

114 
vÆue
 = ~value;

116 i‡(
vÆue
 < 0x80L)

118 *
o˘ës_√eded
 = 1;

120 i‡(
vÆue
 < 0x8000L)

122 *
o˘ës_√eded
 = 2;

124 i‡(
vÆue
 < 0x800000L)

126 *
o˘ës_√eded
 = 3;

130 *
o˘ës_√eded
 = 4;

132 
	}
}

142 
	$¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
)

144 
s32_t
 
sub_id
;

145 
u8_t
 
˙t
;

147 
˙t
 = 0;

148 i‡(
idít_Àn
 > 1)

151 
˙t
++;

152 
idít_Àn
 -= 2;

153 
idít
 += 2;

155 
idít_Àn
 > 0)

157 
idít_Àn
--;

158 
sub_id
 = *
idít
;

160 
sub_id
 >>= 7;

161 
˙t
++;

162 
sub_id
 > 0)

164 
sub_id
 >>= 7;

165 
˙t
++;

167 
idít
++;

169 *
o˘ës_√eded
 = 
˙t
;

170 
	}
}

180 
îr_t


181 
	$¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
)

183 
u16_t
 
∂í
, 
ba£
;

184 
u8_t
 *
msg_±r
;

186 
∂í
 = 0;

187 
p
 !
NULL
)

189 
ba£
 = 
∂í
;

190 
∂í
 +
p
->
Àn
;

191 i‡(
ofs
 < 
∂í
)

193 
msg_±r
 = 
p
->
∑ylﬂd
;

194 
msg_±r
 +
ofs
 - 
ba£
;

195 *
msg_±r
 = 
ty≥
;

196  
ERR_OK
;

198 
p
 =Ö->
√xt
;

201  
ERR_ARG
;

202 
	}
}

212 
îr_t


213 
	$¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
)

215 
u16_t
 
∂í
, 
ba£
;

216 
u8_t
 *
msg_±r
;

218 
∂í
 = 0;

219 
p
 !
NULL
)

221 
ba£
 = 
∂í
;

222 
∂í
 +
p
->
Àn
;

223 i‡(
ofs
 < 
∂í
)

225 
msg_±r
 = 
p
->
∑ylﬂd
;

226 
msg_±r
 +
ofs
 - 
ba£
;

228 i‡(
Àngth
 < 0x80)

230 *
msg_±r
 = 
Àngth
;

231  
ERR_OK
;

233 i‡(
Àngth
 < 0x100)

235 *
msg_±r
 = 0x81;

236 
ofs
 += 1;

237 i‡(
ofs
 >
∂í
)

240 
p
 =Ö->
√xt
;

241 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

242 
msg_±r
 = 
p
->
∑ylﬂd
;

247 
msg_±r
++;

249 *
msg_±r
 = 
Àngth
;

250  
ERR_OK
;

254 
u8_t
 
i
;

257 *
msg_±r
 = 0x82;

258 
i
 = 2;

259 
i
 > 0)

261 
i
--;

262 
ofs
 += 1;

263 i‡(
ofs
 >
∂í
)

266 
p
 =Ö->
√xt
;

267 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

268 
msg_±r
 = 
p
->
∑ylﬂd
;

269 
∂í
 +
p
->
Àn
;

274 
msg_±r
++;

276 i‡(
i
 == 0)

279 *
msg_±r
 = 
Àngth
;

284 *
msg_±r
 = 
Àngth
 >> 8;

287  
ERR_OK
;

290 
p
 =Ö->
√xt
;

293  
ERR_ARG
;

294 
	}
}

307 
îr_t


308 
	$¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
)

310 
u16_t
 
∂í
, 
ba£
;

311 
u8_t
 *
msg_±r
;

313 
∂í
 = 0;

314 
p
 !
NULL
)

316 
ba£
 = 
∂í
;

317 
∂í
 +
p
->
Àn
;

318 i‡(
ofs
 < 
∂í
)

320 
msg_±r
 = 
p
->
∑ylﬂd
;

321 
msg_±r
 +
ofs
 - 
ba£
;

323 i‡(
o˘ës_√eded
 == 5)

326 
o˘ës_√eded
--;

327 *
msg_±r
 = 0x00;

328 
ofs
 += 1;

329 i‡(
ofs
 >
∂í
)

332 
p
 =Ö->
√xt
;

333 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

334 
msg_±r
 = 
p
->
∑ylﬂd
;

335 
∂í
 +
p
->
Àn
;

340 
msg_±r
++;

343 
o˘ës_√eded
 > 1)

345 
o˘ës_√eded
--;

346 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

347 
ofs
 += 1;

348 i‡(
ofs
 >
∂í
)

351 
p
 =Ö->
√xt
;

352 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

353 
msg_±r
 = 
p
->
∑ylﬂd
;

354 
∂í
 +
p
->
Àn
;

359 
msg_±r
++;

363 *
msg_±r
 = 
vÆue
;

364  
ERR_OK
;

366 
p
 =Ö->
√xt
;

369  
ERR_ARG
;

370 
	}
}

383 
îr_t


384 
	$¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
)

386 
u16_t
 
∂í
, 
ba£
;

387 
u8_t
 *
msg_±r
;

389 
∂í
 = 0;

390 
p
 !
NULL
)

392 
ba£
 = 
∂í
;

393 
∂í
 +
p
->
Àn
;

394 i‡(
ofs
 < 
∂í
)

396 
msg_±r
 = 
p
->
∑ylﬂd
;

397 
msg_±r
 +
ofs
 - 
ba£
;

399 
o˘ës_√eded
 > 1)

401 
o˘ës_√eded
--;

402 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

403 
ofs
 += 1;

404 i‡(
ofs
 >
∂í
)

407 
p
 =Ö->
√xt
;

408 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

409 
msg_±r
 = 
p
->
∑ylﬂd
;

410 
∂í
 +
p
->
Àn
;

415 
msg_±r
++;

419 *
msg_±r
 = 
vÆue
;

420  
ERR_OK
;

422 
p
 =Ö->
√xt
;

425  
ERR_ARG
;

426 
	}
}

437 
îr_t


438 
	$¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

440 
u16_t
 
∂í
, 
ba£
;

441 
u8_t
 *
msg_±r
;

443 
∂í
 = 0;

444 
p
 !
NULL
)

446 
ba£
 = 
∂í
;

447 
∂í
 +
p
->
Àn
;

448 i‡(
ofs
 < 
∂í
)

450 
msg_±r
 = 
p
->
∑ylﬂd
;

451 
msg_±r
 +
ofs
 - 
ba£
;

453 i‡(
idít_Àn
 > 1)

455 i‡((
idít
[0] == 1) && (ident[1] == 3))

458 *
msg_±r
 = 0x2b;

463 *
msg_±r
 = (
idít
[0] * 40) + ident[1];

465 
ofs
 += 1;

466 i‡(
ofs
 >
∂í
)

469 
p
 =Ö->
√xt
;

470 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

471 
msg_±r
 = 
p
->
∑ylﬂd
;

472 
∂í
 +
p
->
Àn
;

477 
msg_±r
++;

479 
idít_Àn
 -= 2;

480 
idít
 += 2;

486  
ERR_ARG
;

488 
idít_Àn
 > 0)

490 
s32_t
 
sub_id
;

491 
u8_t
 
shi·
, 
èû
;

493 
idít_Àn
--;

494 
sub_id
 = *
idít
;

495 
èû
 = 0;

496 
shi·
 = 28;

497 
shi·
 > 0)

499 
u8_t
 
code
;

501 
code
 = 
sub_id
 >> 
shi·
;

502 i‡((
code
 !0Ë|| (
èû
 != 0))

504 
èû
 = 1;

505 *
msg_±r
 = 
code
 | 0x80;

506 
ofs
 += 1;

507 i‡(
ofs
 >
∂í
)

510 
p
 =Ö->
√xt
;

511 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

512 
msg_±r
 = 
p
->
∑ylﬂd
;

513 
∂í
 +
p
->
Àn
;

518 
msg_±r
++;

521 
shi·
 -= 7;

523 *
msg_±r
 = (
u8_t
)
sub_id
 & 0x7F;

524 i‡(
idít_Àn
 > 0)

526 
ofs
 += 1;

527 i‡(
ofs
 >
∂í
)

530 
p
 =Ö->
√xt
;

531 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

532 
msg_±r
 = 
p
->
∑ylﬂd
;

533 
∂í
 +
p
->
Àn
;

538 
msg_±r
++;

542 
idít
++;

544  
ERR_OK
;

546 
p
 =Ö->
√xt
;

549  
ERR_ARG
;

550 
	}
}

561 
îr_t


562 
	$¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
)

564 
u16_t
 
∂í
, 
ba£
;

565 
u8_t
 *
msg_±r
;

567 
∂í
 = 0;

568 
p
 !
NULL
)

570 
ba£
 = 
∂í
;

571 
∂í
 +
p
->
Àn
;

572 i‡(
ofs
 < 
∂í
)

574 
msg_±r
 = 
p
->
∑ylﬂd
;

575 
msg_±r
 +
ofs
 - 
ba£
;

577 
øw_Àn
 > 1)

580 
øw_Àn
--;

581 *
msg_±r
 = *
øw
;

582 
øw
++;

583 
ofs
 += 1;

584 i‡(
ofs
 >
∂í
)

587 
p
 =Ö->
√xt
;

588 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

589 
msg_±r
 = 
p
->
∑ylﬂd
;

590 
∂í
 +
p
->
Àn
;

595 
msg_±r
++;

598 i‡(
øw_Àn
 > 0)

601 *
msg_±r
 = *
øw
;

603  
ERR_OK
;

605 
p
 =Ö->
√xt
;

608  
ERR_ARG
;

609 
	}
}

	@core/snmp/mib2.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/ù.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/t˝.h
"

47 
	~"lwù/udp.h
"

48 
	~"lwù/¢mp_a¢1.h
"

49 
	~"lwù/¢mp_°ru˘s.h
"

50 
	~"√tif/ëh¨p.h
"

65 
	#SNMP_ENTERPRISE_ID
 26381

	)

66 
	#SNMP_SYSOBJID_LEN
 7

	)

67 
	#SNMP_SYSOBJID
 {1, 3, 6, 1, 4, 1, 
SNMP_ENTERPRISE_ID
}

	)

69 #i‚de‡
SNMP_SYSSERVICES


70 
	#SNMP_SYSSERVICES
 ((1 << 6Ë| (1 << 3Ë| ((
IP_FORWARD
Ë<< 2))

	)

73 #i‚de‡
SNMP_GET_SYSUPTIME


74 
	#SNMP_GET_SYSUPTIME
(
sysu±ime
)

	)

77 
sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

78 
sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

79 
u8_t
 
sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

80 
sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

81 
öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

82 
öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

83 
i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

84 
i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

85 #i‡!
SNMP_SAFE_REQUESTS


86 
u8_t
 
i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

87 
i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

89 
©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

90 
©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

91 
ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

92 
ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

93 
u8_t
 
ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

94 
ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

95 
ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

96 
ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

97 
ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

98 
ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

99 
ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

100 
icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

101 
icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

102 #i‡
LWIP_TCP


103 
t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

104 
t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

105 #ifde‡
THIS_SEEMS_UNUSED


106 
t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

107 
t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 
udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

111 
udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 
ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

113 
ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

115 
¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 
u8_t
 
¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

117 
¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

121 c⁄° 
mib_sˇœr_node
 
	g¢mp_sˇœr
 = {

122 &
¢mp_gë_obje˘_def
,

123 &
¢mp_gë_vÆue
,

124 &
¢mp_£t_ã°
,

125 &
¢mp_£t_vÆue
,

126 
MIB_NODE_SC
,

129 c⁄° 
s32_t
 
	g¢mp_ids
[28] = {

133 
mib_node
* c⁄° 
	g¢mp_nodes
[28] = {

134 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

135 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

136 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

137 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

138 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

139 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

140 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

141 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

142 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

143 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

144 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

145 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

146 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

147 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar

149 c⁄° 
mib_¨øy_node
 
	g¢mp
 = {

150 &
nﬁófs_gë_obje˘_def
,

151 &
nﬁófs_gë_vÆue
,

152 &
nﬁófs_£t_ã°
,

153 &
nﬁófs_£t_vÆue
,

154 
MIB_NODE_AR
,

156 
¢mp_ids
,

157 
¢mp_nodes


166 
mib_li°_roŸnode
 
	gudp_roŸ
 = {

167 &
nﬁófs_gë_obje˘_def
,

168 &
nﬁófs_gë_vÆue
,

169 &
nﬁófs_£t_ã°
,

170 &
nﬁófs_£t_vÆue
,

171 
MIB_NODE_LR
,

173 
NULL
,

174 
NULL
,

177 c⁄° 
s32_t
 
	gud≥¡ry_ids
[2] = { 1, 2 };

178 
mib_node
* c⁄° 
	gud≥¡ry_nodes
[2] = {

179 (
mib_node
* c⁄°)&
udp_roŸ
, (mib_node* const)&udp_root,

181 c⁄° 
mib_¨øy_node
 
	gud≥¡ry
 = {

182 &
nﬁófs_gë_obje˘_def
,

183 &
nﬁófs_gë_vÆue
,

184 &
nﬁófs_£t_ã°
,

185 &
nﬁófs_£t_vÆue
,

186 
MIB_NODE_AR
,

188 
ud≥¡ry_ids
,

189 
ud≥¡ry_nodes


192 
s32_t
 
	gud±abÀ_id
 = 1;

193 
mib_node
* 
	gud±abÀ_node
 = (mib_node* c⁄°)&
ud≥¡ry
;

194 
mib_øm_¨øy_node
 
	gud±abÀ
 = {

195 &
nﬁófs_gë_obje˘_def
,

196 &
nﬁófs_gë_vÆue
,

197 &
nﬁófs_£t_ã°
,

198 &
nﬁófs_£t_vÆue
,

199 
MIB_NODE_RA
,

201 &
ud±abÀ_id
,

202 &
ud±abÀ_node


205 c⁄° 
mib_sˇœr_node
 
	gudp_sˇœr
 = {

206 &
udp_gë_obje˘_def
,

207 &
udp_gë_vÆue
,

208 &
nﬁófs_£t_ã°
,

209 &
nﬁófs_£t_vÆue
,

210 
MIB_NODE_SC
,

213 c⁄° 
s32_t
 
	gudp_ids
[5] = { 1, 2, 3, 4, 5 };

214 
mib_node
* c⁄° 
	gudp_nodes
[5] = {

215 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

216 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

217 (
mib_node
* c⁄°)&
ud±abÀ


219 c⁄° 
mib_¨øy_node
 
	gudp
 = {

220 &
nﬁófs_gë_obje˘_def
,

221 &
nﬁófs_gë_vÆue
,

222 &
nﬁófs_£t_ã°
,

223 &
nﬁófs_£t_vÆue
,

224 
MIB_NODE_AR
,

226 
udp_ids
,

227 
udp_nodes


231 #i‡
LWIP_TCP


234 
mib_li°_roŸnode
 
	gt˝c⁄¡ªe_roŸ
 = {

235 &
nﬁófs_gë_obje˘_def
,

236 &
nﬁófs_gë_vÆue
,

237 &
nﬁófs_£t_ã°
,

238 &
nﬁófs_£t_vÆue
,

239 
MIB_NODE_LR
,

241 
NULL
,

242 
NULL
,

245 c⁄° 
s32_t
 
	gt˝c⁄√¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

246 
mib_node
* c⁄° 
	gt˝c⁄√¡ry_nodes
[5] = {

247 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

248 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

249 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ


251 c⁄° 
mib_¨øy_node
 
	gt˝c⁄√¡ry
 = {

252 &
nﬁófs_gë_obje˘_def
,

253 &
nﬁófs_gë_vÆue
,

254 &
nﬁófs_£t_ã°
,

255 &
nﬁófs_£t_vÆue
,

256 
MIB_NODE_AR
,

258 
t˝c⁄√¡ry_ids
,

259 
t˝c⁄√¡ry_nodes


262 
s32_t
 
	gt˝c⁄¡abÀ_id
 = 1;

263 
mib_node
* 
	gt˝c⁄¡abÀ_node
 = (mib_node* c⁄°)&
t˝c⁄√¡ry
;

264 
mib_øm_¨øy_node
 
	gt˝c⁄¡abÀ
 = {

265 &
nﬁófs_gë_obje˘_def
,

266 &
nﬁófs_gë_vÆue
,

267 &
nﬁófs_£t_ã°
,

268 &
nﬁófs_£t_vÆue
,

269 
MIB_NODE_RA
,

273 &
t˝c⁄¡abÀ_id
,

274 &
t˝c⁄¡abÀ_node


277 c⁄° 
mib_sˇœr_node
 
	gt˝_sˇœr
 = {

278 &
t˝_gë_obje˘_def
,

279 &
t˝_gë_vÆue
,

280 &
nﬁófs_£t_ã°
,

281 &
nﬁófs_£t_vÆue
,

282 
MIB_NODE_SC
,

285 c⁄° 
s32_t
 
	gt˝_ids
[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

286 
mib_node
* c⁄° 
	gt˝_nodes
[15] = {

287 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

288 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

289 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

290 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

291 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

292 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

293 (
mib_node
* c⁄°)&
t˝c⁄¡abÀ
, (mib_node* c⁄°)&
t˝_sˇœr
,

294 (
mib_node
* c⁄°)&
t˝_sˇœr


296 c⁄° 
mib_¨øy_node
 
	gt˝
 = {

297 &
nﬁófs_gë_obje˘_def
,

298 &
nﬁófs_gë_vÆue
,

299 &
nﬁófs_£t_ã°
,

300 &
nﬁófs_£t_vÆue
,

301 
MIB_NODE_AR
,

303 
t˝_ids
,

304 
t˝_nodes


309 c⁄° 
mib_sˇœr_node
 
	gicmp_sˇœr
 = {

310 &
icmp_gë_obje˘_def
,

311 &
icmp_gë_vÆue
,

312 &
nﬁófs_£t_ã°
,

313 &
nﬁófs_£t_vÆue
,

314 
MIB_NODE_SC
,

317 c⁄° 
s32_t
 
	gicmp_ids
[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

318 
mib_node
* c⁄° 
	gicmp_nodes
[26] = {

319 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

320 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

321 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

322 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

323 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

324 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

325 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

326 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

327 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

328 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

329 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

330 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

331 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar

333 c⁄° 
mib_¨øy_node
 
	gicmp
 = {

334 &
nﬁófs_gë_obje˘_def
,

335 &
nﬁófs_gë_vÆue
,

336 &
nﬁófs_£t_ã°
,

337 &
nﬁófs_£t_vÆue
,

338 
MIB_NODE_AR
,

340 
icmp_ids
,

341 
icmp_nodes


345 
mib_li°_roŸnode
 
	gù¡omåì_roŸ
 = {

346 &
nﬁófs_gë_obje˘_def
,

347 &
nﬁófs_gë_vÆue
,

348 &
nﬁófs_£t_ã°
,

349 &
nﬁófs_£t_vÆue
,

350 
MIB_NODE_LR
,

352 
NULL
,

353 
NULL
,

356 c⁄° 
s32_t
 
	gù¡omíåy_ids
[4] = { 1, 2, 3, 4 };

357 
mib_node
* c⁄° 
	gù¡omíåy_nodes
[4] = {

358 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root,

359 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root

361 c⁄° 
mib_¨øy_node
 
	gù¡omíåy
 = {

362 &
nﬁófs_gë_obje˘_def
,

363 &
nﬁófs_gë_vÆue
,

364 &
nﬁófs_£t_ã°
,

365 &
nﬁófs_£t_vÆue
,

366 
MIB_NODE_AR
,

368 
ù¡omíåy_ids
,

369 
ù¡omíåy_nodes


372 
s32_t
 
	gù¡omèbÀ_id
 = 1;

373 
mib_node
* 
	gù¡omèbÀ_node
 = (mib_node* c⁄°)&
ù¡omíåy
;

374 
mib_øm_¨øy_node
 
	gù¡omèbÀ
 = {

375 &
nﬁófs_gë_obje˘_def
,

376 &
nﬁófs_gë_vÆue
,

377 &
nﬁófs_£t_ã°
,

378 &
nﬁófs_£t_vÆue
,

379 
MIB_NODE_RA
,

381 &
ù¡omèbÀ_id
,

382 &
ù¡omèbÀ_node


386 
mib_li°_roŸnode
 
	gùπëªe_roŸ
 = {

387 &
nﬁófs_gë_obje˘_def
,

388 &
nﬁófs_gë_vÆue
,

389 &
nﬁófs_£t_ã°
,

390 &
nﬁófs_£t_vÆue
,

391 
MIB_NODE_LR
,

393 
NULL
,

394 
NULL
,

397 c⁄° 
s32_t
 
	gùπì¡ry_ids
[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };

398 
mib_node
* c⁄° 
	gùπì¡ry_nodes
[13] = {

399 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

400 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

401 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

402 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

403 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

404 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

405 (
mib_node
* c⁄°)&
ùπëªe_roŸ


407 c⁄° 
mib_¨øy_node
 
	gùπì¡ry
 = {

408 &
nﬁófs_gë_obje˘_def
,

409 &
nﬁófs_gë_vÆue
,

410 &
nﬁófs_£t_ã°
,

411 &
nﬁófs_£t_vÆue
,

412 
MIB_NODE_AR
,

414 
ùπì¡ry_ids
,

415 
ùπì¡ry_nodes


418 
s32_t
 
	gùπëabÀ_id
 = 1;

419 
mib_node
* 
	gùπëabÀ_node
 = (mib_node* c⁄°)&
ùπì¡ry
;

420 
mib_øm_¨øy_node
 
	gùπëabÀ
 = {

421 &
nﬁófs_gë_obje˘_def
,

422 &
nﬁófs_gë_vÆue
,

423 &
nﬁófs_£t_ã°
,

424 &
nﬁófs_£t_vÆue
,

425 
MIB_NODE_RA
,

427 &
ùπëabÀ_id
,

428 &
ùπëabÀ_node


432 
mib_li°_roŸnode
 
	gùaddπªe_roŸ
 = {

433 &
nﬁófs_gë_obje˘_def
,

434 &
nﬁófs_gë_vÆue
,

435 &
nﬁófs_£t_ã°
,

436 &
nﬁófs_£t_vÆue
,

437 
MIB_NODE_LR
,

439 
NULL
,

440 
NULL
,

443 c⁄° 
s32_t
 
	gùaddª¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

444 
mib_node
* c⁄° 
	gùaddª¡ry_nodes
[5] = {

445 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

446 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

447 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

448 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

449 (
mib_node
* c⁄°)&
ùaddπªe_roŸ


451 c⁄° 
mib_¨øy_node
 
	gùaddª¡ry
 = {

452 &
nﬁófs_gë_obje˘_def
,

453 &
nﬁófs_gë_vÆue
,

454 &
nﬁófs_£t_ã°
,

455 &
nﬁófs_£t_vÆue
,

456 
MIB_NODE_AR
,

458 
ùaddª¡ry_ids
,

459 
ùaddª¡ry_nodes


462 
s32_t
 
	gùaddπabÀ_id
 = 1;

463 
mib_node
* 
	gùaddπabÀ_node
 = (mib_node* c⁄°)&
ùaddª¡ry
;

464 
mib_øm_¨øy_node
 
	gùaddπabÀ
 = {

465 &
nﬁófs_gë_obje˘_def
,

466 &
nﬁófs_gë_vÆue
,

467 &
nﬁófs_£t_ã°
,

468 &
nﬁófs_£t_vÆue
,

469 
MIB_NODE_RA
,

471 &
ùaddπabÀ_id
,

472 &
ùaddπabÀ_node


476 c⁄° 
mib_sˇœr_node
 
	gù_sˇœr
 = {

477 &
ù_gë_obje˘_def
,

478 &
ù_gë_vÆue
,

479 &
ù_£t_ã°
,

480 &
nﬁófs_£t_vÆue
,

481 
MIB_NODE_SC
,

484 c⁄° 
s32_t
 
	gù_ids
[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

485 
mib_node
* c⁄° 
	gù_nodes
[23] = {

486 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

487 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

488 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

489 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

490 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

491 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

492 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

493 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

494 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

495 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* c⁄°)&
ùaddπabÀ
,

496 (
mib_node
* c⁄°)&
ùπëabÀ
, (mib_node* c⁄°)&
ù¡omèbÀ
,

497 (
mib_node
* c⁄°)&
ù_sˇœr


499 c⁄° 
mib_¨øy_node
 
	gmib2_ù
 = {

500 &
nﬁófs_gë_obje˘_def
,

501 &
nﬁófs_gë_vÆue
,

502 &
nﬁófs_£t_ã°
,

503 &
nﬁófs_£t_vÆue
,

504 
MIB_NODE_AR
,

506 
ù_ids
,

507 
ù_nodes


511 
mib_li°_roŸnode
 
	g¨±ªe_roŸ
 = {

512 &
nﬁófs_gë_obje˘_def
,

513 &
nﬁófs_gë_vÆue
,

514 &
nﬁófs_£t_ã°
,

515 &
nﬁófs_£t_vÆue
,

516 
MIB_NODE_LR
,

518 
NULL
,

519 
NULL
,

522 c⁄° 
s32_t
 
	g©íåy_ids
[3] = { 1, 2, 3 };

523 
mib_node
* c⁄° 
	g©íåy_nodes
[3] = {

524 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

525 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

526 (
mib_node
* c⁄°)&
¨±ªe_roŸ


528 c⁄° 
mib_¨øy_node
 
	g©íåy
 = {

529 &
nﬁófs_gë_obje˘_def
,

530 &
nﬁófs_gë_vÆue
,

531 &
nﬁófs_£t_ã°
,

532 &
nﬁófs_£t_vÆue
,

533 
MIB_NODE_AR
,

535 
©íåy_ids
,

536 
©íåy_nodes


539 c⁄° 
s32_t
 
	g©èbÀ_id
 = 1;

540 
mib_node
* c⁄° 
	g©èbÀ_node
 = (mib_node* c⁄°)&
©íåy
;

541 c⁄° 
mib_¨øy_node
 
	g©èbÀ
 = {

542 &
nﬁófs_gë_obje˘_def
,

543 &
nﬁófs_gë_vÆue
,

544 &
nﬁófs_£t_ã°
,

545 &
nﬁófs_£t_vÆue
,

546 
MIB_NODE_AR
,

548 &
©èbÀ_id
,

549 &
©èbÀ_node


553 
s32_t
 
	g©_id
 = 1;

554 
mib_node
* 
	gmib2_©_node
 = (mib_node* c⁄°)&
©èbÀ
;

555 
mib_øm_¨øy_node
 
	g©
 = {

556 &
nﬁófs_gë_obje˘_def
,

557 &
nﬁófs_gë_vÆue
,

558 &
nﬁófs_£t_ã°
,

559 &
nﬁófs_£t_vÆue
,

560 
MIB_NODE_RA
,

562 &
©_id
,

563 &
mib2_©_node


567 
mib_li°_roŸnode
 
	giÊi°_roŸ
 = {

568 &
i„¡ry_gë_obje˘_def
,

569 &
i„¡ry_gë_vÆue
,

570 #i‡
SNMP_SAFE_REQUESTS


571 &
nﬁófs_£t_ã°
,

572 &
nﬁófs_£t_vÆue
,

574 &
i„¡ry_£t_ã°
,

575 &
i„¡ry_£t_vÆue
,

577 
MIB_NODE_LR
,

579 
NULL
,

580 
NULL
,

583 c⁄° 
s32_t
 
	gi„¡ry_ids
[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };

584 
mib_node
* c⁄° 
	gi„¡ry_nodes
[22] = {

585 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

586 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

587 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

588 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

589 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

590 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

591 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

592 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

593 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

594 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

595 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root

597 c⁄° 
mib_¨øy_node
 
	gi„¡ry
 = {

598 &
nﬁófs_gë_obje˘_def
,

599 &
nﬁófs_gë_vÆue
,

600 &
nﬁófs_£t_ã°
,

601 &
nﬁófs_£t_vÆue
,

602 
MIB_NODE_AR
,

604 
i„¡ry_ids
,

605 
i„¡ry_nodes


608 
s32_t
 
	gi·abÀ_id
 = 1;

609 
mib_node
* 
	gi·abÀ_node
 = (mib_node* c⁄°)&
i„¡ry
;

610 
mib_øm_¨øy_node
 
	gi·abÀ
 = {

611 &
nﬁófs_gë_obje˘_def
,

612 &
nﬁófs_gë_vÆue
,

613 &
nﬁófs_£t_ã°
,

614 &
nﬁófs_£t_vÆue
,

615 
MIB_NODE_RA
,

617 &
i·abÀ_id
,

618 &
i·abÀ_node


622 c⁄° 
mib_sˇœr_node
 
	göãrÁ˚s_sˇœr
 = {

623 &
öãrÁ˚s_gë_obje˘_def
,

624 &
öãrÁ˚s_gë_vÆue
,

625 &
nﬁófs_£t_ã°
,

626 &
nﬁófs_£t_vÆue
,

627 
MIB_NODE_SC
,

630 c⁄° 
s32_t
 
	göãrÁ˚s_ids
[2] = { 1, 2 };

631 
mib_node
* c⁄° 
	göãrÁ˚s_nodes
[2] = {

632 (
mib_node
* c⁄°)&
öãrÁ˚s_sˇœr
, (mib_node* c⁄°)&
i·abÀ


634 c⁄° 
mib_¨øy_node
 
	göãrÁ˚s
 = {

635 &
nﬁófs_gë_obje˘_def
,

636 &
nﬁófs_gë_vÆue
,

637 &
nﬁófs_£t_ã°
,

638 &
nﬁófs_£t_vÆue
,

639 
MIB_NODE_AR
,

641 
öãrÁ˚s_ids
,

642 
öãrÁ˚s_nodes


648 c⁄° 
mib_sˇœr_node
 
	gsys_ãm_sˇœr
 = {

649 &
sy°em_gë_obje˘_def
,

650 &
sy°em_gë_vÆue
,

651 &
sy°em_£t_ã°
,

652 &
sy°em_£t_vÆue
,

653 
MIB_NODE_SC
,

656 c⁄° 
s32_t
 
	gsys_ãm_ids
[7] = { 1, 2, 3, 4, 5, 6, 7 };

657 
mib_node
* c⁄° 
	gsys_ãm_nodes
[7] = {

658 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

659 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

660 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

661 (
mib_node
* c⁄°)&
sys_ãm_sˇœr


664 c⁄° 
mib_¨øy_node
 
	gsys_ãm
 = {

665 &
nﬁófs_gë_obje˘_def
,

666 &
nﬁófs_gë_vÆue
,

667 &
nﬁófs_£t_ã°
,

668 &
nﬁófs_£t_vÆue
,

669 
MIB_NODE_AR
,

671 
sys_ãm_ids
,

672 
sys_ãm_nodes


676 #i‡
LWIP_TCP


677 
	#MIB2_GROUPS
 8

	)

679 
	#MIB2_GROUPS
 7

	)

681 c⁄° 
s32_t
 
	gmib2_ids
[
MIB2_GROUPS
] =

688 #i‡
LWIP_TCP


694 
mib_node
* c⁄° 
	gmib2_nodes
[
MIB2_GROUPS
] = {

695 (
mib_node
* c⁄°)&
sys_ãm
,

696 (
mib_node
* c⁄°)&
öãrÁ˚s
,

697 (
mib_node
* c⁄°)&
©
,

698 (
mib_node
* c⁄°)&
mib2_ù
,

699 (
mib_node
* c⁄°)&
icmp
,

700 #i‡
LWIP_TCP


701 (
mib_node
* c⁄°)&
t˝
,

703 (
mib_node
* c⁄°)&
udp
,

704 (
mib_node
* c⁄°)&
¢mp


707 c⁄° 
mib_¨øy_node
 
	gmib2
 = {

708 &
nﬁófs_gë_obje˘_def
,

709 &
nﬁófs_gë_vÆue
,

710 &
nﬁófs_£t_ã°
,

711 &
nﬁófs_£t_vÆue
,

712 
MIB_NODE_AR
,

713 
MIB2_GROUPS
,

714 
mib2_ids
,

715 
mib2_nodes


719 c⁄° 
s32_t
 
	gmgmt_ids
[1] = { 1 };

720 
mib_node
* c⁄° 
	gmgmt_nodes
[1] = { (mib_node* c⁄°)&
mib2
 };

721 c⁄° 
mib_¨øy_node
 
	gmgmt
 = {

722 &
nﬁófs_gë_obje˘_def
,

723 &
nﬁófs_gë_vÆue
,

724 &
nﬁófs_£t_ã°
,

725 &
nﬁófs_£t_vÆue
,

726 
MIB_NODE_AR
,

728 
mgmt_ids
,

729 
mgmt_nodes


733 #i‡
SNMP_PRIVATE_MIB


734 
s32_t
 
	göã∫ë_ids
[2] = { 2, 4 };

735 
mib_node
* c⁄° 
	göã∫ë_nodes
[2] = { (mib_node* c⁄°)&
mgmt
, (mib_node* c⁄°)&
¥iv©e
 };

736 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

737 &
nﬁófs_gë_obje˘_def
,

738 &
nﬁófs_gë_vÆue
,

739 &
nﬁófs_£t_ã°
,

740 &
nﬁófs_£t_vÆue
,

741 
MIB_NODE_AR
,

743 
öã∫ë_ids
,

744 
öã∫ë_nodes


747 c⁄° 
s32_t
 
	göã∫ë_ids
[1] = { 2 };

748 
mib_node
* c⁄° 
	göã∫ë_nodes
[1] = { (mib_node* c⁄°)&
mgmt
 };

749 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

750 &
nﬁófs_gë_obje˘_def
,

751 &
nﬁófs_gë_vÆue
,

752 &
nﬁófs_£t_ã°
,

753 &
nﬁófs_£t_vÆue
,

754 
MIB_NODE_AR
,

756 
öã∫ë_ids
,

757 
öã∫ë_nodes


762 
¢mp_obj_id
 
	gsysobjid
 = {
SNMP_SYSOBJID_LEN
, 
SNMP_SYSOBJID
};

764 
¢mp_obj_id
 
	g¢mpgΩ_id
 = {7,{1,3,6,1,2,1,11}};

766 c⁄° 
s32_t
 
	gsys£rvi˚s
 = 
SNMP_SYSSERVICES
;

769 c⁄° 
u8_t
 
	gsysdes¸_Àn_deÁu…
 = 4;

770 c⁄° 
u8_t
 
	gsysdes¸_deÁu…
[] = "lwIP";

771 
u8_t
* 
	gsysdes¸_Àn_±r
 = (u8_t*)&
sysdes¸_Àn_deÁu…
;

772 
u8_t
* 
	gsysdes¸_±r
 = (u8_t*)&
sysdes¸_deÁu…
[0];

774 c⁄° 
u8_t
 
	gsysc⁄è˘_Àn_deÁu…
 = 0;

775 c⁄° 
u8_t
 
	gsysc⁄è˘_deÁu…
[] = "";

776 
u8_t
* 
	gsysc⁄è˘_Àn_±r
 = (u8_t*)&
sysc⁄è˘_Àn_deÁu…
;

777 
u8_t
* 
	gsysc⁄è˘_±r
 = (u8_t*)&
sysc⁄è˘_deÁu…
[0];

779 c⁄° 
u8_t
 
	gsy¢ame_Àn_deÁu…
 = 8;

780 c⁄° 
u8_t
 
	gsy¢ame_deÁu…
[] = "FQDN-unk";

781 
u8_t
* 
	gsy¢ame_Àn_±r
 = (u8_t*)&
sy¢ame_Àn_deÁu…
;

782 
u8_t
* 
	gsy¢ame_±r
 = (u8_t*)&
sy¢ame_deÁu…
[0];

784 c⁄° 
u8_t
 
	gsy¶oˇti⁄_Àn_deÁu…
 = 0;

785 c⁄° 
u8_t
 
	gsy¶oˇti⁄_deÁu…
[] = "";

786 
u8_t
* 
	gsy¶oˇti⁄_Àn_±r
 = (u8_t*)&
sy¶oˇti⁄_Àn_deÁu…
;

787 
u8_t
* 
	gsy¶oˇti⁄_±r
 = (u8_t*)&
sy¶oˇti⁄_deÁu…
[0];

789 c⁄° 
u8_t
 
	g¢m≥«bÀauthíå≠s_deÁu…
 = 2;

790 
u8_t
* 
	g¢m≥«bÀauthíå≠s_±r
 = (u8_t*)&
¢m≥«bÀauthíå≠s_deÁu…
;

793 c⁄° 
¢mp_obj_id
 
	gif•ecific
 = {2, {0, 0}};

795 c⁄° 
¢mp_obj_id
 
	gùrouãöfo
 = {2, {0, 0}};

800 
u32_t
 
	gsysu±ime
 = 0;

803 
u32_t
 
	gùöª˚ives
 = 0,

804 
	gùöhdªº‹s
 = 0,

805 
	gùöaddªº‹s
 = 0,

806 
	gùf‹wd©agøms
 = 0,

807 
	gùöunknow≈rŸos
 = 0,

808 
	gùödisˇrds
 = 0,

809 
	gùödñivîs
 = 0,

810 
	gùouåeque°s
 = 0,

811 
	gùoutdisˇrds
 = 0,

812 
	gùouä‹ouãs
 = 0,

813 
	gùªasmªqds
 = 0,

814 
	gùªasmoks
 = 0,

815 
	gùªasmÁûs
 = 0,

816 
	gù‰agoks
 = 0,

817 
	gù‰agÁûs
 = 0,

818 
	gù‰ag¸óãs
 = 0,

819 
	gùroutögdisˇrds
 = 0;

821 
u32_t
 
	gicmpömsgs
 = 0,

822 
	gicmpöîr‹s
 = 0,

823 
	gicmpöde°uƒóchs
 = 0,

824 
	gicmpötimìxcds
 = 0,

825 
	gicmpö∑rm¥obs
 = 0,

826 
	gicmpö§cquíchs
 = 0,

827 
	gicmpöªdúe˘s
 = 0,

828 
	gicmpöechos
 = 0,

829 
	gicmpöech‹ïs
 = 0,

830 
	gicmpötime°amps
 = 0,

831 
	gicmpötime°am¥ïs
 = 0,

832 
	gicmpöaddrmasks
 = 0,

833 
	gicmpöaddrmaskªps
 = 0,

834 
	gicmpoutmsgs
 = 0,

835 
	gicmpouãº‹s
 = 0,

836 
	gicmpoutde°uƒóchs
 = 0,

837 
	gicmpouâimìxcds
 = 0,

838 
	gicmpouç¨m¥obs
 = 0,

839 
	gicmpout§cquíchs
 = 0,

840 
	gicmpouåedúe˘s
 = 0,

841 
	gicmpouãchos
 = 0,

842 
	gicmpouãch‹ïs
 = 0,

843 
	gicmpouâime°amps
 = 0,

844 
	gicmpouâime°am¥ïs
 = 0,

845 
	gicmpouèddrmasks
 = 0,

846 
	gicmpouèddrmaskªps
 = 0;

848 
u32_t
 
	gt˝a˘ive›ís
 = 0,

849 
	gt˝∑ssive›ís
 = 0,

850 
	gt˝©ãm±Áûs
 = 0,

851 
	gt˝e°abª£ts
 = 0,

852 
	gt˝ö£gs
 = 0,

853 
	gt˝out£gs
 = 0,

854 
	gt˝ªå™s£gs
 = 0,

855 
	gt˝öîrs
 = 0,

856 
	gt˝ouå°s
 = 0;

858 
u32_t
 
	gudpöd©agøms
 = 0,

859 
	gud≤›‹ts
 = 0,

860 
	gudpöîr‹s
 = 0,

861 
	gudpoutd©agøms
 = 0;

863 
u32_t
 
	g¢mpöpkts
 = 0,

864 
	g¢mpouçkts
 = 0,

865 
	g¢mpöbadvîsi⁄s
 = 0,

866 
	g¢mpöbadcommunôy«mes
 = 0,

867 
	g¢mpöbadcommunôyu£s
 = 0,

868 
	g¢mpöa¢∑r£îrs
 = 0,

869 
	g¢mpötoobigs
 = 0,

870 
	g¢mpönosuch«mes
 = 0,

871 
	g¢mpöbadvÆues
 = 0,

872 
	g¢mpöªad⁄lys
 = 0,

873 
	g¢mpögíîrs
 = 0,

874 
	g¢mpötŸÆªqv¨s
 = 0,

875 
	g¢mpötŸÆ£tv¨s
 = 0,

876 
	g¢mpögëªque°s
 = 0,

877 
	g¢mpögë√xts
 = 0,

878 
	g¢mpö£åeque°s
 = 0,

879 
	g¢mpögëª•⁄£s
 = 0,

880 
	g¢mpöå≠s
 = 0,

881 
	g¢mpouâoobigs
 = 0,

882 
	g¢mpouäosuch«mes
 = 0,

883 
	g¢mpoutbadvÆues
 = 0,

884 
	g¢mpoutgíîrs
 = 0,

885 
	g¢mpoutgëªque°s
 = 0,

886 
	g¢mpoutgë√xts
 = 0,

887 
	g¢mpout£åeque°s
 = 0,

888 
	g¢mpoutgëª•⁄£s
 = 0,

889 
	g¢mpouâøps
 = 0;

901 
	$oc°∫˝y
(
u8_t
 *
d°
, u8_à*
§c
, u8_à
n
)

903 
n
 > 0)

905 
n
--;

906 *
d°
++ = *
§c
++;

908 
	}
}

917 
	$obje˘idn˝y
(
s32_t
 *
d°
, s32_à*
§c
, 
u8_t
 
n
)

919 
n
 > 0)

921 
n
--;

922 *
d°
++ = *
§c
++;

924 
	}
}

932 
	$¢mp_£t_sysde§
(
u8_t
 *
°r
, u8_à*
Àn
)

934 i‡(
°r
 !
NULL
)

936 
sysdes¸_±r
 = 
°r
;

937 
sysdes¸_Àn_±r
 = 
Àn
;

939 
	}
}

941 
	$¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
)

943 *
oid
 = &
sysobjid
;

944 
	}
}

951 
	$¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
)

953 
sysobjid
 = *
oid
;

954 
	}
}

960 
	$¢mp_öc_sysu±ime
()

962 
sysu±ime
++;

963 
	}
}

965 
	$¢mp_add_sysu±ime
(
u32_t
 
vÆue
)

967 
sysu±ime
+=
vÆue
;

968 
	}
}

970 
	$¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
)

972 
	`SNMP_GET_SYSUPTIME
(
sysu±ime
);

973 *
vÆue
 = 
sysu±ime
;

974 
	}
}

983 
	$¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

985 i‡(
oc°r
 !
NULL
)

987 
sysc⁄è˘_±r
 = 
oc°r
;

988 
sysc⁄è˘_Àn_±r
 = 
oc°æí
;

990 
	}
}

999 
	$¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1001 i‡(
oc°r
 !
NULL
)

1003 
sy¢ame_±r
 = 
oc°r
;

1004 
sy¢ame_Àn_±r
 = 
oc°æí
;

1006 
	}
}

1015 
	$¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1017 i‡(
oc°r
 !
NULL
)

1019 
sy¶oˇti⁄_±r
 = 
oc°r
;

1020 
sy¶oˇti⁄_Àn_±r
 = 
oc°æí
;

1022 
	}
}

1025 
	$¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1027 
ni
->
iföo˘ës
 +
vÆue
;

1028 
	}
}

1030 
	$¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
)

1032 (
ni
->
iföuˇ°pkts
)++;

1033 
	}
}

1035 
	$¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
)

1037 (
ni
->
ifönuˇ°pkts
)++;

1038 
	}
}

1040 
	$¢mp_öc_ifödisˇrds
(
√tif
 *
ni
)

1042 (
ni
->
ifödisˇrds
)++;

1043 
	}
}

1045 
	$¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1047 
ni
->
ifouto˘ës
 +
vÆue
;

1048 
	}
}

1050 
	$¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
)

1052 (
ni
->
ifoutuˇ°pkts
)++;

1053 
	}
}

1055 
	$¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
)

1057 (
ni
->
ifouäuˇ°pkts
)++;

1058 
	}
}

1060 
	$¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
)

1062 (
ni
->
ifoutdisˇrds
)++;

1063 
	}
}

1065 
	$¢mp_öc_iÊi°
()

1067 
mib_li°_node
 *
if_node
 = 
NULL
;

1069 
	`¢mp_mib_node_ö£π
(&
iÊi°_roŸ
, iÊi°_roŸ.
cou¡
 + 1, &
if_node
);

1071 
i·abÀ
.
maxÀngth
 = 1;

1072 
	}
}

1074 
	$¢mp_dec_iÊi°
()

1076 
	`¢mp_mib_node_dñëe
(&
iÊi°_roŸ
, iÊi°_roŸ.
èû
);

1078 if(
iÊi°_roŸ
.
cou¡
 =0Ë
i·abÀ
.
maxÀngth
 = 0;

1079 
	}
}

1085 
	$¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1087 
mib_li°_roŸnode
 *
©_∫
;

1088 
mib_li°_node
 *
©_node
;

1089 
ù_addr
 
hù
;

1090 
s32_t
 
¨pidx
[5];

1091 
u8_t
 
Àvñ
, 
åì
;

1093 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1094 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1095 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1096 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1098 
åì
 = 0;Åree < 2;Åree++)

1100 i‡(
åì
 == 0)

1102 
©_∫
 = &
¨±ªe_roŸ
;

1106 
©_∫
 = &
ù¡omåì_roŸ
;

1108 
Àvñ
 = 0;Üevel < 5;Üevel++)

1110 
©_node
 = 
NULL
;

1111 
	`¢mp_mib_node_ö£π
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_node
);

1112 i‡((
Àvñ
 !4Ë&& (
©_node
 !
NULL
))

1114 i‡(
©_node
->
≈å
 =
NULL
)

1116 
©_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1117 
©_node
->
≈å
 = (
mib_node
*)
©_∫
;

1118 i‡(
©_∫
 !
NULL
)

1120 i‡(
Àvñ
 == 3)

1122 i‡(
åì
 == 0)

1124 
©_∫
->
gë_obje˘_def
 = 
©íåy_gë_obje˘_def
;

1125 
©_∫
->
gë_vÆue
 = 
©íåy_gë_vÆue
;

1129 
©_∫
->
gë_obje˘_def
 = 
ù_¡omíåy_gë_obje˘_def
;

1130 
©_∫
->
gë_vÆue
 = 
ù_¡omíåy_gë_vÆue
;

1132 
©_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1133 
©_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1139 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_arpidx_tree() insert failed, mem full"));

1145 
©_∫
 = (
mib_li°_roŸnode
*)
©_node
->
≈å
;

1151 
©
.
maxÀngth
 = 1;

1152 
ù¡omèbÀ
.
maxÀngth
 = 1;

1153 
	}
}

1159 
	$¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1161 
mib_li°_roŸnode
 *
©_∫
, *
√xt
, *
dñ_∫
[5];

1162 
mib_li°_node
 *
©_n
, *
dñ_n
[5];

1163 
ù_addr
 
hù
;

1164 
s32_t
 
¨pidx
[5];

1165 
u8_t
 
fc
, 
åì
, 
Àvñ
, 
dñ_˙t
;

1167 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1168 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1169 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1171 
åì
 = 0;Åree < 2;Åree++)

1174 i‡(
åì
 == 0)

1176 
©_∫
 = &
¨±ªe_roŸ
;

1180 
©_∫
 = &
ù¡omåì_roŸ
;

1182 
Àvñ
 = 0;

1183 
dñ_˙t
 = 0;

1184 (
Àvñ
 < 5Ë&& (
©_∫
 !
NULL
))

1186 
fc
 = 
	`¢mp_mib_node_föd
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_n
);

1187 i‡(
fc
 == 0)

1190 
dñ_˙t
 = 0;

1191 
©_∫
 = 
NULL
;

1193 i‡(
fc
 == 1)

1195 
dñ_∫
[
dñ_˙t
] = 
©_∫
;

1196 
dñ_n
[
dñ_˙t
] = 
©_n
;

1197 
dñ_˙t
++;

1198 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1200 i‡(
fc
 == 2)

1203 
dñ_˙t
 = 0;

1204 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1206 
Àvñ
++;

1209 
dñ_˙t
 > 0)

1211 
dñ_˙t
--;

1213 
©_∫
 = 
dñ_∫
[
dñ_˙t
];

1214 
©_n
 = 
dñ_n
[
dñ_˙t
];

1216 
√xt
 = 
	`¢mp_mib_node_dñëe
(
©_∫
, 
©_n
);

1217 i‡(
√xt
 !
NULL
)

1219 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1220 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1225 if(
¨±ªe_roŸ
.
cou¡
 =0Ë
©
.
maxÀngth
 = 0;

1226 if(
ù¡omåì_roŸ
.
cou¡
 =0Ë
ù¡omèbÀ
.
maxÀngth
 = 0;

1227 
	}
}

1229 
	$¢mp_öc_ùöª˚ives
()

1231 
ùöª˚ives
++;

1232 
	}
}

1234 
	$¢mp_öc_ùöhdªº‹s
()

1236 
ùöhdªº‹s
++;

1237 
	}
}

1239 
	$¢mp_öc_ùöaddªº‹s
()

1241 
ùöaddªº‹s
++;

1242 
	}
}

1244 
	$¢mp_öc_ùf‹wd©agøms
()

1246 
ùf‹wd©agøms
++;

1247 
	}
}

1249 
	$¢mp_öc_ùöunknow≈rŸos
()

1251 
ùöunknow≈rŸos
++;

1252 
	}
}

1254 
	$¢mp_öc_ùödisˇrds
()

1256 
ùödisˇrds
++;

1257 
	}
}

1259 
	$¢mp_öc_ùödñivîs
()

1261 
ùödñivîs
++;

1262 
	}
}

1264 
	$¢mp_öc_ùouåeque°s
()

1266 
ùouåeque°s
++;

1267 
	}
}

1269 
	$¢mp_öc_ùoutdisˇrds
()

1271 
ùoutdisˇrds
++;

1272 
	}
}

1274 
	$¢mp_öc_ùouä‹ouãs
()

1276 
ùouä‹ouãs
++;

1277 
	}
}

1279 
	$¢mp_öc_ùªasmªqds
()

1281 
ùªasmªqds
++;

1282 
	}
}

1284 
	$¢mp_öc_ùªasmoks
()

1286 
ùªasmoks
++;

1287 
	}
}

1289 
	$¢mp_öc_ùªasmÁûs
()

1291 
ùªasmÁûs
++;

1292 
	}
}

1294 
	$¢mp_öc_ù‰agoks
()

1296 
ù‰agoks
++;

1297 
	}
}

1299 
	$¢mp_öc_ù‰agÁûs
()

1301 
ù‰agÁûs
++;

1302 
	}
}

1304 
	$¢mp_öc_ù‰ag¸óãs
()

1306 
ù‰ag¸óãs
++;

1307 
	}
}

1309 
	$¢mp_öc_ùroutögdisˇrds
()

1311 
ùroutögdisˇrds
++;

1312 
	}
}

1318 
	$¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
)

1320 
mib_li°_roŸnode
 *
ùa_∫
;

1321 
mib_li°_node
 *
ùa_node
;

1322 
ù_addr
 
ù
;

1323 
s32_t
 
ùaddridx
[4];

1324 
u8_t
 
Àvñ
;

1326 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1327 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1328 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1330 
Àvñ
 = 0;

1331 
ùa_∫
 = &
ùaddπªe_roŸ
;

1332 
Àvñ
 < 4)

1334 
ùa_node
 = 
NULL
;

1335 
	`¢mp_mib_node_ö£π
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_node
);

1336 i‡((
Àvñ
 !3Ë&& (
ùa_node
 !
NULL
))

1338 i‡(
ùa_node
->
≈å
 =
NULL
)

1340 
ùa_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1341 
ùa_node
->
≈å
 = (
mib_node
*)
ùa_∫
;

1342 i‡(
ùa_∫
 !
NULL
)

1344 i‡(
Àvñ
 == 2)

1346 
ùa_∫
->
gë_obje˘_def
 = 
ù_addª¡ry_gë_obje˘_def
;

1347 
ùa_∫
->
gë_vÆue
 = 
ù_addª¡ry_gë_vÆue
;

1348 
ùa_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1349 
ùa_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1355 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_ipaddridx_tree() insert failed, mem full"));

1361 
ùa_∫
 = (
mib_li°_roŸnode
*)
ùa_node
->
≈å
;

1364 
Àvñ
++;

1367 
ùaddπabÀ
.
maxÀngth
 = 1;

1368 
	}
}

1374 
	$¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
)

1376 
mib_li°_roŸnode
 *
ùa_∫
, *
√xt
, *
dñ_∫
[4];

1377 
mib_li°_node
 *
ùa_n
, *
dñ_n
[4];

1378 
ù_addr
 
ù
;

1379 
s32_t
 
ùaddridx
[4];

1380 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1382 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1383 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1384 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1387 
Àvñ
 = 0;

1388 
dñ_˙t
 = 0;

1389 
ùa_∫
 = &
ùaddπªe_roŸ
;

1390 (
Àvñ
 < 4Ë&& (
ùa_∫
 !
NULL
))

1392 
fc
 = 
	`¢mp_mib_node_föd
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_n
);

1393 i‡(
fc
 == 0)

1396 
dñ_˙t
 = 0;

1397 
ùa_∫
 = 
NULL
;

1399 i‡(
fc
 == 1)

1401 
dñ_∫
[
dñ_˙t
] = 
ùa_∫
;

1402 
dñ_n
[
dñ_˙t
] = 
ùa_n
;

1403 
dñ_˙t
++;

1404 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1406 i‡(
fc
 == 2)

1409 
dñ_˙t
 = 0;

1410 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1412 
Àvñ
++;

1415 
dñ_˙t
 > 0)

1417 
dñ_˙t
--;

1419 
ùa_∫
 = 
dñ_∫
[
dñ_˙t
];

1420 
ùa_n
 = 
dñ_n
[
dñ_˙t
];

1422 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùa_∫
, 
ùa_n
);

1423 i‡(
√xt
 !
NULL
)

1425 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1426 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1430 i‡(
ùaddπªe_roŸ
.
cou¡
 =0Ë
ùaddπabÀ
.
maxÀngth
 = 0;

1431 
	}
}

1443 
	$¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1445 
u8_t
 
ö£π
 = 0;

1446 
ù_addr
 
d°
;

1448 i‡(
dÊt
 != 0)

1451 
d°
.
addr
 = 0;

1452 
ö£π
 = 1;

1457 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1459 i‡(
d°
.
addr
 !0Ë
ö£π
 = 1;

1461 i‡(
ö£π
)

1463 
mib_li°_roŸnode
 *
ùπe_∫
;

1464 
mib_li°_node
 *
ùπe_node
;

1465 
s32_t
 
ùπeidx
[4];

1466 
u8_t
 
Àvñ
;

1468 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1469 
Àvñ
 = 0;

1470 
ùπe_∫
 = &
ùπëªe_roŸ
;

1471 
Àvñ
 < 4)

1473 
ùπe_node
 = 
NULL
;

1474 
	`¢mp_mib_node_ö£π
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_node
);

1475 i‡((
Àvñ
 !3Ë&& (
ùπe_node
 !
NULL
))

1477 i‡(
ùπe_node
->
≈å
 =
NULL
)

1479 
ùπe_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1480 
ùπe_node
->
≈å
 = (
mib_node
*)
ùπe_∫
;

1481 i‡(
ùπe_∫
 !
NULL
)

1483 i‡(
Àvñ
 == 2)

1485 
ùπe_∫
->
gë_obje˘_def
 = 
ù_πì¡ry_gë_obje˘_def
;

1486 
ùπe_∫
->
gë_vÆue
 = 
ù_πì¡ry_gë_vÆue
;

1487 
ùπe_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1488 
ùπe_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1494 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_iprteidx_tree() insert failed, mem full"));

1500 
ùπe_∫
 = (
mib_li°_roŸnode
*)
ùπe_node
->
≈å
;

1503 
Àvñ
++;

1507 
ùπëabÀ
.
maxÀngth
 = 1;

1508 
	}
}

1518 
	$¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1520 
u8_t
 
dñëe
 = 0;

1521 
ù_addr
 
d°
;

1523 i‡(
dÊt
 != 0)

1526 
d°
.
addr
 = 0;

1527 
dñëe
 = 1;

1532 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1534 i‡(
d°
.
addr
 !0Ë
dñëe
 = 1;

1536 i‡(
dñëe
)

1538 
mib_li°_roŸnode
 *
ùπe_∫
, *
√xt
, *
dñ_∫
[4];

1539 
mib_li°_node
 *
ùπe_n
, *
dñ_n
[4];

1540 
s32_t
 
ùπeidx
[4];

1541 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1543 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1545 
Àvñ
 = 0;

1546 
dñ_˙t
 = 0;

1547 
ùπe_∫
 = &
ùπëªe_roŸ
;

1548 (
Àvñ
 < 4Ë&& (
ùπe_∫
 !
NULL
))

1550 
fc
 = 
	`¢mp_mib_node_föd
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_n
);

1551 i‡(
fc
 == 0)

1554 
dñ_˙t
 = 0;

1555 
ùπe_∫
 = 
NULL
;

1557 i‡(
fc
 == 1)

1559 
dñ_∫
[
dñ_˙t
] = 
ùπe_∫
;

1560 
dñ_n
[
dñ_˙t
] = 
ùπe_n
;

1561 
dñ_˙t
++;

1562 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1564 i‡(
fc
 == 2)

1567 
dñ_˙t
 = 0;

1568 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1570 
Àvñ
++;

1573 
dñ_˙t
 > 0)

1575 
dñ_˙t
--;

1577 
ùπe_∫
 = 
dñ_∫
[
dñ_˙t
];

1578 
ùπe_n
 = 
dñ_n
[
dñ_˙t
];

1580 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùπe_∫
, 
ùπe_n
);

1581 i‡(
√xt
 !
NULL
)

1583 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1584 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1589 i‡(
ùπëªe_roŸ
.
cou¡
 =0Ë
ùπëabÀ
.
maxÀngth
 = 0;

1590 
	}
}

1593 
	$¢mp_öc_icmpömsgs
()

1595 
icmpömsgs
++;

1596 
	}
}

1598 
	$¢mp_öc_icmpöîr‹s
()

1600 
icmpöîr‹s
++;

1601 
	}
}

1603 
	$¢mp_öc_icmpöde°uƒóchs
()

1605 
icmpöde°uƒóchs
++;

1606 
	}
}

1608 
	$¢mp_öc_icmpötimìxcds
()

1610 
icmpötimìxcds
++;

1611 
	}
}

1613 
	$¢mp_öc_icmpö∑rm¥obs
()

1615 
icmpö∑rm¥obs
++;

1616 
	}
}

1618 
	$¢mp_öc_icmpö§cquíchs
()

1620 
icmpö§cquíchs
++;

1621 
	}
}

1623 
	$¢mp_öc_icmpöªdúe˘s
()

1625 
icmpöªdúe˘s
++;

1626 
	}
}

1628 
	$¢mp_öc_icmpöechos
()

1630 
icmpöechos
++;

1631 
	}
}

1633 
	$¢mp_öc_icmpöech‹ïs
()

1635 
icmpöech‹ïs
++;

1636 
	}
}

1638 
	$¢mp_öc_icmpötime°amps
()

1640 
icmpötime°amps
++;

1641 
	}
}

1643 
	$¢mp_öc_icmpötime°am¥ïs
()

1645 
icmpötime°am¥ïs
++;

1646 
	}
}

1648 
	$¢mp_öc_icmpöaddrmasks
()

1650 
icmpöaddrmasks
++;

1651 
	}
}

1653 
	$¢mp_öc_icmpöaddrmaskªps
()

1655 
icmpöaddrmaskªps
++;

1656 
	}
}

1658 
	$¢mp_öc_icmpoutmsgs
()

1660 
icmpoutmsgs
++;

1661 
	}
}

1663 
	$¢mp_öc_icmpouãº‹s
()

1665 
icmpouãº‹s
++;

1666 
	}
}

1668 
	$¢mp_öc_icmpoutde°uƒóchs
()

1670 
icmpoutde°uƒóchs
++;

1671 
	}
}

1673 
	$¢mp_öc_icmpouâimìxcds
()

1675 
icmpouâimìxcds
++;

1676 
	}
}

1678 
	$¢mp_öc_icmpouç¨m¥obs
()

1680 
icmpouç¨m¥obs
++;

1681 
	}
}

1683 
	$¢mp_öc_icmpout§cquíchs
()

1685 
icmpout§cquíchs
++;

1686 
	}
}

1688 
	$¢mp_öc_icmpouåedúe˘s
()

1690 
icmpouåedúe˘s
++;

1691 
	}
}

1693 
	$¢mp_öc_icmpouãchos
()

1695 
icmpouãchos
++;

1696 
	}
}

1698 
	$¢mp_öc_icmpouãch‹ïs
()

1700 
icmpouãch‹ïs
++;

1701 
	}
}

1703 
	$¢mp_öc_icmpouâime°amps
()

1705 
icmpouâime°amps
++;

1706 
	}
}

1708 
	$¢mp_öc_icmpouâime°am¥ïs
()

1710 
icmpouâime°am¥ïs
++;

1711 
	}
}

1713 
	$¢mp_öc_icmpouèddrmasks
()

1715 
icmpouèddrmasks
++;

1716 
	}
}

1718 
	$¢mp_öc_icmpouèddrmaskªps
()

1720 
icmpouèddrmaskªps
++;

1721 
	}
}

1723 
	$¢mp_öc_t˝a˘ive›ís
()

1725 
t˝a˘ive›ís
++;

1726 
	}
}

1728 
	$¢mp_öc_t˝∑ssive›ís
()

1730 
t˝∑ssive›ís
++;

1731 
	}
}

1733 
	$¢mp_öc_t˝©ãm±Áûs
()

1735 
t˝©ãm±Áûs
++;

1736 
	}
}

1738 
	$¢mp_öc_t˝e°abª£ts
()

1740 
t˝e°abª£ts
++;

1741 
	}
}

1743 
	$¢mp_öc_t˝ö£gs
()

1745 
t˝ö£gs
++;

1746 
	}
}

1748 
	$¢mp_öc_t˝out£gs
()

1750 
t˝out£gs
++;

1751 
	}
}

1753 
	$¢mp_öc_t˝ªå™s£gs
()

1755 
t˝ªå™s£gs
++;

1756 
	}
}

1758 
	$¢mp_öc_t˝öîrs
()

1760 
t˝öîrs
++;

1761 
	}
}

1763 
	$¢mp_öc_t˝ouå°s
()

1765 
t˝ouå°s
++;

1766 
	}
}

1768 
	$¢mp_öc_udpöd©agøms
()

1770 
udpöd©agøms
++;

1771 
	}
}

1773 
	$¢mp_öc_ud≤›‹ts
()

1775 
ud≤›‹ts
++;

1776 
	}
}

1778 
	$¢mp_öc_udpöîr‹s
()

1780 
udpöîr‹s
++;

1781 
	}
}

1783 
	$¢mp_öc_udpoutd©agøms
()

1785 
udpoutd©agøms
++;

1786 
	}
}

1792 
	$¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
)

1794 
mib_li°_roŸnode
 *
udp_∫
;

1795 
mib_li°_node
 *
udp_node
;

1796 
ù_addr
 
ù
;

1797 
s32_t
 
udpidx
[5];

1798 
u8_t
 
Àvñ
;

1800 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1801 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1802 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1803 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1805 
udp_∫
 = &
udp_roŸ
;

1806 
Àvñ
 = 0;Üevel < 5;Üevel++)

1808 
udp_node
 = 
NULL
;

1809 
	`¢mp_mib_node_ö£π
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_node
);

1810 i‡((
Àvñ
 !4Ë&& (
udp_node
 !
NULL
))

1812 i‡(
udp_node
->
≈å
 =
NULL
)

1814 
udp_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1815 
udp_node
->
≈å
 = (
mib_node
*)
udp_∫
;

1816 i‡(
udp_∫
 !
NULL
)

1818 i‡(
Àvñ
 == 3)

1820 
udp_∫
->
gë_obje˘_def
 = 
ud≥¡ry_gë_obje˘_def
;

1821 
udp_∫
->
gë_vÆue
 = 
ud≥¡ry_gë_vÆue
;

1822 
udp_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1823 
udp_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1829 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_udpidx_tree() insert failed, mem full"));

1835 
udp_∫
 = (
mib_li°_roŸnode
*)
udp_node
->
≈å
;

1839 
ud±abÀ
.
maxÀngth
 = 1;

1840 
	}
}

1846 
	$¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
)

1848 
mib_li°_roŸnode
 *
udp_∫
, *
√xt
, *
dñ_∫
[5];

1849 
mib_li°_node
 *
udp_n
, *
dñ_n
[5];

1850 
ù_addr
 
ù
;

1851 
s32_t
 
udpidx
[5];

1852 
u8_t
 
bödögs
, 
fc
, 
Àvñ
, 
dñ_˙t
;

1854 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1855 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1856 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1857 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1861 
bödögs
 = 0;

1862 
pcb
 = 
udp_pcbs
;

1863 (
pcb
 !
NULL
))

1865 i‡((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

1866 (
pcb
->
loˇl_p‹t
 =
udpidx
[4]))

1868 
bödögs
++;

1870 
pcb
 =Öcb->
√xt
;

1872 i‡(
bödögs
 == 1)

1876 
Àvñ
 = 0;

1877 
dñ_˙t
 = 0;

1878 
udp_∫
 = &
udp_roŸ
;

1879 (
Àvñ
 < 5Ë&& (
udp_∫
 !
NULL
))

1881 
fc
 = 
	`¢mp_mib_node_föd
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_n
);

1882 i‡(
fc
 == 0)

1885 
dñ_˙t
 = 0;

1886 
udp_∫
 = 
NULL
;

1888 i‡(
fc
 == 1)

1890 
dñ_∫
[
dñ_˙t
] = 
udp_∫
;

1891 
dñ_n
[
dñ_˙t
] = 
udp_n
;

1892 
dñ_˙t
++;

1893 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1895 i‡(
fc
 == 2)

1898 
dñ_˙t
 = 0;

1899 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1901 
Àvñ
++;

1904 
dñ_˙t
 > 0)

1906 
dñ_˙t
--;

1908 
udp_∫
 = 
dñ_∫
[
dñ_˙t
];

1909 
udp_n
 = 
dñ_n
[
dñ_˙t
];

1911 
√xt
 = 
	`¢mp_mib_node_dñëe
(
udp_∫
, 
udp_n
);

1912 i‡(
√xt
 !
NULL
)

1914 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1915 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1920 i‡(
udp_roŸ
.
cou¡
 =0Ë
ud±abÀ
.
maxÀngth
 = 0;

1921 
	}
}

1924 
	$¢mp_öc_¢mpöpkts
()

1926 
¢mpöpkts
++;

1927 
	}
}

1929 
	$¢mp_öc_¢mpouçkts
()

1931 
¢mpouçkts
++;

1932 
	}
}

1934 
	$¢mp_öc_¢mpöbadvîsi⁄s
()

1936 
¢mpöbadvîsi⁄s
++;

1937 
	}
}

1939 
	$¢mp_öc_¢mpöbadcommunôy«mes
()

1941 
¢mpöbadcommunôy«mes
++;

1942 
	}
}

1944 
	$¢mp_öc_¢mpöbadcommunôyu£s
()

1946 
¢mpöbadcommunôyu£s
++;

1947 
	}
}

1949 
	$¢mp_öc_¢mpöa¢∑r£îrs
()

1951 
¢mpöa¢∑r£îrs
++;

1952 
	}
}

1954 
	$¢mp_öc_¢mpötoobigs
()

1956 
¢mpötoobigs
++;

1957 
	}
}

1959 
	$¢mp_öc_¢mpönosuch«mes
()

1961 
¢mpönosuch«mes
++;

1962 
	}
}

1964 
	$¢mp_öc_¢mpöbadvÆues
()

1966 
¢mpöbadvÆues
++;

1967 
	}
}

1969 
	$¢mp_öc_¢mpöªad⁄lys
()

1971 
¢mpöªad⁄lys
++;

1972 
	}
}

1974 
	$¢mp_öc_¢mpögíîrs
()

1976 
¢mpögíîrs
++;

1977 
	}
}

1979 
	$¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
)

1981 
¢mpötŸÆªqv¨s
 +
vÆue
;

1982 
	}
}

1984 
	$¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
)

1986 
¢mpötŸÆ£tv¨s
 +
vÆue
;

1987 
	}
}

1989 
	$¢mp_öc_¢mpögëªque°s
()

1991 
¢mpögëªque°s
++;

1992 
	}
}

1994 
	$¢mp_öc_¢mpögë√xts
()

1996 
¢mpögë√xts
++;

1997 
	}
}

1999 
	$¢mp_öc_¢mpö£åeque°s
()

2001 
¢mpö£åeque°s
++;

2002 
	}
}

2004 
	$¢mp_öc_¢mpögëª•⁄£s
()

2006 
¢mpögëª•⁄£s
++;

2007 
	}
}

2009 
	$¢mp_öc_¢mpöå≠s
()

2011 
¢mpöå≠s
++;

2012 
	}
}

2014 
	$¢mp_öc_¢mpouâoobigs
()

2016 
¢mpouâoobigs
++;

2017 
	}
}

2019 
	$¢mp_öc_¢mpouäosuch«mes
()

2021 
¢mpouäosuch«mes
++;

2022 
	}
}

2024 
	$¢mp_öc_¢mpoutbadvÆues
()

2026 
¢mpoutbadvÆues
++;

2027 
	}
}

2029 
	$¢mp_öc_¢mpoutgíîrs
()

2031 
¢mpoutgíîrs
++;

2032 
	}
}

2034 
	$¢mp_öc_¢mpoutgëªque°s
()

2036 
¢mpoutgëªque°s
++;

2037 
	}
}

2039 
	$¢mp_öc_¢mpoutgë√xts
()

2041 
¢mpoutgë√xts
++;

2042 
	}
}

2044 
	$¢mp_öc_¢mpout£åeque°s
()

2046 
¢mpout£åeque°s
++;

2047 
	}
}

2049 
	$¢mp_öc_¢mpoutgëª•⁄£s
()

2051 
¢mpoutgëª•⁄£s
++;

2052 
	}
}

2054 
	$¢mp_öc_¢mpouâøps
()

2056 
¢mpouâøps
++;

2057 
	}
}

2059 
	$¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
)

2061 *
oid
 = &
¢mpgΩ_id
;

2062 
	}
}

2064 
	$¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2066 i‡(
vÆue
 !
NULL
)

2068 
¢m≥«bÀauthíå≠s_±r
 = 
vÆue
;

2070 
	}
}

2072 
	$¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2074 *
vÆue
 = *
¢m≥«bÀauthíå≠s_±r
;

2075 
	}
}

2078 
	$nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2080 i‡(
idít_Àn
){}

2081 i‡(
idít
){}

2082 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2083 
	}
}

2086 
	$nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2088 i‡(
od
){}

2089 i‡(
Àn
){}

2090 i‡(
vÆue
){}

2091 
	}
}

2093 
u8_t


2094 
	$nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2096 i‡(
od
){}

2097 i‡(
Àn
){}

2098 i‡(
vÆue
){}

2101 
	}
}

2104 
	$nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2106 i‡(
od
){}

2107 i‡(
Àn
){}

2108 i‡(
vÆue
){}

2109 
	}
}

2120 
	$sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2122 
u8_t
 
id
;

2125 
idít_Àn
 += 1;

2126 
idít
 -= 1;

2127 i‡(
idít_Àn
 == 2)

2129 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2130 
od
->
id_ö°_±r
 = 
idít
;

2132 
id
 = 
idít
[0];

2133 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡sy°em.%"
U16_F
".0\n",(
u16_t
)
id
));

2134 
id
)

2137 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2138 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2139 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2140 
od
->
v_Àn
 = *
sysdes¸_Àn_±r
;

2143 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2144 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2145 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2146 
od
->
v_Àn
 = 
sysobjid
.
Àn
 * (
s32_t
);

2149 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2150 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2151 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2152 
od
->
v_Àn
 = (
u32_t
);

2155 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2156 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2157 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2158 
od
->
v_Àn
 = *
sysc⁄è˘_Àn_±r
;

2161 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2162 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2163 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2164 
od
->
v_Àn
 = *
sy¢ame_Àn_±r
;

2167 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2168 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2169 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2170 
od
->
v_Àn
 = *
sy¶oˇti⁄_Àn_±r
;

2173 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2174 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2175 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2176 
od
->
v_Àn
 = (
s32_t
);

2179 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço such object\n"));

2180 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2186 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço scalar\n"));

2187 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2189 
	}
}

2200 
	$sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2202 
u8_t
 
id
;

2204 
id
 = 
od
->
id_ö°_±r
[0];

2205 
id
)

2208 
	`oc°∫˝y
(
vÆue
,
sysdes¸_±r
, 
Àn
);

2211 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
sysobjid
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2215 
	`¢mp_gë_sysu±ime
(
vÆue
);

2219 
	`oc°∫˝y
(
vÆue
,
sysc⁄è˘_±r
,
Àn
);

2222 
	`oc°∫˝y
(
vÆue
,
sy¢ame_±r
,
Àn
);

2225 
	`oc°∫˝y
(
vÆue
,
sy¶oˇti⁄_±r
,
Àn
);

2229 
s32_t
 *
söt_±r
 = 
vÆue
;

2230 *
söt_±r
 = 
sys£rvi˚s
;

2234 
	}
}

2236 
u8_t


2237 
	$sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2239 
u8_t
 
id
, 
£t_ok
;

2241 i‡(
vÆue
) {}

2242 
£t_ok
 = 0;

2243 
id
 = 
od
->
id_ö°_±r
[0];

2244 
id
)

2247 i‡((
sysc⁄è˘_±r
 !
sysc⁄è˘_deÁu…
) &&

2248 (
Àn
 <= 255))

2250 
£t_ok
 = 1;

2254 i‡((
sy¢ame_±r
 !
sy¢ame_deÁu…
) &&

2255 (
Àn
 <= 255))

2257 
£t_ok
 = 1;

2261 i‡((
sy¶oˇti⁄_±r
 !
sy¶oˇti⁄_deÁu…
) &&

2262 (
Àn
 <= 255))

2264 
£t_ok
 = 1;

2268  
£t_ok
;

2269 
	}
}

2272 
	$sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2274 
u8_t
 
id
;

2276 
id
 = 
od
->
id_ö°_±r
[0];

2277 
id
)

2280 
	`oc°∫˝y
(
sysc⁄è˘_±r
,
vÆue
,
Àn
);

2281 *
sysc⁄è˘_Àn_±r
 = 
Àn
;

2284 
	`oc°∫˝y
(
sy¢ame_±r
,
vÆue
,
Àn
);

2285 *
sy¢ame_Àn_±r
 = 
Àn
;

2288 
	`oc°∫˝y
(
sy¶oˇti⁄_±r
,
vÆue
,
Àn
);

2289 *
sy¶oˇti⁄_Àn_±r
 = 
Àn
;

2292 
	}
}

2302 
	$öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2305 
idít_Àn
 += 1;

2306 
idít
 -= 1;

2307 i‡(
idít_Àn
 == 2)

2309 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2310 
od
->
id_ö°_±r
 = 
idít
;

2312 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2313 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2314 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2315 
od
->
v_Àn
 = (
s32_t
);

2319 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("interfaces_get_object_def:Ço scalar\n"));

2320 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2322 
	}
}

2333 
	$öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2335 i‡(
Àn
){}

2336 i‡(
od
->
id_ö°_±r
[0] == 1)

2338 
s32_t
 *
söt_±r
 = 
vÆue
;

2339 *
söt_±r
 = 
iÊi°_roŸ
.
cou¡
;

2341 
	}
}

2351 
	$i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2353 
u8_t
 
id
;

2356 
idít_Àn
 += 1;

2357 
idít
 -= 1;

2358 i‡(
idít_Àn
 == 2)

2360 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2361 
od
->
id_ö°_±r
 = 
idít
;

2363 
id
 = 
idít
[0];

2364 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡i„¡ry.%"
U16_F
"\n",(
u16_t
)
id
));

2365 
id
)

2371 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2372 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2373 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2374 
od
->
v_Àn
 = (
s32_t
);

2377 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2378 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2379 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2381 
od
->
v_Àn
 = 2;

2385 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2386 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2387 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

2388 
od
->
v_Àn
 = (
u32_t
);

2392 
√tif
 *netif;

2394 
	`¢mp_ifödext⁄ëif
(
idít
[1], &
√tif
);

2395 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2396 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2397 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2398 
od
->
v_Àn
 = 
√tif
->
hwaddr_Àn
;

2402 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2403 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2404 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2405 
od
->
v_Àn
 = (
s32_t
);

2408 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2409 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2410 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2411 
od
->
v_Àn
 = (
u32_t
);

2424 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2425 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2426 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2427 
od
->
v_Àn
 = (
u32_t
);

2431 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2432 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2433 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2434 
od
->
v_Àn
 = 
if•ecific
.
Àn
 * (
s32_t
);

2437 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço such object\n"));

2438 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2444 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço scalar\n"));

2445 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2447 
	}
}

2458 
	$i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2460 
√tif
 *netif;

2461 
u8_t
 
id
;

2463 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2464 
id
 = 
od
->
id_ö°_±r
[0];

2465 
id
)

2469 
s32_t
 *
söt_±r
 = 
vÆue
;

2470 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2474 
	`oc°∫˝y
(
vÆue
,(
u8_t
*)
√tif
->
«me
,
Àn
);

2478 
s32_t
 *
söt_±r
 = 
vÆue
;

2479 *
söt_±r
 = 
√tif
->
lök_ty≥
;

2484 
s32_t
 *
söt_±r
 = 
vÆue
;

2485 *
söt_±r
 = 
√tif
->
mtu
;

2490 
u32_t
 *
uöt_±r
 = 
vÆue
;

2491 *
uöt_±r
 = 
√tif
->
lök_•ìd
;

2495 
	`oc°∫˝y
(
vÆue
,
√tif
->
hwaddr
,
Àn
);

2498 #i‡
LWIP_NETIF_LINK_CALLBACK


2500 
s32_t
 *
söt_±r
 = 
vÆue
;

2501 i‡(
	`√tif_is_up
(
√tif
))

2503 i‡(
	`√tif_is_lök_up
(
√tif
))

2505 *
söt_±r
 = 1;

2509 *
söt_±r
 = 7;

2514 *
söt_±r
 = 2;

2521 
s32_t
 *
söt_±r
 = 
vÆue
;

2522 i‡(
	`√tif_is_up
(
√tif
))

2524 *
söt_±r
 = 1;

2528 *
söt_±r
 = 2;

2534 
u32_t
 *
uöt_±r
 = 
vÆue
;

2535 *
uöt_±r
 = 
√tif
->
ts
;

2540 
u32_t
 *
uöt_±r
 = 
vÆue
;

2541 *
uöt_±r
 = 
√tif
->
iföo˘ës
;

2546 
u32_t
 *
uöt_±r
 = 
vÆue
;

2547 *
uöt_±r
 = 
√tif
->
iföuˇ°pkts
;

2552 
u32_t
 *
uöt_±r
 = 
vÆue
;

2553 *
uöt_±r
 = 
√tif
->
ifönuˇ°pkts
;

2558 
u32_t
 *
uöt_±r
 = 
vÆue
;

2559 *
uöt_±r
 = 
√tif
->
ifödisˇrds
;

2566 
u32_t
 *
uöt_±r
 = 
vÆue
;

2567 *
uöt_±r
 = 0;

2572 
u32_t
 *
uöt_±r
 = 
vÆue
;

2573 *
uöt_±r
 = 
√tif
->
ifouto˘ës
;

2578 
u32_t
 *
uöt_±r
 = 
vÆue
;

2579 *
uöt_±r
 = 
√tif
->
ifoutuˇ°pkts
;

2584 
u32_t
 *
uöt_±r
 = 
vÆue
;

2585 *
uöt_±r
 = 
√tif
->
ifouäuˇ°pkts
;

2590 
u32_t
 *
uöt_±r
 = 
vÆue
;

2591 *
uöt_±r
 = 
√tif
->
ifoutdisˇrds
;

2597 
u32_t
 *
uöt_±r
 = 
vÆue
;

2598 *
uöt_±r
 = 0;

2604 
u32_t
 *
uöt_±r
 = 
vÆue
;

2605 *
uöt_±r
 = 0;

2609 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
if•ecific
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2612 
	}
}

2614 #i‡!
SNMP_SAFE_REQUESTS


2615 
u8_t


2616 
	$i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2618 
√tif
 *netif;

2619 
u8_t
 
id
, 
£t_ok
;

2621 
£t_ok
 = 0;

2622 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2623 
id
 = 
od
->
id_ö°_±r
[0];

2624 
id
)

2628 
s32_t
 *
söt_±r
 = 
vÆue
;

2629 i‡(*
söt_±r
 == 1 || *sint_ptr == 2)

2630 
£t_ok
 = 1;

2634  
£t_ok
;

2635 
	}
}

2638 
	$i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2640 
√tif
 *netif;

2641 
u8_t
 
id
;

2643 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2644 
id
 = 
od
->
id_ö°_±r
[0];

2645 
id
)

2649 
s32_t
 *
söt_±r
 = 
vÆue
;

2650 i‡(*
söt_±r
 == 1)

2652 
	`√tif_£t_up
(
√tif
);

2654 i‡(*
söt_±r
 == 2)

2656 
	`√tif_£t_down
(
√tif
);

2661 
	}
}

2672 
	$©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2675 
idít_Àn
 += 5;

2676 
idít
 -= 5;

2678 i‡(
idít_Àn
 == 6)

2680 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2681 
od
->
id_ö°_±r
 = 
idít
;

2683 
idít
[0])

2686 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2687 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2688 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2689 
od
->
v_Àn
 = (
s32_t
);

2692 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2693 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2694 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2695 
od
->
v_Àn
 = 6;

2698 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2699 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2700 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

2701 
od
->
v_Àn
 = 4;

2704 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço such object\n"));

2705 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2711 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço scalar\n"));

2712 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2714 
	}
}

2717 
	$©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2719 #i‡
LWIP_ARP


2720 
u8_t
 
id
;

2721 
ëh_addr
* 
ëhaddr_ªt
;

2722 
ù_addr
* 
ùaddr_ªt
;

2724 
ù_addr
 
ù
;

2725 
√tif
 *netif;

2727 i‡(
Àn
) {}

2729 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2730 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

2731 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

2733 #i‡
LWIP_ARP


2734 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

2736 
id
 = 
od
->
id_ö°_±r
[0];

2737 
id
)

2741 
s32_t
 *
söt_±r
 = 
vÆue
;

2742 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2747 
ëh_addr
 *
d°
 = 
vÆue
;

2749 *
d°
 = *
ëhaddr_ªt
;

2754 
ù_addr
 *
d°
 = 
vÆue
;

2756 *
d°
 = *
ùaddr_ªt
;

2762 
	}
}

2765 
	$ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2767 
u8_t
 
id
;

2770 
idít_Àn
 += 1;

2771 
idít
 -= 1;

2772 i‡(
idít_Àn
 == 2)

2774 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2775 
od
->
id_ö°_±r
 = 
idít
;

2777 
id
 = 
idít
[0];

2778 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡ù.%"
U16_F
".0\n",(
u16_t
)
id
));

2779 
id
)

2783 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2784 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2785 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2786 
od
->
v_Àn
 = (
s32_t
);

2805 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2806 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2807 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2808 
od
->
v_Àn
 = (
u32_t
);

2811 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2812 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2813 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2814 
od
->
v_Àn
 = (
s32_t
);

2817 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço such object\n"));

2818 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2824 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço scalar\n"));

2825 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2827 
	}
}

2830 
	$ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2832 
u8_t
 
id
;

2834 i‡(
Àn
) {}

2835 
id
 = 
od
->
id_ö°_±r
[0];

2836 
id
)

2840 
s32_t
 *
söt_±r
 = 
vÆue
;

2841 #i‡
IP_FORWARD


2843 *
söt_±r
 = 1;

2846 *
söt_±r
 = 2;

2852 
s32_t
 *
söt_±r
 = 
vÆue
;

2853 *
söt_±r
 = 
IP_DEFAULT_TTL
;

2858 
u32_t
 *
uöt_±r
 = 
vÆue
;

2859 *
uöt_±r
 = 
ùöª˚ives
;

2864 
u32_t
 *
uöt_±r
 = 
vÆue
;

2865 *
uöt_±r
 = 
ùöhdªº‹s
;

2870 
u32_t
 *
uöt_±r
 = 
vÆue
;

2871 *
uöt_±r
 = 
ùöaddªº‹s
;

2876 
u32_t
 *
uöt_±r
 = 
vÆue
;

2877 *
uöt_±r
 = 
ùf‹wd©agøms
;

2882 
u32_t
 *
uöt_±r
 = 
vÆue
;

2883 *
uöt_±r
 = 
ùöunknow≈rŸos
;

2888 
u32_t
 *
uöt_±r
 = 
vÆue
;

2889 *
uöt_±r
 = 
ùödisˇrds
;

2894 
u32_t
 *
uöt_±r
 = 
vÆue
;

2895 *
uöt_±r
 = 
ùödñivîs
;

2900 
u32_t
 *
uöt_±r
 = 
vÆue
;

2901 *
uöt_±r
 = 
ùouåeque°s
;

2906 
u32_t
 *
uöt_±r
 = 
vÆue
;

2907 *
uöt_±r
 = 
ùoutdisˇrds
;

2912 
u32_t
 *
uöt_±r
 = 
vÆue
;

2913 *
uöt_±r
 = 
ùouä‹ouãs
;

2918 
s32_t
 *
söt_±r
 = 
vÆue
;

2919 #i‡
IP_REASSEMBLY


2920 *
söt_±r
 = 
IP_REASS_MAXAGE
;

2922 *
söt_±r
 = 0;

2928 
u32_t
 *
uöt_±r
 = 
vÆue
;

2929 *
uöt_±r
 = 
ùªasmªqds
;

2934 
u32_t
 *
uöt_±r
 = 
vÆue
;

2935 *
uöt_±r
 = 
ùªasmoks
;

2940 
u32_t
 *
uöt_±r
 = 
vÆue
;

2941 *
uöt_±r
 = 
ùªasmÁûs
;

2946 
u32_t
 *
uöt_±r
 = 
vÆue
;

2947 *
uöt_±r
 = 
ù‰agoks
;

2952 
u32_t
 *
uöt_±r
 = 
vÆue
;

2953 *
uöt_±r
 = 
ù‰agÁûs
;

2958 
u32_t
 *
uöt_±r
 = 
vÆue
;

2959 *
uöt_±r
 = 
ù‰ag¸óãs
;

2965 
u32_t
 *
uöt_±r
 = 
vÆue
;

2966 *
uöt_±r
 = 
ùroutögdisˇrds
;

2970 
	}
}

2982 
u8_t


2983 
	$ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2985 
u8_t
 
id
, 
£t_ok
;

2986 
s32_t
 *
söt_±r
 = 
vÆue
;

2988 i‡(
Àn
) {}

2989 
£t_ok
 = 0;

2990 
id
 = 
od
->
id_ö°_±r
[0];

2991 
id
)

2994 #i‡
IP_FORWARD


2996 i‡(*
söt_±r
 == 1)

2999 i‡(*
söt_±r
 == 2)

3002 
£t_ok
 = 1;

3006 i‡(*
söt_±r
 =
IP_DEFAULT_TTL
)

3008 
£t_ok
 = 1;

3012  
£t_ok
;

3013 
	}
}

3016 
	$ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3019 
idít_Àn
 += 4;

3020 
idít
 -= 4;

3022 i‡(
idít_Àn
 == 5)

3024 
u8_t
 
id
;

3026 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3027 
od
->
id_ö°_±r
 = 
idít
;

3029 
id
 = 
idít
[0];

3030 
id
)

3034 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3035 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3036 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3037 
od
->
v_Àn
 = 4;

3042 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3043 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3044 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3045 
od
->
v_Àn
 = (
s32_t
);

3048 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço such object\n"));

3049 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3055 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço scalar\n"));

3056 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3058 
	}
}

3061 
	$ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3063 
u8_t
 
id
;

3064 
u16_t
 
ifidx
;

3065 
ù_addr
 
ù
;

3066 
√tif
 *√ti‡
√tif_li°
;

3068 i‡(
Àn
) {}

3069 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3070 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3071 
ifidx
 = 0;

3072 (
√tif
 !
NULL
Ë&& !
	`ù_addr_cmp
(&
ù
, &√tif->
ù_addr
))

3074 
√tif
 =Çëif->
√xt
;

3075 
ifidx
++;

3078 i‡(
√tif
 !
NULL
)

3080 
id
 = 
od
->
id_ö°_±r
[0];

3081 
id
)

3085 
ù_addr
 *
d°
 = 
vÆue
;

3086 *
d°
 = 
√tif
->
ù_addr
;

3091 
s32_t
 *
söt_±r
 = 
vÆue
;

3092 *
söt_±r
 = 
ifidx
 + 1;

3097 
ù_addr
 *
d°
 = 
vÆue
;

3098 *
d°
 = 
√tif
->
√tmask
;

3103 
s32_t
 *
söt_±r
 = 
vÆue
;

3107 *
söt_±r
 = 
ù_addr_brﬂdˇ°
.
addr
 & 1;

3112 
s32_t
 *
söt_±r
 = 
vÆue
;

3113 #i‡
IP_REASSEMBLY


3118 *
söt_±r
 = (
IP_HLEN
 + ((
IP_REASS_MAX_PBUFS
/2) *

3119 (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
 - 
IP_HLEN
)));

3123 *
söt_±r
 = 0;

3129 
	}
}

3137 
	$ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3139 
u8_t
 
id
;

3142 
idít_Àn
 += 4;

3143 
idít
 -= 4;

3145 i‡(
idít_Àn
 == 5)

3147 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3148 
od
->
id_ö°_±r
 = 
idít
;

3150 
id
 = 
idít
[0];

3151 
id
)

3156 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3157 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3158 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3159 
od
->
v_Àn
 = 4;

3169 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3170 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3171 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3172 
od
->
v_Àn
 = (
s32_t
);

3175 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3176 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3177 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3178 
od
->
v_Àn
 = (
s32_t
);

3182 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3183 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3184 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

3185 
od
->
v_Àn
 = 
ùrouãöfo
.
Àn
 * (
s32_t
);

3188 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço such object\n"));

3189 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3195 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço scalar\n"));

3196 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3198 
	}
}

3201 
	$ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3203 
√tif
 *netif;

3204 
ù_addr
 
de°
;

3205 
s32_t
 *
idít
;

3206 
u8_t
 
id
;

3208 
idít
 = 
od
->
id_ö°_±r
;

3209 
	`¢mp_oidtoù
(&
idít
[1], &
de°
);

3210 
de°
.
addr
 = 
	`ht⁄l
(dest.addr);

3212 i‡(
de°
.
addr
 == 0)

3215 
√tif
 = 
√tif_deÁu…
;

3220 
√tif
 = 
√tif_li°
;

3221 (
√tif
 !
NULL
) &&

3222 !
	`ù_addr_√tcmp
(&
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) )

3224 
√tif
 =Çëif->
√xt
;

3227 i‡(
√tif
 !
NULL
)

3229 
id
 = 
idít
[0];

3230 
id
)

3234 
ù_addr
 *
d°
 = 
vÆue
;

3236 i‡(
de°
.
addr
 == 0)

3239 
d°
->
addr
 = 0;

3244 
d°
->
addr
 = 
√tif
->
ù_addr
.add∏&Çëif->
√tmask
.addr;

3250 
s32_t
 *
söt_±r
 = 
vÆue
;

3252 
	`¢mp_√ti·oifödex
(
√tif
, 
söt_±r
);

3257 
s32_t
 *
söt_±r
 = 
vÆue
;

3259 i‡(
de°
.
addr
 == 0)

3262 *
söt_±r
 = 1;

3267 *
söt_±r
 = 0;

3276 
s32_t
 *
söt_±r
 = 
vÆue
;

3278 *
söt_±r
 = -1;

3283 
ù_addr
 *
d°
 = 
vÆue
;

3285 i‡(
de°
.
addr
 == 0)

3288 *
d°
 = 
√tif
->
gw
;

3293 *
d°
 = 
√tif
->
ù_addr
;

3299 
s32_t
 *
söt_±r
 = 
vÆue
;

3301 i‡(
de°
.
addr
 == 0)

3304 *
söt_±r
 = 4;

3309 *
söt_±r
 = 3;

3315 
s32_t
 *
söt_±r
 = 
vÆue
;

3317 *
söt_±r
 = 2;

3322 
s32_t
 *
söt_±r
 = 
vÆue
;

3325 *
söt_±r
 = 0;

3330 
ù_addr
 *
d°
 = 
vÆue
;

3332 i‡(
de°
.
addr
 == 0)

3335 
d°
->
addr
 = 0;

3340 *
d°
 = 
√tif
->
√tmask
;

3345 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
ùrouãöfo
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

3349 
	}
}

3352 
	$ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3355 
idít_Àn
 += 5;

3356 
idít
 -= 5;

3358 i‡(
idít_Àn
 == 6)

3360 
u8_t
 
id
;

3362 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3363 
od
->
id_ö°_±r
 = 
idít
;

3365 
id
 = 
idít
[0];

3366 
id
)

3370 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3371 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3372 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3373 
od
->
v_Àn
 = (
s32_t
);

3376 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3377 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3378 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

3379 
od
->
v_Àn
 = 6;

3382 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3383 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3384 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3385 
od
->
v_Àn
 = 4;

3388 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço such object\n"));

3389 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3395 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço scalar\n"));

3396 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3398 
	}
}

3401 
	$ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3403 #i‡
LWIP_ARP


3404 
u8_t
 
id
;

3405 
ëh_addr
* 
ëhaddr_ªt
;

3406 
ù_addr
* 
ùaddr_ªt
;

3408 
ù_addr
 
ù
;

3409 
√tif
 *netif;

3411 i‡(
Àn
) {}

3413 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

3414 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

3415 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3417 #i‡
LWIP_ARP


3418 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

3420 
id
 = 
od
->
id_ö°_±r
[0];

3421 
id
)

3425 
s32_t
 *
söt_±r
 = 
vÆue
;

3426 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

3431 
ëh_addr
 *
d°
 = 
vÆue
;

3433 *
d°
 = *
ëhaddr_ªt
;

3438 
ù_addr
 *
d°
 = 
vÆue
;

3440 *
d°
 = *
ùaddr_ªt
;

3445 
s32_t
 *
söt_±r
 = 
vÆue
;

3447 *
söt_±r
 = 3;

3453 
	}
}

3456 
	$icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3459 
idít_Àn
 += 1;

3460 
idít
 -= 1;

3461 i‡((
idít_Àn
 == 2) &&

3462 (
idít
[0] > 0) && (ident[0] < 27))

3464 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3465 
od
->
id_ö°_±r
 = 
idít
;

3467 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3468 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3469 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3470 
od
->
v_Àn
 = (
u32_t
);

3474 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("icmp_get_object_def:Ço scalar\n"));

3475 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3477 
	}
}

3480 
	$icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3482 
u32_t
 *
uöt_±r
 = 
vÆue
;

3483 
u8_t
 
id
;

3485 i‡(
Àn
){}

3486 
id
 = 
od
->
id_ö°_±r
[0];

3487 
id
)

3490 *
uöt_±r
 = 
icmpömsgs
;

3493 *
uöt_±r
 = 
icmpöîr‹s
;

3496 *
uöt_±r
 = 
icmpöde°uƒóchs
;

3499 *
uöt_±r
 = 
icmpötimìxcds
;

3502 *
uöt_±r
 = 
icmpö∑rm¥obs
;

3505 *
uöt_±r
 = 
icmpö§cquíchs
;

3508 *
uöt_±r
 = 
icmpöªdúe˘s
;

3511 *
uöt_±r
 = 
icmpöechos
;

3514 *
uöt_±r
 = 
icmpöech‹ïs
;

3517 *
uöt_±r
 = 
icmpötime°amps
;

3520 *
uöt_±r
 = 
icmpötime°am¥ïs
;

3523 *
uöt_±r
 = 
icmpöaddrmasks
;

3526 *
uöt_±r
 = 
icmpöaddrmaskªps
;

3529 *
uöt_±r
 = 
icmpoutmsgs
;

3532 *
uöt_±r
 = 
icmpouãº‹s
;

3535 *
uöt_±r
 = 
icmpoutde°uƒóchs
;

3538 *
uöt_±r
 = 
icmpouâimìxcds
;

3541 *
uöt_±r
 = 
icmpouç¨m¥obs
;

3544 *
uöt_±r
 = 
icmpout§cquíchs
;

3547 *
uöt_±r
 = 
icmpouåedúe˘s
;

3550 *
uöt_±r
 = 
icmpouãchos
;

3553 *
uöt_±r
 = 
icmpouãch‹ïs
;

3556 *
uöt_±r
 = 
icmpouâime°amps
;

3559 *
uöt_±r
 = 
icmpouâime°am¥ïs
;

3562 *
uöt_±r
 = 
icmpouèddrmasks
;

3565 *
uöt_±r
 = 
icmpouèddrmaskªps
;

3568 
	}
}

3570 #i‡
LWIP_TCP


3573 
	$t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3575 
u8_t
 
id
;

3578 
idít_Àn
 += 1;

3579 
idít
 -= 1;

3580 i‡(
idít_Àn
 == 2)

3582 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3583 
od
->
id_ö°_±r
 = 
idít
;

3585 
id
 = 
idít
[0];

3586 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3588 
id
)

3594 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3595 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3596 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3597 
od
->
v_Àn
 = (
s32_t
);

3608 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3609 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3610 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3611 
od
->
v_Àn
 = (
u32_t
);

3614 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3615 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3616 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

3617 
od
->
v_Àn
 = (
u32_t
);

3620 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço such object\n"));

3621 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3627 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço scalar\n"));

3628 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3630 
	}
}

3633 
	$t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3635 
u32_t
 *
uöt_±r
 = 
vÆue
;

3636 
s32_t
 *
söt_±r
 = 
vÆue
;

3637 
u8_t
 
id
;

3639 i‡(
Àn
){}

3640 
id
 = 
od
->
id_ö°_±r
[0];

3641 
id
)

3644 *
söt_±r
 = 4;

3649 *
söt_±r
 = 1000;

3654 *
söt_±r
 = 60000;

3657 *
söt_±r
 = 
MEMP_NUM_TCP_PCB
;

3660 *
uöt_±r
 = 
t˝a˘ive›ís
;

3663 *
uöt_±r
 = 
t˝∑ssive›ís
;

3666 *
uöt_±r
 = 
t˝©ãm±Áûs
;

3669 *
uöt_±r
 = 
t˝e°abª£ts
;

3673 
u16_t
 
t˝cuºe°ab
 = 0;

3674 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

3675 
pcb
 !
NULL
)

3677 i‡((
pcb
->
°©e
 =
ESTABLISHED
) ||

3678 (
pcb
->
°©e
 =
CLOSE_WAIT
))

3680 
t˝cuºe°ab
++;

3682 
pcb
 =Öcb->
√xt
;

3684 *
uöt_±r
 = 
t˝cuºe°ab
;

3688 *
uöt_±r
 = 
t˝ö£gs
;

3691 *
uöt_±r
 = 
t˝out£gs
;

3694 *
uöt_±r
 = 
t˝ªå™s£gs
;

3697 *
uöt_±r
 = 
t˝öîrs
;

3700 *
uöt_±r
 = 
t˝ouå°s
;

3703 
	}
}

3704 #ifde‡
THIS_SEEMS_UNUSED


3706 
	$t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3709 
idít_Àn
 += 10;

3710 
idít
 -= 10;

3712 i‡(
idít_Àn
 == 11)

3714 
u8_t
 
id
;

3716 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3717 
od
->
id_ö°_±r
 = 
idít
;

3719 
id
 = 
idít
[0];

3720 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3722 
id
)

3725 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3726 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3727 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3728 
od
->
v_Àn
 = (
s32_t
);

3732 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3733 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3734 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3735 
od
->
v_Àn
 = 4;

3739 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3740 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3741 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3742 
od
->
v_Àn
 = (
s32_t
);

3745 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3746 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3752 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3753 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3755 
	}
}

3758 
	$t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3760 
ù_addr
 
lù
, 
rù
;

3761 
u16_t
 
Õ‹t
, 
Ω‹t
;

3762 
s32_t
 *
idít
;

3764 
idít
 = 
od
->
id_ö°_±r
;

3765 
	`¢mp_oidtoù
(&
idít
[1], &
lù
);

3766 
lù
.
addr
 = 
	`ht⁄l
(lip.addr);

3767 
Õ‹t
 = 
idít
[5];

3768 
	`¢mp_oidtoù
(&
idít
[6], &
rù
);

3769 
rù
.
addr
 = 
	`ht⁄l
(rip.addr);

3770 
Ω‹t
 = 
idít
[10];

3773 
	}
}

3778 
	$udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3781 
idít_Àn
 += 1;

3782 
idít
 -= 1;

3783 i‡((
idít_Àn
 == 2) &&

3784 (
idít
[0] > 0) && (ident[0] < 6))

3786 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3787 
od
->
id_ö°_±r
 = 
idít
;

3789 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3790 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3791 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3792 
od
->
v_Àn
 = (
u32_t
);

3796 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udp_get_object_def:Ço scalar\n"));

3797 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3799 
	}
}

3802 
	$udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3804 
u32_t
 *
uöt_±r
 = 
vÆue
;

3805 
u8_t
 
id
;

3807 i‡(
Àn
){}

3808 
id
 = 
od
->
id_ö°_±r
[0];

3809 
id
)

3812 *
uöt_±r
 = 
udpöd©agøms
;

3815 *
uöt_±r
 = 
ud≤›‹ts
;

3818 *
uöt_±r
 = 
udpöîr‹s
;

3821 *
uöt_±r
 = 
udpoutd©agøms
;

3824 
	}
}

3827 
	$ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3830 
idít_Àn
 += 5;

3831 
idít
 -= 5;

3833 i‡(
idít_Àn
 == 6)

3835 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3836 
od
->
id_ö°_±r
 = 
idít
;

3838 
idít
[0])

3841 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3842 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3843 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3844 
od
->
v_Àn
 = 4;

3847 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3848 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3849 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3850 
od
->
v_Àn
 = (
s32_t
);

3853 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço such object\n"));

3854 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3860 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço scalar\n"));

3861 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3863 
	}
}

3866 
	$ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3868 
u8_t
 
id
;

3869 
udp_pcb
 *
pcb
;

3870 
ù_addr
 
ù
;

3871 
u16_t
 
p‹t
;

3873 i‡(
Àn
){}

3874 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3875 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3876 
p‹t
 = 
od
->
id_ö°_±r
[5];

3878 
pcb
 = 
udp_pcbs
;

3879 (
pcb
 !
NULL
) &&

3880 !((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

3881 (
pcb
->
loˇl_p‹t
 =
p‹t
)))

3883 
pcb
 =Öcb->
√xt
;

3886 i‡(
pcb
 !
NULL
)

3888 
id
 = 
od
->
id_ö°_±r
[0];

3889 
id
)

3893 
ù_addr
 *
d°
 = 
vÆue
;

3894 *
d°
 = 
pcb
->
loˇl_ù
;

3899 
s32_t
 *
söt_±r
 = 
vÆue
;

3900 *
söt_±r
 = 
pcb
->
loˇl_p‹t
;

3905 
	}
}

3908 
	$¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3911 
idít_Àn
 += 1;

3912 
idít
 -= 1;

3913 i‡(
idít_Àn
 == 2)

3915 
u8_t
 
id
;

3917 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3918 
od
->
id_ö°_±r
 = 
idít
;

3920 
id
 = 
idít
[0];

3921 
id
)

3950 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3951 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3952 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3953 
od
->
v_Àn
 = (
u32_t
);

3956 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3957 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3958 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3959 
od
->
v_Àn
 = (
s32_t
);

3962 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço such object\n"));

3963 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço scalar\n"));

3970 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3972 
	}
}

3975 
	$¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3977 
u32_t
 *
uöt_±r
 = 
vÆue
;

3978 
u8_t
 
id
;

3980 i‡(
Àn
){}

3981 
id
 = 
od
->
id_ö°_±r
[0];

3982 
id
)

3985 *
uöt_±r
 = 
¢mpöpkts
;

3988 *
uöt_±r
 = 
¢mpouçkts
;

3991 *
uöt_±r
 = 
¢mpöbadvîsi⁄s
;

3994 *
uöt_±r
 = 
¢mpöbadcommunôy«mes
;

3997 *
uöt_±r
 = 
¢mpöbadcommunôyu£s
;

4000 *
uöt_±r
 = 
¢mpöa¢∑r£îrs
;

4003 *
uöt_±r
 = 
¢mpötoobigs
;

4006 *
uöt_±r
 = 
¢mpönosuch«mes
;

4009 *
uöt_±r
 = 
¢mpöbadvÆues
;

4012 *
uöt_±r
 = 
¢mpöªad⁄lys
;

4015 *
uöt_±r
 = 
¢mpögíîrs
;

4018 *
uöt_±r
 = 
¢mpötŸÆªqv¨s
;

4021 *
uöt_±r
 = 
¢mpötŸÆ£tv¨s
;

4024 *
uöt_±r
 = 
¢mpögëªque°s
;

4027 *
uöt_±r
 = 
¢mpögë√xts
;

4030 *
uöt_±r
 = 
¢mpö£åeque°s
;

4033 *
uöt_±r
 = 
¢mpögëª•⁄£s
;

4036 *
uöt_±r
 = 
¢mpöå≠s
;

4039 *
uöt_±r
 = 
¢mpouâoobigs
;

4042 *
uöt_±r
 = 
¢mpouäosuch«mes
;

4045 *
uöt_±r
 = 
¢mpoutbadvÆues
;

4048 *
uöt_±r
 = 
¢mpoutgíîrs
;

4051 *
uöt_±r
 = 
¢mpoutgëªque°s
;

4054 *
uöt_±r
 = 
¢mpoutgë√xts
;

4057 *
uöt_±r
 = 
¢mpout£åeque°s
;

4060 *
uöt_±r
 = 
¢mpoutgëª•⁄£s
;

4063 *
uöt_±r
 = 
¢mpouâøps
;

4066 *
uöt_±r
 = *
¢m≥«bÀauthíå≠s_±r
;

4069 
	}
}

4078 
u8_t


4079 
	$¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4081 
u8_t
 
id
, 
£t_ok
;

4083 i‡(
Àn
) {}

4084 
£t_ok
 = 0;

4085 
id
 = 
od
->
id_ö°_±r
[0];

4086 i‡(
id
 == 30)

4089 
s32_t
 *
söt_±r
 = 
vÆue
;

4091 i‡(
¢m≥«bÀauthíå≠s_±r
 !&
¢m≥«bÀauthíå≠s_deÁu…
)

4094 i‡((*
söt_±r
 == 1) || (*sint_ptr == 2))

4096 
£t_ok
 = 1;

4102 i‡(*
söt_±r
 =
¢m≥«bÀauthíå≠s_deÁu…
)

4104 
£t_ok
 = 1;

4108  
£t_ok
;

4109 
	}
}

4112 
	$¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4114 
u8_t
 
id
;

4116 i‡(
Àn
) {}

4117 
id
 = 
od
->
id_ö°_±r
[0];

4118 i‡(
id
 == 30)

4121 
s32_t
 *
söt_±r
 = 
vÆue
;

4122 *
¢m≥«bÀauthíå≠s_±r
 = *
söt_±r
;

4124 
	}
}

	@core/snmp/mib_structs.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/¢mp_°ru˘s.h
"

40 
	~"lwù/mem.h
"

43 c⁄° 
s32_t
 
	g¥efix
[4] = {1, 3, 6, 1};

45 
	#NODE_STACK_SIZE
 (
LWIP_SNMP_OBJ_ID_LEN
)

	)

47 
	sn£


50 
mib_node
* 
	mr_±r
;

52 
s32_t
 
	mr_id
;

54 
u8_t
 
	mr_∆
;

56 
u8_t
 
	gnode_°ack_˙t
;

57 
n£
 
	gnode_°ack
[
NODE_STACK_SIZE
];

63 
	$push_node
(
n£
* 
node
)

65 
	`LWIP_ASSERT
("node_°ack_˙à< NODE_STACK_SIZE",
node_°ack_˙t
 < 
NODE_STACK_SIZE
);

66 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("push_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

67 i‡(
node_°ack_˙t
 < 
NODE_STACK_SIZE
)

69 
node_°ack
[
node_°ack_˙t
] = *
node
;

70 
node_°ack_˙t
++;

72 
	}
}

78 
	$p›_node
(
n£
* 
node
)

80 i‡(
node_°ack_˙t
 > 0)

82 
node_°ack_˙t
--;

83 *
node
 = 
node_°ack
[
node_°ack_˙t
];

85 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("p›_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

86 
	}
}

94 
	$¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif)

96 
√tif
 *
nif
 = 
√tif_li°
;

97 
u16_t
 
i
, 
ifidx
;

99 
ifidx
 = 
ifödex
 - 1;

100 
i
 = 0;

101 (
nif
 !
NULL
Ë&& (
i
 < 
ifidx
))

103 
nif
 =Çif->
√xt
;

104 
i
++;

106 *
√tif
 = 
nif
;

107 
	}
}

115 
	$¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
)

117 
√tif
 *
nif
 = 
√tif_li°
;

118 
u16_t
 
i
;

120 
i
 = 0;

121 
nif
 !
√tif
)

123 
nif
 =Çif->
√xt
;

124 
i
++;

126 *
ifidx
 = 
i
+1;

127 
	}
}

135 
	$¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
)

137 
u32_t
 
ùa
;

139 
ùa
 = 
idít
[0];

140 
ùa
 <<= 8;

141 
ùa
 |
idít
[1];

142 
ùa
 <<= 8;

143 
ùa
 |
idít
[2];

144 
ùa
 <<= 8;

145 
ùa
 |
idít
[3];

146 
ù
->
addr
 = 
ùa
;

147 
	}
}

155 
	$¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
)

157 
u32_t
 
ùa
;

159 
ùa
 = 
ù
->
addr
;

160 
idít
[0] = (
ùa
 >> 24) & 0xff;

161 
idít
[1] = (
ùa
 >> 16) & 0xff;

162 
idít
[2] = (
ùa
 >> 8) & 0xff;

163 
idít
[3] = 
ùa
 & 0xff;

164 
	}
}

166 
mib_li°_node
 *

167 
	$¢mp_mib_ _Æloc
(
s32_t
 
id
)

169 
mib_li°_node
 *
 
;

171 
 
 = (
mib_li°_node
 *)
	`mem_mÆloc
((mib_list_node));

172 i‡(
 
 !
NULL
)

174 
 
->
¥ev
 = 
NULL
;

175 
 
->
√xt
 = 
NULL
;

176 
 
->
objid
 = 
id
;

177 
 
->
≈å
 = 
NULL
;

179  
 
;

180 
	}
}

183 
	$¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
)

185 
	`mem_‰ì
(
 
);

186 
	}
}

188 
mib_li°_roŸnode
 *

189 
	$¢mp_mib_Ãn_Æloc
()

191 
mib_li°_roŸnode
 *
Ãn
;

193 
Ãn
 = (
mib_li°_roŸnode
*)
	`mem_mÆloc
((mib_list_rootnode));

194 i‡(
Ãn
 !
NULL
)

196 
Ãn
->
gë_obje˘_def
 = 
nﬁófs_gë_obje˘_def
;

197 
Ãn
->
gë_vÆue
 = 
nﬁófs_gë_vÆue
;

198 
Ãn
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

199 
Ãn
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

200 
Ãn
->
node_ty≥
 = 
MIB_NODE_LR
;

201 
Ãn
->
maxÀngth
 = 0;

202 
Ãn
->
hód
 = 
NULL
;

203 
Ãn
->
èû
 = 
NULL
;

204 
Ãn
->
cou¡
 = 0;

206  
Ãn
;

207 
	}
}

210 
	$¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
)

212 
	`mem_‰ì
(
Ãn
);

213 
	}
}

226 
s8_t


227 
	$¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
)

229 
mib_li°_node
 *
¬
;

230 
s8_t
 
ö£π
;

232 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

235 
ö£π
 = 0;

236 i‡(
∫
->
hód
 =
NULL
)

239 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯em±yÜi° objid==%"
S32_F
"\n",
objid
));

240 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

241 i‡(
¬
 !
NULL
)

243 
∫
->
hód
 = 
¬
;

244 
∫
->
èû
 = 
¬
;

245 *
ö¢
 = 
¬
;

246 
ö£π
 = 1;

250 
ö£π
 = -1;

255 
mib_li°_node
 *
n
;

257 
n
 = 
∫
->
hód
;

258 (
n
 !
NULL
Ë&& (
ö£π
 == 0))

260 i‡(
n
->
objid
 == objid)

263 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("nodêÆªadyÅhîêobjid==%"
S32_F
"\n",
objid
));

264 *
ö¢
 = 
n
;

265 
ö£π
 = 2;

267 i‡(
n
->
objid
 < objid)

269 i‡(
n
->
√xt
 =
NULL
)

272 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†èû objid==%"
S32_F
"\n",
objid
));

273 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

274 i‡(
¬
 !
NULL
)

276 
¬
->
√xt
 = 
NULL
;

277 
¬
->
¥ev
 = 
n
;

278 
n
->
√xt
 = 
¬
;

279 
∫
->
èû
 = 
¬
;

280 *
ö¢
 = 
¬
;

281 
ö£π
 = 1;

286 
ö£π
 = -1;

292 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("traverseÜist\n"));

293 
n
 =Ç->
√xt
;

300 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†n->¥ev, objid==%"
S32_F
",Ç\n",
objid
));

301 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

302 i‡(
¬
 !
NULL
)

304 i‡(
n
->
¥ev
 =
NULL
)

307 
¬
->
√xt
 = 
n
;

308 
¬
->
¥ev
 = 
NULL
;

309 
∫
->
hód
 = 
¬
;

310 
n
->
¥ev
 = 
¬
;

315 
¬
->
√xt
 = 
n
;

316 
¬
->
¥ev
 = 
n
->prev;

317 
n
->
¥ev
->
√xt
 = 
¬
;

318 
n
->
¥ev
 = 
¬
;

320 *
ö¢
 = 
¬
;

321 
ö£π
 = 1;

326 
ö£π
 = -1;

331 i‡(
ö£π
 == 1)

333 
∫
->
cou¡
 += 1;

335 
	`LWIP_ASSERT
("ö£π !0",
ö£π
 != 0);

336  
ö£π
;

337 
	}
}

348 
s8_t


349 
	$¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
)

351 
s8_t
 
fc
;

352 
mib_li°_node
 *
n
;

354 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

355 
n
 = 
∫
->
hód
;

356 (
n
 !
NULL
Ë&& (n->
objid
 != objid))

358 
n
 =Ç->
√xt
;

360 i‡(
n
 =
NULL
)

362 
fc
 = 0;

364 i‡(
n
->
≈å
 =
NULL
)

367 
fc
 = 1;

371 
mib_li°_roŸnode
 *
r
;

373 i‡(
n
->
≈å
->
node_ty≥
 =
MIB_NODE_LR
)

375 
r
 = (
mib_li°_roŸnode
 *)
n
->
≈å
;

376 i‡(
r
->
cou¡
 > 1)

379 
fc
 = 2;

384 
fc
 = 1;

390 
fc
 = 3;

393 *
‚
 = 
n
;

394  
fc
;

395 
	}
}

405 
mib_li°_roŸnode
 *

406 
	$¢mp_mib_node_dñëe
(
mib_li°_roŸnode
 *
∫
, 
mib_li°_node
 *
n
)

408 
mib_li°_roŸnode
 *
√xt
;

410 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

411 
	`LWIP_ASSERT
("¿!NULL",
n
 !
NULL
);

414 
√xt
 = (
mib_li°_roŸnode
*)(
n
->
≈å
);

415 
∫
->
cou¡
 -= 1;

417 i‡(
n
 =
∫
->
hód
)

419 
∫
->
hód
 = 
n
->
√xt
;

420 i‡(
n
->
√xt
 !
NULL
)

423 
n
->
√xt
->
¥ev
 = 
NULL
;

426 i‡(
n
 =
∫
->
èû
)

428 
∫
->
èû
 = 
n
->
¥ev
;

429 i‡(
n
->
¥ev
 !
NULL
)

432 
n
->
¥ev
->
√xt
 = 
NULL
;

438 
n
->
¥ev
->
√xt
 =Ç->next;

439 
n
->
√xt
->
¥ev
 =Ç->prev;

441 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("‰ìÜi° objid==%"
S32_F
"\n",
n
->
objid
));

442 
	`¢mp_mib_ _‰ì
(
n
);

443 i‡(
∫
->
cou¡
 == 0)

445 
∫
->
hód
 = 
NULL
;

446 
∫
->
èû
 = 
NULL
;

448  
√xt
;

449 
	}
}

462 
mib_node
 *

463 
	$¢mp_£¨ch_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
)

465 
u8_t
 
node_ty≥
, 
ext_Àvñ
;

467 
ext_Àvñ
 = 0;

468 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("node==%∞*idít==%"
S32_F
"\n",(*)
node
,*
idít
));

469 
node
 !
NULL
)

471 
node_ty≥
 = 
node
->node_type;

472 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

474 
mib_¨øy_node
 *
™
;

475 
u16_t
 
i
;

477 i‡(
idít_Àn
 > 0)

480 
™
 = (
mib_¨øy_node
 *)
node
;

481 
i
 = 0;

482 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] !*
idít
))

484 
i
++;

486 i‡(
i
 < 
™
->
maxÀngth
)

489 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

490 i‡(
™
->
≈å
[
i
] =
NULL
)

494 
≈
->
idít_Àn
 = ident_len;

495 
≈
->
idít
 = ident;

496  (
mib_node
*)
™
;

501 
idít
++;

502 
idít_Àn
--;

503 
node
 = 
™
->
≈å
[
i
];

509 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™ sórch faûed *idít==%"
S32_F
"\n",*
idít
));

510  
NULL
;

516 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("an search failed, short object identifier\n"));

517  
NULL
;

520 if(
node_ty≥
 =
MIB_NODE_LR
)

522 
mib_li°_roŸnode
 *
Ãn
;

523 
mib_li°_node
 *
 
;

525 i‡(
idít_Àn
 > 0)

528 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

529 
 
 = 
Ãn
->
hód
;

531 (
 
 !
NULL
Ë&& ( ->
objid
 !*
idít
))

533 
 
 =Ün->
√xt
;

535 i‡(
 
 !
NULL
)

538 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

539 i‡(
 
->
≈å
 =
NULL
)

541 
≈
->
idít_Àn
 = ident_len;

542 
≈
->
idít
 = ident;

543  (
mib_node
*)
Ãn
;

548 
idít_Àn
--;

549 
idít
++;

550 
node
 = 
 
->
≈å
;

556 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("  sórch faûed *idít==%"
S32_F
"\n",*
idít
));

557  
NULL
;

563 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ln search failed, short object identifier\n"));

564  
NULL
;

567 if(
node_ty≥
 =
MIB_NODE_EX
)

569 
mib_exã∫Æ_node
 *
í
;

570 
u16_t
 
i
, 
Àn
;

572 i‡(
idít_Àn
 > 0)

575 
í
 = (
mib_exã∫Æ_node
 *)
node
;

577 
i
 = 0;

578 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

579 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) != 0))

581 
i
++;

583 i‡(
i
 < 
Àn
)

585 
s32_t
 
debug_id
;

587 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
debug_id
);

588 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid==%"
S32_F
" *idít==%"S32_F"\n",
debug_id
,*
idít
));

589 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

591 
≈
->
idít_Àn
 = ident_len;

592 
≈
->
idít
 = ident;

593  (
mib_node
*)
í
;

598 
idít_Àn
--;

599 
idít
++;

600 
ext_Àvñ
++;

606 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í sórch faûed *idít==%"
S32_F
"\n",*
idít
));

607  
NULL
;

613 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("en search failed, short object identifier\n"));

614  
NULL
;

617 i‡(
node_ty≥
 =
MIB_NODE_SC
)

619 
mib_sˇœr_node
 *
¢
;

621 
¢
 = (
mib_sˇœr_node
 *)
node
;

622 i‡((
idít_Àn
 =1Ë&& (*
idít
 == 0))

624 
≈
->
idít_Àn
 = ident_len;

625 
≈
->
idít
 = ident;

626  (
mib_node
*)
¢
;

631 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("search failed, invalid object identifierÜength\n"));

632  
NULL
;

638 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

639  
NULL
;

643 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode==%p\n",(*)
node
));

644  
NULL
;

645 
	}
}

650 
u8_t


651 
	$em±y_èbÀ
(
mib_node
 *
node
)

653 
u8_t
 
node_ty≥
;

654 
u8_t
 
em±y
 = 0;

656 i‡(
node
 !
NULL
)

658 
node_ty≥
 = 
node
->node_type;

659 i‡(
node_ty≥
 =
MIB_NODE_LR
)

661 
mib_li°_roŸnode
 *
Ãn
;

662 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

663 i‡((
Ãn
->
cou¡
 =0Ë|| (Ãn->
hód
 =
NULL
))

665 
em±y
 = 1;

668 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

670 
mib_¨øy_node
 *
™
;

671 
™
 = (
mib_¨øy_node
 *)
node
;

672 i‡((
™
->
maxÀngth
 =0Ë|| (™->
≈å
 =
NULL
))

674 
em±y
 = 1;

677 i‡(
node_ty≥
 =
MIB_NODE_EX
)

679 
mib_exã∫Æ_node
 *
í
;

680 
í
 = (
mib_exã∫Æ_node
 *)
node
;

681 i‡(
í
->
åì_Àvñs
 == 0)

683 
em±y
 = 1;

687  
em±y
;

688 
	}
}

693 
mib_node
 *

694 
	$¢mp_ex∑nd_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

696 
u8_t
 
node_ty≥
, 
ext_Àvñ
, 
˛imb_åì
;

698 
ext_Àvñ
 = 0;

700 
node_°ack_˙t
 = 0;

701 
node
 !
NULL
)

703 
˛imb_åì
 = 0;

704 
node_ty≥
 = 
node
->node_type;

705 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

707 
mib_¨øy_node
 *
™
;

708 
u16_t
 
i
;

711 
™
 = (
mib_¨øy_node
 *)
node
;

712 i‡(
idít_Àn
 > 0)

714 
i
 = 0;

715 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] < *
idít
))

717 
i
++;

719 i‡(
i
 < 
™
->
maxÀngth
)

721 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

723 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
];

724 (
oidªt
->
Àn
)++;

726 i‡(
™
->
≈å
[
i
] =
NULL
)

728 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

730 i‡(
™
->
objid
[
i
] > *
idít
)

732  (
mib_node
*)
™
;

734 i‡((
i
 + 1Ë< 
™
->
maxÀngth
)

737 (
oidªt
->
Àn
)--;

738 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
 + 1];

739 (
oidªt
->
Àn
)++;

740  (
mib_node
*)
™
;

745 (
oidªt
->
Àn
)--;

746 
˛imb_åì
 = 1;

751 
u8_t
 
j
;

752 
n£
 
cur_node
;

754 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

756 
j
 = 
i
 + 1;

757 (
j
 < 
™
->
maxÀngth
Ë&& (
	`em±y_èbÀ
◊n->
≈å
[j])))

759 
j
++;

761 i‡(
j
 < 
™
->
maxÀngth
)

763 
cur_node
.
r_±r
 = 
™
->
≈å
[
j
];

764 
cur_node
.
r_id
 = 
™
->
objid
[
j
];

765 
cur_node
.
r_∆
 = 0;

769 
cur_node
.
r_±r
 = 
NULL
;

771 
	`push_node
(&
cur_node
);

772 i‡(
™
->
objid
[
i
] =*
idít
)

774 
idít_Àn
--;

775 
idít
++;

780 
idít_Àn
 = 0;

783 
node
 = 
™
->
≈å
[
i
];

789 
˛imb_åì
 = 1;

794 
u8_t
 
j
;

796 
j
 = 0;

797 (
j
 < 
™
->
maxÀngth
Ë&& 
	`em±y_èbÀ
◊n->
≈å
[j]))

799 
j
++;

801 i‡(
j
 < 
™
->
maxÀngth
)

803 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·án->objid[j]==%"
S32_F
"\n",
™
->
objid
[
j
]));

804 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
j
];

805 (
oidªt
->
Àn
)++;

806 i‡(
™
->
≈å
[
j
] =
NULL
)

809  (
mib_node
*)
™
;

814 
node
 = 
™
->
≈å
[
j
];

820 
˛imb_åì
 = 1;

824 if(
node_ty≥
 =
MIB_NODE_LR
)

826 
mib_li°_roŸnode
 *
Ãn
;

827 
mib_li°_node
 *
 
;

830 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

831 i‡(
idít_Àn
 > 0)

833 
 
 = 
Ãn
->
hód
;

835 (
 
 !
NULL
Ë&& ( ->
objid
 < *
idít
))

837 
 
 =Ün->
√xt
;

839 i‡(
 
 !
NULL
)

841 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

842 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
objid
;

843 (
oidªt
->
Àn
)++;

844 i‡(
 
->
≈å
 =
NULL
)

847 i‡(
 
->
objid
 > *
idít
)

849  (
mib_node
*)
Ãn
;

851 i‡(
 
->
√xt
 !
NULL
)

854 (
oidªt
->
Àn
)--;

855 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
√xt
->
objid
;

856 (
oidªt
->
Àn
)++;

857  (
mib_node
*)
Ãn
;

862 (
oidªt
->
Àn
)--;

863 
˛imb_åì
 = 1;

868 
mib_li°_node
 *
jn
;

869 
n£
 
cur_node
;

872 
jn
 = 
 
->
√xt
;

873 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

875 
jn
 = jn->
√xt
;

877 i‡(
jn
 !
NULL
)

879 
cur_node
.
r_±r
 = 
jn
->
≈å
;

880 
cur_node
.
r_id
 = 
jn
->
objid
;

881 
cur_node
.
r_∆
 = 0;

885 
cur_node
.
r_±r
 = 
NULL
;

887 
	`push_node
(&
cur_node
);

888 i‡(
 
->
objid
 =*
idít
)

890 
idít_Àn
--;

891 
idít
++;

896 
idít_Àn
 = 0;

899 
node
 = 
 
->
≈å
;

906 
˛imb_åì
 = 1;

911 
mib_li°_node
 *
jn
;

913 
jn
 = 
Ãn
->
hód
;

914 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

916 
jn
 = jn->
√xt
;

918 i‡(
jn
 !
NULL
)

920 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À· jn->objid==%"
S32_F
"\n",
jn
->
objid
));

921 
oidªt
->
id
[oidªt->
Àn
] = 
jn
->
objid
;

922 (
oidªt
->
Àn
)++;

923 i‡(
jn
->
≈å
 =
NULL
)

926 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("jn->nptr == NULL\n"));

927  (
mib_node
*)
Ãn
;

932 
node
 = 
jn
->
≈å
;

938 
˛imb_åì
 = 1;

942 if(
node_ty≥
 =
MIB_NODE_EX
)

944 
mib_exã∫Æ_node
 *
í
;

945 
s32_t
 
ex_id
;

948 
í
 = (
mib_exã∫Æ_node
 *)
node
;

949 i‡(
idít_Àn
 > 0)

951 
u16_t
 
i
, 
Àn
;

953 
i
 = 0;

954 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

955 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) < 0))

957 
i
++;

959 i‡(
i
 < 
Àn
)

962 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
ex_id
);

963 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
ex_id
,*
idít
));

964 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

965 (
oidªt
->
Àn
)++;

967 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

971 i‡(
ex_id
 > *
idít
)

973  (
mib_node
*)
í
;

975 i‡((
i
 + 1Ë< 
Àn
)

978 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
 + 1,&
ex_id
);

979 (
oidªt
->
Àn
)--;

980 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

981 (
oidªt
->
Àn
)++;

982  (
mib_node
*)
í
;

987 (
oidªt
->
Àn
)--;

988 
˛imb_åì
 = 1;

993 
u8_t
 
j
;

994 
n£
 
cur_node
;

996 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

998 
j
 = 
i
 + 1;

999 i‡(
j
 < 
Àn
)

1002 
cur_node
.
r_±r
 = 
node
;

1003 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
j
,&
cur_node
.
r_id
);

1004 
cur_node
.
r_∆
 = 
ext_Àvñ
 + 1;

1008 
cur_node
.
r_±r
 = 
NULL
;

1010 
	`push_node
(&
cur_node
);

1011 i‡(
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,
i
,*
idít
) == 0)

1013 
idít_Àn
--;

1014 
idít
++;

1019 
idít_Àn
 = 0;

1022 
ext_Àvñ
++;

1028 
˛imb_åì
 = 1;

1034 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,0,&
ex_id
);

1035 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·Én->objid==%"
S32_F
"\n",
ex_id
));

1036 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

1037 (
oidªt
->
Àn
)++;

1038 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

1041 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("(ext_level + 1) ==Én->tree_levels\n"));

1042  (
mib_node
*)
í
;

1047 
ext_Àvñ
++;

1051 if(
node_ty≥
 =
MIB_NODE_SC
)

1053 
mib_sˇœr_node
 *
¢
;

1056 
¢
 = (
mib_sˇœr_node
 *)
node
;

1057 i‡(
idít_Àn
 > 0)

1060 
˛imb_åì
 = 1;

1065 
oidªt
->
id
[oidªt->
Àn
] = 0;

1066 (
oidªt
->
Àn
)++;

1068 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("completed scalarÜeaf\n"));

1069  (
mib_node
*)
¢
;

1075 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

1076  
NULL
;

1079 i‡(
˛imb_åì
)

1081 
n£
 
chûd
;

1084 
chûd
.
r_±r
 = 
NULL
;

1085 
chûd
.
r_id
 = 0;

1086 
chûd
.
r_∆
 = 0;

1087 (
node_°ack_˙t
 > 0Ë&& (
chûd
.
r_±r
 =
NULL
))

1089 
	`p›_node
(&
chûd
);

1091 (
oidªt
->
Àn
)--;

1093 i‡(
chûd
.
r_±r
 !
NULL
)

1096 
idít_Àn
 = 0;

1097 
oidªt
->
id
[oidªt->
Àn
] = 
chûd
.
r_id
;

1098 
oidªt
->
Àn
++;

1099 
node
 = 
chûd
.
r_±r
;

1100 
ext_Àvñ
 = 
chûd
.
r_∆
;

1105 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("expand failed,ÅreeÉnds here\n"));

1106  
NULL
;

1111 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode==%p\n",(*)
node
));

1112  
NULL
;

1113 
	}
}

1122 
u8_t


1123 
	$¢mp_iso_¥efix_t°
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

1125 i‡((
idít_Àn
 > 3) &&

1126 (
idít
[0] == 1) && (ident[1] == 3) &&

1127 (
idít
[2] == 6) && (ident[3] == 1))

1135 
	}
}

1148 
u8_t


1149 
	$¢mp_iso_¥efix_ex∑nd
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

1151 c⁄° 
s32_t
 *
¥efix_±r
;

1152 
s32_t
 *
ªt_±r
;

1153 
u8_t
 
i
;

1155 
i
 = 0;

1156 
¥efix_±r
 = &
¥efix
[0];

1157 
ªt_±r
 = &
oidªt
->
id
[0];

1158 
idít_Àn
 = ((ident_len < 4)?ident_len:4);

1159 (
i
 < 
idít_Àn
Ë&& ((*
idít
Ë<(*
¥efix_±r
)))

1161 *
ªt_±r
++ = *
¥efix_±r
++;

1162 
idít
++;

1163 
i
++;

1165 i‡(
i
 =
idít_Àn
)

1168 
i
 < 4)

1170 *
ªt_±r
++ = *
¥efix_±r
++;

1171 
i
++;

1173 
oidªt
->
Àn
 = 
i
;

1181 
	}
}

	@core/snmp/msg_in.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/udp.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/¢mp.h
"

44 
	~"lwù/¢mp_a¢1.h
"

45 
	~"lwù/¢mp_msg.h
"

46 
	~"lwù/¢mp_°ru˘s.h
"

48 
	~<°rög.h
>

52 c⁄° 
s32_t
 
	g¢mp_vîsi⁄
 = 0;

54 c⁄° 
	g¢mp_publiccommunôy
[7] = "public";

57 
¢mp_msg_p°©
 
	gmsg_öput_li°
[
SNMP_CONCURRENT_REQUESTS
];

59 
udp_pcb
 *
	g¢mp1_pcb
;

61 
¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

62 
îr_t
 
¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

63 
îr_t
 
¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

71 
	$¢mp_öô
()

73 
¢mp_msg_p°©
 *
msg_ps
;

74 
u8_t
 
i
;

76 
¢mp1_pcb
 = 
	`udp_√w
();

77 i‡(
¢mp1_pcb
 !
NULL
)

79 
	`udp_ªcv
(
¢mp1_pcb
, 
¢mp_ªcv
, (*)
SNMP_IN_PORT
);

80 
	`udp_böd
(
¢mp1_pcb
, 
IP_ADDR_ANY
, 
SNMP_IN_PORT
);

82 
msg_ps
 = &
msg_öput_li°
[0];

83 
i
=0; i<
SNMP_CONCURRENT_REQUESTS
; i++)

85 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

86 
msg_ps
->
îr‹_ödex
 = 0;

87 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

88 
msg_ps
++;

90 
å≠_msg
.
pcb
 = 
¢mp1_pcb
;

93 
	`¢mp_cﬁd°¨t_å≠
();

94 
	}
}

97 
	$¢mp_îr‹_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
, 
u8_t
 
îr‹
)

99 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

100 
msg_ps
->
outvb
 = msg_ps->
övb
;

101 
msg_ps
->
övb
.
hód
 = 
NULL
;

102 
msg_ps
->
övb
.
èû
 = 
NULL
;

103 
msg_ps
->
övb
.
cou¡
 = 0;

104 
msg_ps
->
îr‹_°©us
 = 
îr‹
;

105 
msg_ps
->
îr‹_ödex
 = 1 + msg_ps->
vb_idx
;

106 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

107 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

108 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

109 
	}
}

112 
	$¢mp_ok_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
)

114 
îr_t
 
îr_ªt
;

116 
îr_ªt
 = 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

117 i‡(
îr_ªt
 =
ERR_MEM
)

123 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_evíà%"
S32_F
"\n",
msg_ps
->
îr‹_°©us
));

126 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
övb
);

127 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

128 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

129 
	}
}

138 
	$¢mp_msg_gë_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

140 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

142 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

144 
mib_exã∫Æ_node
 *
í
;

145 
¢mp_«me_±r
 
≈
;

148 
í
 = 
msg_ps
->
ext_mib_node
;

149 
≈
 = 
msg_ps
->
ext_«me_±r
;

152 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

153 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

155 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

156 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

160 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

162 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

165 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

167 
mib_exã∫Æ_node
 *
í
;

168 
¢mp_v¨böd
 *
vb
;

171 
í
 = 
msg_ps
->
ext_mib_node
;

174 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

175 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

176 i‡(
vb
 !
NULL
)

178 
vb
->
√xt
 = 
NULL
;

179 
vb
->
¥ev
 = 
NULL
;

182 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

183 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

185 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

186 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

188 
vb
->
vÆue_ty≥
 = 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
;

189 
vb
->
vÆue_Àn
 = 
msg_ps
->
ext_obje˘_def
.
v_Àn
;

190 i‡(
vb
->
vÆue_Àn
 > 0)

192 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

193 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

194 i‡(
vb
->
vÆue
 !
NULL
)

196 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

197 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

199 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

200 
msg_ps
->
vb_idx
 += 1;

204 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

205 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço variable space\n"));

206 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

207 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

208 
	`mem_‰ì
(
vb
);

209 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

215 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

216 
vb
->
vÆue
 = 
NULL
;

217 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

219 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

220 
msg_ps
->
vb_idx
 += 1;

225 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

226 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço outvb space\n"));

227 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

231 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

232 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

234 
mib_node
 *
mn
;

235 
¢mp_«me_±r
 
≈
;

237 i‡(
msg_ps
->
vb_idx
 == 0)

239 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

243 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

246 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

248 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

249 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

250 i‡(
mn
 !
NULL
)

252 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

255 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

257 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

259 
msg_ps
->
ext_mib_node
 = 
í
;

260 
msg_ps
->
ext_«me_±r
 = 
≈
;

262 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

267 
obj_def
 
obje˘_def
;

269 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

270 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

271 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

273 
mn
 = mn;

278 
mn
 = 
NULL
;

280 i‡(
mn
 !
NULL
)

282 
¢mp_v¨böd
 *
vb
;

284 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

286 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

287 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

288 i‡(
vb
 !
NULL
)

290 
vb
->
√xt
 = 
NULL
;

291 
vb
->
¥ev
 = 
NULL
;

294 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

295 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

297 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

298 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

300 
vb
->
vÆue_ty≥
 = 
obje˘_def
.
a¢_ty≥
;

301 
vb
->
vÆue_Àn
 = 
obje˘_def
.
v_Àn
;

302 i‡(
vb
->
vÆue_Àn
 > 0)

304 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

305 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

306 i‡(
vb
->
vÆue
 !
NULL
)

308 
mn
->
	`gë_vÆue
(&
obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

309 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

310 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

311 
msg_ps
->
vb_idx
 += 1;

315 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate variable space\n"));

316 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

317 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

318 
	`mem_‰ì
(
vb
);

319 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

325 
vb
->
vÆue
 = 
NULL
;

326 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

327 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

328 
msg_ps
->
vb_idx
 += 1;

333 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate outvb space\n"));

334 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

342 
mn
 = 
NULL
;

344 i‡(
mn
 =
NULL
)

347 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

350 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

351 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

353 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

355 
	}
}

364 
	$¢mp_msg_gë√xt_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

366 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë√xt_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

368 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

370 
mib_exã∫Æ_node
 *
í
;

373 
í
 = 
msg_ps
->
ext_mib_node
;

376 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1], &msg_ps->
ext_obje˘_def
);

377 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

379 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

380 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

384 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1]);

386 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

389 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

391 
mib_exã∫Æ_node
 *
í
;

392 
¢mp_v¨böd
 *
vb
;

395 
í
 = 
msg_ps
->
ext_mib_node
;

397 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
msg_ps
->
ext_oid
,

398 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
,

399 
msg_ps
->
ext_obje˘_def
.
v_Àn
);

400 i‡(
vb
 !
NULL
)

402 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

403 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

404 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

405 
msg_ps
->
vb_idx
 += 1;

409 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

410 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_getnext_event: couldn'tállocate outvb space\n"));

411 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

415 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

416 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

418 
mib_node
 *
mn
;

419 
¢mp_obj_id
 
oid
;

421 i‡(
msg_ps
->
vb_idx
 == 0)

423 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

427 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

429 i‡(
	`¢mp_iso_¥efix_ex∑nd
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
, &
oid
))

431 i‡(
msg_ps
->
vb_±r
->
idít_Àn
 > 3)

434 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
,

435 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

436 
msg_ps
->
vb_±r
->
idít
 + 4, &
oid
);

441 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
, 0, 
NULL
, &
oid
);

446 
mn
 = 
NULL
;

448 i‡(
mn
 !
NULL
)

450 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

453 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

455 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

457 
msg_ps
->
ext_mib_node
 = 
í
;

458 
msg_ps
->
ext_oid
 = 
oid
;

460 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 1, &
oid
.
id
[oid.
Àn
 - 1]);

465 
obj_def
 
obje˘_def
;

466 
¢mp_v¨böd
 *
vb
;

468 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

469 
mn
->
	`gë_obje˘_def
(1, &
oid
.
id
[oid.
Àn
 - 1], &
obje˘_def
);

471 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
obje˘_def
.
a¢_ty≥
, obje˘_def.
v_Àn
);

472 i‡(
vb
 !
NULL
)

474 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

475 
mn
->
	`gë_vÆue
(&
obje˘_def
, obje˘_def.
v_Àn
, 
vb
->
vÆue
);

476 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

477 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

478 
msg_ps
->
vb_idx
 += 1;

482 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_recv couldn'tállocate outvb space\n"));

483 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

487 i‡(
mn
 =
NULL
)

490 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

493 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

494 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

496 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

498 
	}
}

507 
	$¢mp_msg_£t_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

509 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_£t_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

511 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

513 
mib_exã∫Æ_node
 *
í
;

514 
¢mp_«me_±r
 
≈
;

517 
í
 = 
msg_ps
->
ext_mib_node
;

518 
≈
 = 
msg_ps
->
ext_«me_±r
;

521 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

522 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

524 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_TEST
;

525 
í
->
	`£t_ã°_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

529 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

531 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

534 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_TEST
)

536 
mib_exã∫Æ_node
 *
í
;

539 
í
 = 
msg_ps
->
ext_mib_node
;

541 i‡(
msg_ps
->
ext_obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

543 i‡((
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
 =msg_ps->
vb_±r
->
vÆue_ty≥
) &&

544 (
í
->
	`£t_ã°_a
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
,

545 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

547 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

548 
msg_ps
->
vb_idx
 += 1;

552 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

554 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

559 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

561 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

564 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
)

566 
mib_exã∫Æ_node
 *
í
;

567 
¢mp_«me_±r
 
≈
;

570 
í
 = 
msg_ps
->
ext_mib_node
;

571 
≈
 = 
msg_ps
->
ext_«me_±r
;

574 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

575 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

577 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_VALUE
;

578 
í
->
	`£t_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

579 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

583 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

585 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_GENERROR
);

588 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_VALUE
)

590 
mib_exã∫Æ_node
 *
í
;

593 
í
 = 
msg_ps
->
ext_mib_node
;

594 
í
->
	`£t_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

595 
msg_ps
->
vb_±r
->
vÆue_Àn
, msg_ps->vb_±r->
vÆue
);

598 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

599 
msg_ps
->
vb_idx
 += 1;

603 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

604 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

606 
mib_node
 *
mn
;

607 
¢mp_«me_±r
 
≈
;

609 i‡(
msg_ps
->
vb_idx
 == 0)

611 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

615 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

618 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

620 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

621 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

622 i‡(
mn
 !
NULL
)

624 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

627 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

629 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

631 
msg_ps
->
ext_mib_node
 = 
í
;

632 
msg_ps
->
ext_«me_±r
 = 
≈
;

634 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

639 
obj_def
 
obje˘_def
;

641 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

642 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

643 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

645 
mn
 = mn;

650 
mn
 = 
NULL
;

652 i‡(
mn
 !
NULL
)

654 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_TEST
;

656 i‡(
obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

658 i‡((
obje˘_def
.
a¢_ty≥
 =
msg_ps
->
vb_±r
->
vÆue_ty≥
) &&

659 (
mn
->
	`£t_ã°
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

661 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

662 
msg_ps
->
vb_idx
 += 1;

667 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

673 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

681 
mn
 = 
NULL
;

683 i‡(
mn
 =
NULL
)

686 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

690 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

691 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

693 
msg_ps
->
vb_idx
 = 0;

694 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

698 (
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

699 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

701 
mib_node
 *
mn
;

702 
¢mp_«me_±r
 
≈
;

704 i‡(
msg_ps
->
vb_idx
 == 0)

706 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

710 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

713 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

714 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

717 i‡(
mn
 !
NULL
)

719 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

722 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

724 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
;

726 
msg_ps
->
ext_mib_node
 = 
í
;

727 
msg_ps
->
ext_«me_±r
 = 
≈
;

729 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

734 
obj_def
 
obje˘_def
;

736 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF_S
;

737 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

738 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

739 
mn
->
	`£t_vÆue
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

740 
msg_ps
->
vb_idx
 += 1;

744 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

745 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

750 
msg_ps
->
outvb
 = msg_ps->
övb
;

751 
msg_ps
->
övb
.
hód
 = 
NULL
;

752 
msg_ps
->
övb
.
èû
 = 
NULL
;

753 
msg_ps
->
övb
.
cou¡
 = 0;

754 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

756 
	}
}

766 
	$¢mp_msg_evít
(
u8_t
 
ªque°_id
)

768 
¢mp_msg_p°©
 *
msg_ps
;

770 i‡(
ªque°_id
 < 
SNMP_CONCURRENT_REQUESTS
)

772 
msg_ps
 = &
msg_öput_li°
[
ªque°_id
];

773 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
)

775 
	`¢mp_msg_gë√xt_evít
(
ªque°_id
, 
msg_ps
);

777 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
)

779 
	`¢mp_msg_gë_evít
(
ªque°_id
, 
msg_ps
);

781 if(
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

783 
	`¢mp_msg_£t_evít
(
ªque°_id
, 
msg_ps
);

786 
	}
}

791 
	$¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

793 
udp_hdr
 *
udphdr
;

796 
	`LWIP_UNUSED_ARG
(
¨g
);

798 if(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)){

799 
	`LWIP_ASSERT
("Can't moveÅo UDP header", 0);

800 
	`pbuf_‰ì
(
p
);

803 
udphdr
 = 
p
->
∑ylﬂd
;

806 i‡((
pcb
 =
¢mp1_pcb
Ë&& (
	`¡ohs
(
udphdr
->
de°
Ë=
SNMP_IN_PORT
))

808 
¢mp_msg_p°©
 *
msg_ps
;

809 
u8_t
 
ªq_idx
;

812 
msg_ps
 = &
msg_öput_li°
[0];

813 
ªq_idx
 = 0;

814 (
ªq_idx
<
SNMP_CONCURRENT_REQUESTS
Ë&& (
msg_ps
->
°©e
 !
SNMP_MSG_EMPTY
))

816 
ªq_idx
++;

817 
msg_ps
++;

819 i‡(
ªq_idx
 !
SNMP_CONCURRENT_REQUESTS
)

821 
îr_t
 
îr_ªt
;

822 
u16_t
 
∑ylﬂd_Àn
;

823 
u16_t
 
∑ylﬂd_ofs
;

824 
u16_t
 
v¨böd_ofs
 = 0;

827 
	`¢mp_öc_¢mpöpkts
();

829 
msg_ps
->
pcb
 =Öcb;

831 
msg_ps
->
sù
 = *
addr
;

833 
msg_ps
->
•
 = 
p‹t
;

835 
∑ylﬂd_Àn
 = 
	`¡ohs
(
udphdr
->
Àn
Ë- 
UDP_HLEN
;

838 
∑ylﬂd_ofs
 = 
UDP_HLEN
;

841 
îr_ªt
 = 
	`¢mp_pdu_hódî_check
(
p
, 
∑ylﬂd_ofs
, 
∑ylﬂd_Àn
, &
v¨böd_ofs
, 
msg_ps
);

842 i‡(((
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
) ||

843 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
) ||

844 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)) &&

845 ((
msg_ps
->
îr‹_°©us
 =
SNMP_ES_NOERROR
) &&

846 (
msg_ps
->
îr‹_ödex
 == 0)) )

849 
îr_ªt
 =Érr_ret;

854 
îr_ªt
 = 
ERR_ARG
;

856 i‡(
îr_ªt
 =
ERR_OK
)

858 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv ok, communôy %s\n", 
msg_ps
->
communôy
));

862 
îr_ªt
 = 
	`¢mp_pdu_dec_v¨bödli°
(
p
, 
v¨böd_ofs
, &v¨böd_ofs, 
msg_ps
);

863 i‡((
îr_ªt
 =
ERR_OK
Ë&& (
msg_ps
->
övb
.
cou¡
 > 0))

866 
	`pbuf_‰ì
(
p
);

868 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

869 
msg_ps
->
îr‹_ödex
 = 0;

871 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

873 
msg_ps
->
vb_idx
 = 0;

875 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv v¨böd c¡=%"
U16_F
"\n",(
u16_t
)
msg_ps
->
övb
.
cou¡
));

878 
	`¢mp_msg_evít
(
ªq_idx
);

885 
	`pbuf_‰ì
(
p
);

886 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_dec_varbindlist() failed\n"));

893 
	`pbuf_‰ì
(
p
);

894 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_header_check() failed\n"));

900 
	`pbuf_‰ì
(
p
);

906 
	`pbuf_‰ì
(
p
);

908 
	}
}

922 
îr_t


923 
	$¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

925 
îr_t
 
dîr
;

926 
u16_t
 
Àn
, 
ofs_ba£
;

927 
u8_t
 
Àn_o˘ës
;

928 
u8_t
 
ty≥
;

929 
s32_t
 
vîsi⁄
;

931 
ofs_ba£
 = 
ofs
;

932 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

933 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

934 i‡((
dîr
 !
ERR_OK
) ||

935 (
pdu_Àn
 !(1 + 
Àn_o˘ës
 + 
Àn
)) ||

936 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

938 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

939  
ERR_ARG
;

941 
ofs
 +(1 + 
Àn_o˘ës
);

942 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

943 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

944 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

947 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

948  
ERR_ARG
;

950 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
vîsi⁄
);

951 i‡(
dîr
 !
ERR_OK
)

954 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

955  
ERR_ARG
;

957 i‡(
vîsi⁄
 != 0)

960 
	`¢mp_öc_¢mpöbadvîsi⁄s
();

961  
ERR_ARG
;

963 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

964 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

965 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

966 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
)))

969 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

970  
ERR_ARG
;

972 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
SNMP_COMMUNITY_STR_LEN
, 
m_°©
->
communôy
);

973 i‡(
dîr
 !
ERR_OK
)

975 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

976  
ERR_ARG
;

979 
Àn
 = (÷í < (
SNMP_COMMUNITY_STR_LEN
))?(len):(SNMP_COMMUNITY_STR_LEN));

980 
m_°©
->
communôy
[
Àn
] = 0;

981 
m_°©
->
com_°æí
 = 
Àn
;

982 i‡(
	`°∫cmp
(
¢mp_publiccommunôy
, (c⁄° *)
m_°©
->
communôy
, 
SNMP_COMMUNITY_STR_LEN
) != 0)

985 
	`¢mp_öc_¢mpöbadcommunôy«mes
();

986 
	`¢mp_authÁû_å≠
();

987  
ERR_ARG
;

989 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

990 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

991 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

992 i‡(
dîr
 !
ERR_OK
)

994 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

995  
ERR_ARG
;

997 
ty≥
)

999 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_REQ
):

1001 
	`¢mp_öc_¢mpögëªque°s
();

1002 
dîr
 = 
ERR_OK
;

1004 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_NEXT_REQ
):

1006 
	`¢mp_öc_¢mpögë√xts
();

1007 
dîr
 = 
ERR_OK
;

1009 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
):

1011 
	`¢mp_öc_¢mpögëª•⁄£s
();

1012 
dîr
 = 
ERR_ARG
;

1014 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_SET_REQ
):

1016 
	`¢mp_öc_¢mpö£åeque°s
();

1017 
dîr
 = 
ERR_OK
;

1019 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
):

1021 
	`¢mp_öc_¢mpöå≠s
();

1022 
dîr
 = 
ERR_ARG
;

1025 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1026 
dîr
 = 
ERR_ARG
;

1029 i‡(
dîr
 !
ERR_OK
)

1032  
ERR_ARG
;

1034 
m_°©
->
π
 = 
ty≥
 & 0x1F;

1035 
ofs
 +(1 + 
Àn_o˘ës
);

1036 i‡(
Àn
 !(
pdu_Àn
 - (
ofs
 - 
ofs_ba£
)))

1039 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1040  
ERR_ARG
;

1042 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1043 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1044 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1047 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1048  
ERR_ARG
;

1050 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
rid
);

1051 i‡(
dîr
 !
ERR_OK
)

1054 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1055  
ERR_ARG
;

1057 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1058 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1059 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1060 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1063 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1064  
ERR_ARG
;

1068 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_°©us
);

1069 i‡(
dîr
 !
ERR_OK
)

1072 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1073  
ERR_ARG
;

1075 
m_°©
->
îr‹_°©us
)

1077 
SNMP_ES_TOOBIG
:

1078 
	`¢mp_öc_¢mpötoobigs
();

1080 
SNMP_ES_NOSUCHNAME
:

1081 
	`¢mp_öc_¢mpönosuch«mes
();

1083 
SNMP_ES_BADVALUE
:

1084 
	`¢mp_öc_¢mpöbadvÆues
();

1086 
SNMP_ES_READONLY
:

1087 
	`¢mp_öc_¢mpöªad⁄lys
();

1089 
SNMP_ES_GENERROR
:

1090 
	`¢mp_öc_¢mpögíîrs
();

1093 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1094 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1095 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1096 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1099 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1100  
ERR_ARG
;

1104 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_ödex
);

1105 i‡(
dîr
 !
ERR_OK
)

1108 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1109  
ERR_ARG
;

1111 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1112 *
ofs_ªt
 = 
ofs
;

1113  
ERR_OK
;

1114 
	}
}

1116 
îr_t


1117 
	$¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

1119 
îr_t
 
dîr
;

1120 
u16_t
 
Àn
, 
vb_Àn
;

1121 
u8_t
 
Àn_o˘ës
;

1122 
u8_t
 
ty≥
;

1125 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1126 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
vb_Àn
);

1127 i‡((
dîr
 !
ERR_OK
) ||

1128 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

1130 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1131  
ERR_ARG
;

1133 
ofs
 +(1 + 
Àn_o˘ës
);

1136 
m_°©
->
övb
.
cou¡
 = 0;

1137 
m_°©
->
övb
.
hód
 = 
NULL
;

1138 
m_°©
->
övb
.
èû
 = 
NULL
;

1140 
vb_Àn
 > 0)

1142 
¢mp_obj_id
 
oid
, 
oid_vÆue
;

1143 
¢mp_v¨böd
 *
vb
;

1145 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1146 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1147 i‡((
dîr
 !
ERR_OK
) ||

1148 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)) ||

1149 (
Àn
 =0Ë|| (À¿> 
vb_Àn
))

1151 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1153 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1154  
ERR_ARG
;

1156 
ofs
 +(1 + 
Àn_o˘ës
);

1157 
vb_Àn
 -(1 + 
Àn_o˘ës
);

1159 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1160 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1161 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
)))

1164 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1166 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1167  
ERR_ARG
;

1169 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid
);

1170 i‡(
dîr
 !
ERR_OK
)

1173 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1175 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1176  
ERR_ARG
;

1178 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1179 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1181 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1182 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1183 i‡(
dîr
 !
ERR_OK
)

1186 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1188 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1189  
ERR_ARG
;

1192 
ty≥
)

1194 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

1195 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
s32_t
));

1196 i‡(
vb
 !
NULL
)

1198 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1200 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1201 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1205 
dîr
 = 
ERR_ARG
;

1208 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

1209 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

1210 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

1211 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u32_t
));

1212 i‡(
vb
 !
NULL
)

1214 
u32_t
 *
v±r
 = 
vb
->
vÆue
;

1216 
dîr
 = 
	`¢mp_a¢1_dec_u32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1217 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1221 
dîr
 = 
ERR_ARG
;

1224 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

1225 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

1226 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
Àn
);

1227 i‡(
vb
 !
NULL
)

1229 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1230 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1234 
dîr
 = 
ERR_ARG
;

1237 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

1238 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 0);

1239 i‡(
vb
 !
NULL
)

1241 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1242 
dîr
 = 
ERR_OK
;

1246 
dîr
 = 
ERR_ARG
;

1249 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

1250 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid_vÆue
);

1251 i‡(
dîr
 =
ERR_OK
)

1253 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
oid_vÆue
.
Àn
 * (
s32_t
));

1254 i‡(
vb
 !
NULL
)

1256 
u8_t
 
i
 = 
oid_vÆue
.
Àn
;

1257 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1259 
i
 > 0)

1261 
i
--;

1262 
v±r
[
i
] = 
oid_vÆue
.
id
[i];

1264 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1265 
dîr
 = 
ERR_OK
;

1269 
dîr
 = 
ERR_ARG
;

1273 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

1274 i‡(
Àn
 == 4)

1277 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 4);

1278 i‡(
vb
 !
NULL
)

1280 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1281 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1285 
dîr
 = 
ERR_ARG
;

1290 
dîr
 = 
ERR_ARG
;

1294 
dîr
 = 
ERR_ARG
;

1297 i‡(
dîr
 !
ERR_OK
)

1299 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1301 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1302  
ERR_ARG
;

1304 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1305 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1308 i‡(
m_°©
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

1310 
	`¢mp_add_¢mpötŸÆ£tv¨s
(
m_°©
->
övb
.
cou¡
);

1314 
	`¢mp_add_¢mpötŸÆªqv¨s
(
m_°©
->
övb
.
cou¡
);

1317 *
ofs_ªt
 = 
ofs
;

1318  
ERR_OK
;

1319 
	}
}

1321 
¢mp_v¨böd
*

1322 
	$¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
)

1324 
¢mp_v¨böd
 *
vb
;

1326 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

1327 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

1328 i‡(
vb
 !
NULL
)

1330 
u8_t
 
i
;

1332 
vb
->
√xt
 = 
NULL
;

1333 
vb
->
¥ev
 = 
NULL
;

1334 
i
 = 
oid
->
Àn
;

1335 
vb
->
idít_Àn
 = 
i
;

1336 i‡(
i
 > 0)

1339 
vb
->
idít
 = (
s32_t
*)
	`mem_mÆloc
((s32_tË* 
i
);

1340 
	`LWIP_ASSERT
("vb->idíà!NULL",
vb
->
idít
 !
NULL
);

1341 i‡(
vb
->
idít
 =
NULL
)

1343 
	`mem_‰ì
(
vb
);

1344  
NULL
;

1346 
i
 > 0)

1348 
i
--;

1349 
vb
->
idít
[
i
] = 
oid
->
id
[i];

1355 
vb
->
idít
 = 
NULL
;

1357 
vb
->
vÆue_ty≥
 = 
ty≥
;

1358 
vb
->
vÆue_Àn
 = 
Àn
;

1359 i‡(
Àn
 > 0)

1362 
vb
->
vÆue
 = 
	`mem_mÆloc
(
Àn
);

1363 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

1364 i‡(
vb
->
vÆue
 =
NULL
)

1366 i‡(
vb
->
idít
 !
NULL
)

1368 
	`mem_‰ì
(
vb
->
idít
);

1370 
	`mem_‰ì
(
vb
);

1371  
NULL
;

1377 
vb
->
vÆue
 = 
NULL
;

1380  
vb
;

1381 
	}
}

1384 
	$¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
)

1386 i‡(
vb
->
vÆue
 !
NULL
 )

1388 
	`mem_‰ì
(
vb
->
vÆue
);

1390 i‡(
vb
->
idít
 !
NULL
 )

1392 
	`mem_‰ì
(
vb
->
idít
);

1394 
	`mem_‰ì
(
vb
);

1395 
	}
}

1398 
	$¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1400 
¢mp_v¨böd
 *
vb
, *
¥ev
;

1402 
vb
 = 
roŸ
->
èû
;

1403  
vb
 !
NULL
 )

1405 
¥ev
 = 
vb
->prev;

1406 
	`¢mp_v¨böd_‰ì
(
vb
);

1407 
vb
 = 
¥ev
;

1409 
roŸ
->
cou¡
 = 0;

1410 
roŸ
->
hód
 = 
NULL
;

1411 
roŸ
->
èû
 = 
NULL
;

1412 
	}
}

1415 
	$¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
)

1417 i‡(
roŸ
->
cou¡
 == 0)

1420 
roŸ
->
hód
 = 
vb
;

1421 
roŸ
->
èû
 = 
vb
;

1426 
roŸ
->
èû
->
√xt
 = 
vb
;

1427 
vb
->
¥ev
 = 
roŸ
->
èû
;

1428 
roŸ
->
èû
 = 
vb
;

1430 
roŸ
->
cou¡
 += 1;

1431 
	}
}

1433 
¢mp_v¨böd
*

1434 
	$¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1436 
¢mp_v¨böd
* 
vb
;

1438 i‡(
roŸ
->
cou¡
 > 0)

1441 
vb
 = 
roŸ
->
èû
;

1442 
roŸ
->
èû
 = 
vb
->
¥ev
;

1443 
vb
->
¥ev
->
√xt
 = 
NULL
;

1444 
roŸ
->
cou¡
 -= 1;

1449 
vb
 = 
NULL
;

1451  
vb
;

1452 
	}
}

	@core/snmp/msg_out.c

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_SNMP


49 
	~"lwù/udp.h
"

50 
	~"lwù/√tif.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/¢mp_a¢1.h
"

53 
	~"lwù/¢mp_msg.h
"

55 
	s¢mp_å≠_d°


58 
ù_addr
 
	mdù
;

60 
u8_t
 
	míabÀ
;

62 
¢mp_å≠_d°
 
	gå≠_d°
[
SNMP_TRAP_DESTINATIONS
];

65 
¢mp_msg_å≠
 
	gå≠_msg
;

67 
u16_t
 
¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, u16_à
vb_Àn
);

68 
u16_t
 
¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, u16_à
vb_Àn
);

69 
u16_t
 
¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
);

71 
u16_t
 
¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
);

72 
u16_t
 
¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
);

73 
u16_t
 
¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, u16_à
ofs
);

81 
	$¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
)

83 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

85 
å≠_d°
[
d°_idx
].
íabÀ
 =Énable;

87 
	}
}

95 
	$¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
)

97 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

99 
å≠_d°
[
d°_idx
].
dù
.
addr
 = 
	`ht⁄l
(
d°
->addr);

101 
	}
}

112 
îr_t


113 
	$¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
)

115 
¢mp_v¨böd_roŸ
 
em±yvb
 = {
NULL
, NULL, 0, 0, 0};

116 
pbuf
 *
p
;

117 
u16_t
 
tŸ_Àn
;

118 
îr_t
 
îr
;

121 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
m_°©
->
outvb
);

122 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

125 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

126 i‡(
p
 =
NULL
)

128 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()ÅooBig\n"));

131 
m_°©
->
îr‹_°©us
 = 
SNMP_ES_TOOBIG
;

132 
m_°©
->
îr‹_ödex
 = 0;

134 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
em±yvb
);

135 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

137 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

139 i‡(
p
 !
NULL
)

142 
u16_t
 
ofs
;

144 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()Ö != NULL\n"));

147 
ofs
 = 
	`¢mp_ª•_hódî_íc
(
m_°©
, 
p
);

148 i‡(
m_°©
->
îr‹_°©us
 =
SNMP_ES_TOOBIG
)

150 
	`¢mp_v¨böd_li°_íc
(&
em±yvb
, 
p
, 
ofs
);

154 
	`¢mp_v¨böd_li°_íc
(&
m_°©
->
outvb
, 
p
, 
ofs
);

157 
m_°©
->
îr‹_°©us
)

159 
SNMP_ES_TOOBIG
:

160 
	`¢mp_öc_¢mpouâoobigs
();

162 
SNMP_ES_NOSUCHNAME
:

163 
	`¢mp_öc_¢mpouäosuch«mes
();

165 
SNMP_ES_BADVALUE
:

166 
	`¢mp_öc_¢mpoutbadvÆues
();

168 
SNMP_ES_GENERROR
:

169 
	`¢mp_öc_¢mpoutgíîrs
();

172 
	`¢mp_öc_¢mpoutgëª•⁄£s
();

173 
	`¢mp_öc_¢mpouçkts
();

177 
	`udp_c⁄√˘
(
m_°©
->
pcb
, &m_°©->
sù
, m_°©->
•
);

178 
îr
 = 
	`udp_£nd
(
m_°©
->
pcb
, 
p
);

179 i‡(
îr
 =
ERR_MEM
)

182 
îr
 = 
ERR_MEM
;

186 
îr
 = 
ERR_OK
;

189 
	`udp_disc⁄√˘
(
m_°©
->
pcb
);

191 
	`pbuf_‰ì
(
p
);

192 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response() done\n"));

193  
îr
;

199  
ERR_MEM
;

201 
	}
}

219 
îr_t


220 
	$¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
)

222 
¢mp_å≠_d°
 *
td
;

223 
√tif
 *
d°_if
;

224 
ù_addr
 
d°_ù
;

225 
pbuf
 *
p
;

226 
u16_t
 
i
,
tŸ_Àn
;

228 
i
=0, 
td
 = &
å≠_d°
[0]; i<
SNMP_TRAP_DESTINATIONS
; i++,Åd++)

230 i‡((
td
->
íabÀ
 !0Ë&& (td->
dù
.
addr
 != 0))

233 
å≠_msg
.
dù
.
addr
 = 
td
->dip.addr;

235 
d°_if
 = 
	`ù_rouã
(&
td
->
dù
);

236 
d°_ù
.
addr
 = 
	`¡ohl
(
d°_if
->
ù_addr
.addr);

237 
å≠_msg
.
sù_øw
[0] = 
d°_ù
.
addr
 >> 24;

238 
å≠_msg
.
sù_øw
[1] = 
d°_ù
.
addr
 >> 16;

239 
å≠_msg
.
sù_øw
[2] = 
d°_ù
.
addr
 >> 8;

240 
å≠_msg
.
sù_øw
[3] = 
d°_ù
.
addr
;

241 
å≠_msg
.
gí_å≠
 = 
gíîic_å≠
;

242 
å≠_msg
.
•c_å≠
 = 
•ecific_å≠
;

243 i‡(
gíîic_å≠
 =
SNMP_GENTRAP_ENTERPRISESPC
)

246 
å≠_msg
.
íãΩri£
 = 
eoid
;

251 
	`¢mp_gë_¢mpgΩid_±r
(&
å≠_msg
.
íãΩri£
);

253 
	`¢mp_gë_sysu±ime
(&
å≠_msg
.
ts
);

256 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
å≠_msg
.
outvb
);

257 
tŸ_Àn
 = 
	`¢mp_å≠_hódî_sum
(&
å≠_msg
,Åot_len);

260 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

261 i‡(
p
 !
NULL
)

263 
u16_t
 
ofs
;

266 
ofs
 = 
	`¢mp_å≠_hódî_íc
(&
å≠_msg
, 
p
);

267 
	`¢mp_v¨böd_li°_íc
(&
å≠_msg
.
outvb
, 
p
, 
ofs
);

269 
	`¢mp_öc_¢mpouâøps
();

270 
	`¢mp_öc_¢mpouçkts
();

273 
	`udp_c⁄√˘
(
å≠_msg
.
pcb
, &å≠_msg.
dù
, 
SNMP_TRAP_PORT
);

274 
	`udp_£nd
(
å≠_msg
.
pcb
, 
p
);

276 
	`udp_disc⁄√˘
(
å≠_msg
.
pcb
);

278 
	`pbuf_‰ì
(
p
);

282  
ERR_MEM
;

286  
ERR_OK
;

287 
	}
}

290 
	$¢mp_cﬁd°¨t_å≠
()

292 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

293 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

294 
å≠_msg
.
outvb
.
cou¡
 = 0;

295 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_COLDSTART
, 
NULL
, 0);

296 
	}
}

299 
	$¢mp_authÁû_å≠
()

301 
u8_t
 
íabÀ
;

302 
	`¢mp_gë_¢m≥«bÀauthíå≠s
(&
íabÀ
);

303 i‡(
íabÀ
 == 1)

305 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

306 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

307 
å≠_msg
.
outvb
.
cou¡
 = 0;

308 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_AUTHFAIL
, 
NULL
, 0);

310 
	}
}

320 
u16_t


321 
	$¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, 
u16_t
 
vb_Àn
)

323 
u16_t
 
tŸ_Àn
;

324 
¢mp_ª•_hódî_Àngths
 *
rhl
;

326 
rhl
 = &
m_°©
->rhl;

327 
tŸ_Àn
 = 
vb_Àn
;

328 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_ödex
, &
rhl
->
îridxÀn
);

329 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îridxÀn
, &rhl->
îridxÀ∆í
);

330 
tŸ_Àn
 +1 + 
rhl
->
îridxÀ∆í
 +Ñhl->
îridxÀn
;

332 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_°©us
, &
rhl
->
îr°©Àn
);

333 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îr°©Àn
, &rhl->
îr°©À∆í
);

334 
tŸ_Àn
 +1 + 
rhl
->
îr°©À∆í
 +Ñhl->
îr°©Àn
;

336 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
rid
, &
rhl
->
ridÀn
);

337 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
ridÀn
, &rhl->
ridÀ∆í
);

338 
tŸ_Àn
 +1 + 
rhl
->
ridÀ∆í
 +Ñhl->
ridÀn
;

340 
rhl
->
pduÀn
 = 
tŸ_Àn
;

341 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
pduÀn
, &rhl->
pduÀ∆í
);

342 
tŸ_Àn
 +1 + 
rhl
->
pduÀ∆í
;

344 
rhl
->
comÀn
 = 
m_°©
->
com_°æí
;

345 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
comÀn
, &rhl->
comÀ∆í
);

346 
tŸ_Àn
 +1 + 
rhl
->
comÀ∆í
 +Ñhl->
comÀn
;

348 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
rhl
->
vîÀn
);

349 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
vîÀn
, &rhl->
vîÀ∆í
);

350 
tŸ_Àn
 +1 + 
rhl
->
vîÀn
 +Ñhl->
vîÀ∆í
;

352 
rhl
->
£qÀn
 = 
tŸ_Àn
;

353 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
£qÀn
, &rhl->
£qÀ∆í
);

354 
tŸ_Àn
 +1 + 
rhl
->
£qÀ∆í
;

356  
tŸ_Àn
;

357 
	}
}

367 
u16_t


368 
	$¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, 
u16_t
 
vb_Àn
)

370 
u16_t
 
tŸ_Àn
;

371 
¢mp_å≠_hódî_Àngths
 *
thl
;

373 
thl
 = &
m_å≠
->thl;

374 
tŸ_Àn
 = 
vb_Àn
;

376 
	`¢mp_a¢1_íc_u32t_˙t
(
m_å≠
->
ts
, &
thl
->
t¶í
);

377 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
t¶í
, &thl->
t¶íÀn
);

378 
tŸ_Àn
 +1 + 
thl
->
t¶í
 +Åhl->
t¶íÀn
;

380 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
•c_å≠
, &
thl
->
°ΩÀn
);

381 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
°ΩÀn
, &thl->
°ΩÀ∆í
);

382 
tŸ_Àn
 +1 + 
thl
->
°ΩÀn
 +Åhl->
°ΩÀ∆í
;

384 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
gí_å≠
, &
thl
->
gå∂í
);

385 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
gå∂í
, &thl->
gå∂íÀn
);

386 
tŸ_Àn
 +1 + 
thl
->
gå∂í
 +Åhl->
gå∂íÀn
;

388 
thl
->
Øddæí
 = 4;

389 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
Øddæí
, &thl->
ØddæíÀn
);

390 
tŸ_Àn
 +1 + 
thl
->
Øddæí
 +Åhl->
ØddæíÀn
;

392 
	`¢mp_a¢1_íc_oid_˙t
(
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0], &
thl
->
eidÀn
);

393 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
eidÀn
, &thl->
eidÀ∆í
);

394 
tŸ_Àn
 +1 + 
thl
->
eidÀn
 +Åhl->
eidÀ∆í
;

396 
thl
->
pduÀn
 = 
tŸ_Àn
;

397 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
pduÀn
, &thl->
pduÀ∆í
);

398 
tŸ_Àn
 +1 + 
thl
->
pduÀ∆í
;

400 
thl
->
comÀn
 = (
¢mp_publiccommunôy
) - 1;

401 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
comÀn
, &thl->
comÀ∆í
);

402 
tŸ_Àn
 +1 + 
thl
->
comÀ∆í
 +Åhl->
comÀn
;

404 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
thl
->
vîÀn
);

405 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
vîÀn
, &thl->
vîÀ∆í
);

406 
tŸ_Àn
 +1 + 
thl
->
vîÀn
 +Åhl->
vîÀ∆í
;

408 
thl
->
£qÀn
 = 
tŸ_Àn
;

409 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
£qÀn
, &thl->
£qÀ∆í
);

410 
tŸ_Àn
 +1 + 
thl
->
£qÀ∆í
;

412  
tŸ_Àn
;

413 
	}
}

422 
u16_t


423 
	$¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
)

425 
¢mp_v¨böd
 *
vb
;

426 
u32_t
 *
uöt_±r
;

427 
s32_t
 *
söt_±r
;

428 
u16_t
 
tŸ_Àn
;

430 
tŸ_Àn
 = 0;

431 
vb
 = 
roŸ
->
èû
;

432  
vb
 !
NULL
 )

435 
vb
->
vÆue_ty≥
)

437 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

438 
söt_±r
 = 
vb
->
vÆue
;

439 
	`¢mp_a¢1_íc_s32t_˙t
(*
söt_±r
, &
vb
->
vÀn
);

441 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

442 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

443 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

444 
uöt_±r
 = 
vb
->
vÆue
;

445 
	`¢mp_a¢1_íc_u32t_˙t
(*
uöt_±r
, &
vb
->
vÀn
);

447 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

448 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

449 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

450 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

451 
vb
->
vÀn
 = vb->
vÆue_Àn
;

453 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

454 
söt_±r
 = 
vb
->
vÆue
;

455 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
, &vb->
vÀn
);

459 
vb
->
vÀn
 = 0;

463 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
vÀn
, &vb->
vÀ∆í
);

464 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
idít_Àn
, vb->
idít
, &vb->
ﬁí
);

465 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
ﬁí
, &vb->
ﬁíÀn
);

467 
vb
->
£qÀn
 = 1 + vb->
vÀ∆í
 + vb->
vÀn
;

468 
vb
->
£qÀn
 +1 + vb->
ﬁíÀn
 + vb->
ﬁí
;

469 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
£qÀn
, &vb->
£qÀ∆í
);

472 
tŸ_Àn
 +1 + 
vb
->
£qÀ∆í
 + vb->
£qÀn
;

474 
vb
 = vb->
¥ev
;

478 
roŸ
->
£qÀn
 = 
tŸ_Àn
;

479 
	`¢mp_a¢1_íc_Àngth_˙t
(
roŸ
->
£qÀn
, &roŸ->
£qÀ∆í
);

480 
tŸ_Àn
 +1 + 
roŸ
->
£qÀ∆í
;

482  
tŸ_Àn
;

483 
	}
}

488 
u16_t


489 
	$¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
)

491 
u16_t
 
ofs
;

493 
ofs
 = 0;

494 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

495 
ofs
 += 1;

496 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
£qÀn
);

497 
ofs
 +
m_°©
->
rhl
.
£qÀ∆í
;

499 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

500 
ofs
 += 1;

501 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
);

502 
ofs
 +
m_°©
->
rhl
.
vîÀ∆í
;

503 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
, 
¢mp_vîsi⁄
);

504 
ofs
 +
m_°©
->
rhl
.
vîÀn
;

506 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

507 
ofs
 += 1;

508 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
);

509 
ofs
 +
m_°©
->
rhl
.
comÀ∆í
;

510 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
, m_°©->
communôy
);

511 
ofs
 +
m_°©
->
rhl
.
comÀn
;

513 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
));

514 
ofs
 += 1;

515 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
pduÀn
);

516 
ofs
 +
m_°©
->
rhl
.
pduÀ∆í
;

518 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

519 
ofs
 += 1;

520 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
);

521 
ofs
 +
m_°©
->
rhl
.
ridÀ∆í
;

522 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
, m_°©->
rid
);

523 
ofs
 +
m_°©
->
rhl
.
ridÀn
;

525 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

526 
ofs
 += 1;

527 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
);

528 
ofs
 +
m_°©
->
rhl
.
îr°©À∆í
;

529 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
, m_°©->
îr‹_°©us
);

530 
ofs
 +
m_°©
->
rhl
.
îr°©Àn
;

532 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

533 
ofs
 += 1;

534 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
);

535 
ofs
 +
m_°©
->
rhl
.
îridxÀ∆í
;

536 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
, m_°©->
îr‹_ödex
);

537 
ofs
 +
m_°©
->
rhl
.
îridxÀn
;

539  
ofs
;

540 
	}
}

545 
u16_t


546 
	$¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
)

548 
u16_t
 
ofs
;

550 
ofs
 = 0;

551 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

552 
ofs
 += 1;

553 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
£qÀn
);

554 
ofs
 +
m_å≠
->
thl
.
£qÀ∆í
;

556 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

557 
ofs
 += 1;

558 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
);

559 
ofs
 +
m_å≠
->
thl
.
vîÀ∆í
;

560 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
, 
¢mp_vîsi⁄
);

561 
ofs
 +
m_å≠
->
thl
.
vîÀn
;

563 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

564 
ofs
 += 1;

565 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
);

566 
ofs
 +
m_å≠
->
thl
.
comÀ∆í
;

567 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
, (
u8_t
 *)&
¢mp_publiccommunôy
[0]);

568 
ofs
 +
m_å≠
->
thl
.
comÀn
;

570 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
));

571 
ofs
 += 1;

572 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
pduÀn
);

573 
ofs
 +
m_å≠
->
thl
.
pduÀ∆í
;

575 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

576 
ofs
 += 1;

577 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
eidÀn
);

578 
ofs
 +
m_å≠
->
thl
.
eidÀ∆í
;

579 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0]);

580 
ofs
 +
m_å≠
->
thl
.
eidÀn
;

582 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
));

583 
ofs
 += 1;

584 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
);

585 
ofs
 +
m_å≠
->
thl
.
ØddæíÀn
;

586 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
, &m_å≠->
sù_øw
[0]);

587 
ofs
 +
m_å≠
->
thl
.
Øddæí
;

589 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

590 
ofs
 += 1;

591 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
);

592 
ofs
 +
m_å≠
->
thl
.
gå∂íÀn
;

593 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
, m_å≠->
gí_å≠
);

594 
ofs
 +
m_å≠
->
thl
.
gå∂í
;

596 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

597 
ofs
 += 1;

598 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
);

599 
ofs
 +
m_å≠
->
thl
.
°ΩÀ∆í
;

600 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
, m_å≠->
•c_å≠
);

601 
ofs
 +
m_å≠
->
thl
.
°ΩÀn
;

603 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
));

604 
ofs
 += 1;

605 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
);

606 
ofs
 +
m_å≠
->
thl
.
t¶íÀn
;

607 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
, m_å≠->
ts
);

608 
ofs
 +
m_å≠
->
thl
.
t¶í
;

610  
ofs
;

611 
	}
}

616 
u16_t


617 
	$¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, 
u16_t
 
ofs
)

619 
¢mp_v¨böd
 *
vb
;

620 
s32_t
 *
söt_±r
;

621 
u32_t
 *
uöt_±r
;

622 
u8_t
 *
øw_±r
;

624 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

625 
ofs
 += 1;

626 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
roŸ
->
£qÀn
);

627 
ofs
 +
roŸ
->
£qÀ∆í
;

629 
vb
 = 
roŸ
->
hód
;

630  
vb
 !
NULL
 )

632 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

633 
ofs
 += 1;

634 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
£qÀn
);

635 
ofs
 +
vb
->
£qÀ∆í
;

637 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

638 
ofs
 += 1;

639 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
ﬁí
);

640 
ofs
 +
vb
->
ﬁíÀn
;

641 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
idít_Àn
, &vb->
idít
[0]);

642 
ofs
 +
vb
->
ﬁí
;

644 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, 
vb
->
vÆue_ty≥
);

645 
ofs
 += 1;

646 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
vÀn
);

647 
ofs
 +
vb
->
vÀ∆í
;

649 
vb
->
vÆue_ty≥
)

651 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

652 
söt_±r
 = 
vb
->
vÆue
;

653 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
söt_±r
);

655 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

656 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

657 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

658 
uöt_±r
 = 
vb
->
vÆue
;

659 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
uöt_±r
);

661 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

662 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

663 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

664 
øw_±r
 = 
vb
->
vÆue
;

665 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
vb
->
vÀn
, 
øw_±r
);

667 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

669 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

670 
söt_±r
 = 
vb
->
vÆue
;

671 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
);

677 
ofs
 +
vb
->
vÀn
;

678 
vb
 = vb->
√xt
;

680  
ofs
;

681 
	}
}

	@core/stats.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_STATS


43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

47 
	~<°rög.h
>

49 
°©s_
 
	glwù_°©s
;

51 #i‡
LWIP_STATS_DISPLAY


53 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

55 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

56 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

57 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

58 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

59 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

60 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

61 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

62 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

63 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

64 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

65 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

66 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

67 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ˇchehô
));

68 
	}
}

70 #i‡
IGMP_STATS


72 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

74 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

75 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

76 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

77 
	`LWIP_PLATFORM_DIAG
(("v1_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
v1_rxed
));

78 
	`LWIP_PLATFORM_DIAG
(("joö_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
joö_£¡
));

79 
	`LWIP_PLATFORM_DIAG
(("Àave_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
Àave_£¡
));

80 
	`LWIP_PLATFORM_DIAG
(("uniˇ°_quîy: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
uniˇ°_quîy
));

81 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_£¡
));

82 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_rxed
));

83 
	`LWIP_PLATFORM_DIAG
(("group_quîy_rxed: %"
STAT_COUNTER_F
"\n", 
igmp
->
group_quîy_rxed
));

84 
	}
}

87 #i‡
MEM_STATS
 || 
MEMP_STATS


89 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

91 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

92 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

93 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

94 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

95 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

96 
	}
}

98 #i‡
MEMP_STATS


100 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

102 * 
memp_«mes
[] = {

103 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

104 
	~"lwù/memp_°d.h
"

106 if(
ödex
 < 
MEMP_MAX
) {

107 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

109 
	}
}

113 #i‡
SYS_STATS


115 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

117 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

118 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

119 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

120 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

121 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

122 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

123 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

124 
	}
}

128 
	$°©s_di•œy
()

130 
s16_t
 
i
;

132 
	`LINK_STATS_DISPLAY
();

133 
	`ETHARP_STATS_DISPLAY
();

134 
	`IPFRAG_STATS_DISPLAY
();

135 
	`IP_STATS_DISPLAY
();

136 
	`IGMP_STATS_DISPLAY
();

137 
	`ICMP_STATS_DISPLAY
();

138 
	`UDP_STATS_DISPLAY
();

139 
	`TCP_STATS_DISPLAY
();

140 
	`MEM_STATS_DISPLAY
();

141 
i
 = 0; i < 
MEMP_MAX
; i++) {

142 
	`MEMP_STATS_DISPLAY
(
i
);

144 
	`SYS_STATS_DISPLAY
();

145 
	}
}

	@core/sys.c

39 
	~"lwù/›t.h
"

41 #i‡(
NO_SYS
 == 0)

43 
	~"lwù/sys.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/t˝ù.h
"

52 
	ssswt_cb


54 
s16_t
 
	mtimeÊag
;

55 
sys_£m_t
 *
	mp£m
;

66 
	$sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
)

68 
u32_t
 
time_√eded
;

69 
sys_timeouts
 *
timeouts
;

70 
sys_timeo
 *
tm±imeout
;

71 
sys_timeout_h™dÀr
 
h
;

72 *
¨g
;

74 
agaö
:

75 
timeouts
 = 
	`sys_¨ch_timeouts
();

77 i‡(!
timeouts
 || !timeouts->
√xt
) {

78 
	`UNLOCK_TCPIP_CORE
();

79 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 0);

80 
	`LOCK_TCPIP_CORE
();

82 i‡(
timeouts
->
√xt
->
time
 > 0) {

83 
	`UNLOCK_TCPIP_CORE
();

84 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
timeouts
->
√xt
->
time
);

85 
	`LOCK_TCPIP_CORE
();

87 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

90 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

94 
tm±imeout
 = 
timeouts
->
√xt
;

95 
timeouts
->
√xt
 = 
tm±imeout
->next;

96 
h
 = 
tm±imeout
->h;

97 
¨g
 = 
tm±imeout
->arg;

98 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

99 i‡(
h
 !
NULL
) {

100 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sm‡ˇŒög h=%p(%p)\n", (*)&
h
, 
¨g
));

101 
	`h
(
¨g
);

105 
agaö
;

110 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

111 
timeouts
->
√xt
->
time
 -
time_√eded
;

113 
timeouts
->
√xt
->
time
 = 0;

117 
	}
}

126 
	$sys_£m_waô
(
sys_£m_t
 
£m
)

128 
u32_t
 
time_√eded
;

129 
sys_timeouts
 *
timeouts
;

130 
sys_timeo
 *
tm±imeout
;

131 
sys_timeout_h™dÀr
 
h
;

132 *
¨g
;

134 
agaö
:

136 
timeouts
 = 
	`sys_¨ch_timeouts
();

138 i‡(!
timeouts
 || !timeouts->
√xt
) {

139 
	`sys_¨ch_£m_waô
(
£m
, 0);

141 i‡(
timeouts
->
√xt
->
time
 > 0) {

142 
time_√eded
 = 
	`sys_¨ch_£m_waô
(
£m
, 
timeouts
->
√xt
->
time
);

144 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

147 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

151 
tm±imeout
 = 
timeouts
->
√xt
;

152 
timeouts
->
√xt
 = 
tm±imeout
->next;

153 
h
 = 
tm±imeout
->h;

154 
¨g
 = 
tm±imeout
->arg;

155 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

156 i‡(
h
 !
NULL
) {

157 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("ssw h=%p(%p)\n", (*)&
h
, (*)
¨g
));

158 
	`h
(
¨g
);

162 
agaö
;

167 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

168 
timeouts
->
√xt
->
time
 -
time_√eded
;

170 
timeouts
->
√xt
->
time
 = 0;

174 
	}
}

188 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

190 
sys_timeouts
 *
timeouts
;

191 
sys_timeo
 *
timeout
, *
t
;

193 
timeout
 = 
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
);

194 i‡(
timeout
 =
NULL
) {

195 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL", 
timeout
 !
NULL
);

198 
timeout
->
√xt
 = 
NULL
;

199 
timeout
->
h
 = h;

200 
timeout
->
¨g
 =árg;

201 
timeout
->
time
 = 
m£cs
;

203 
timeouts
 = 
	`sys_¨ch_timeouts
();

205 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" h=%párg=%p\n",

206 (*)
timeout
, 
m£cs
, (*)&
h
, (*)
¨g
));

208 i‡(
timeouts
 =
NULL
) {

209 
	`LWIP_ASSERT
("sys_timeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

213 i‡(
timeouts
->
√xt
 =
NULL
) {

214 
timeouts
->
√xt
 = 
timeout
;

218 i‡(
timeouts
->
√xt
->
time
 > 
m£cs
) {

219 
timeouts
->
√xt
->
time
 -
m£cs
;

220 
timeout
->
√xt
 = 
timeouts
->next;

221 
timeouts
->
√xt
 = 
timeout
;

223 
t
 = 
timeouts
->
√xt
;Å !
NULL
;Å =Å->next) {

224 
timeout
->
time
 -
t
->time;

225 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

226 i‡(
t
->
√xt
 !
NULL
) {

227 
t
->
√xt
->
time
 -
timeout
->time;

229 
timeout
->
√xt
 = 
t
->next;

230 
t
->
√xt
 = 
timeout
;

235 
	}
}

248 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

250 
sys_timeouts
 *
timeouts
;

251 
sys_timeo
 *
¥ev_t
, *
t
;

253 
timeouts
 = 
	`sys_¨ch_timeouts
();

255 i‡(
timeouts
 =
NULL
) {

256 
	`LWIP_ASSERT
("sys_u¡imeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

259 i‡(
timeouts
->
√xt
 =
NULL
) {

263 
t
 = 
timeouts
->
√xt
, 
¥ev_t
 = 
NULL
;Å != NULL;Örev_t =Å,Å =Å->next) {

264 i‡((
t
->
h
 =hË&& (t->
¨g
 ==árg)) {

267 i‡(
¥ev_t
 =
NULL
)

268 
timeouts
->
√xt
 = 
t
->next;

270 
¥ev_t
->
√xt
 = 
t
->next;

272 i‡(
t
->
√xt
 !
NULL
)

273 
t
->
√xt
->
time
 +=Å->time;

274 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
);

279 
	}
}

287 
	$sswt_h™dÀr
(*
¨g
)

289 
sswt_cb
 *sswt_cb = (sswt_cb *Ë
¨g
;

292 
sswt_cb
->
timeÊag
 = 1;

293 
	`sys_£m_sig«l
(*(
sswt_cb
->
p£m
));

294 
	}
}

304 
	$sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
)

306 
sswt_cb
 sswt_cb;

308 
sswt_cb
.
p£m
 = &
£m
;

309 
sswt_cb
.
timeÊag
 = 0;

312 i‡(
timeout
 > 0) {

314 
	`sys_timeout
(
timeout
, 
sswt_h™dÀr
, &
sswt_cb
);

316 
	`sys_£m_waô
(
£m
);

318 i‡(
sswt_cb
.
timeÊag
) {

323 
	`sys_u¡imeout
(
sswt_h™dÀr
, &
sswt_cb
);

326 
	}
}

334 
	$sys_m¶ìp
(
u32_t
 
ms
)

336 
sys_£m_t
 
dñay£m
 = 
	`sys_£m_√w
(0);

338 
	`sys_£m_waô_timeout
(
dñay£m
, 
ms
);

340 
	`sys_£m_‰ì
(
dñay£m
);

341 
	}
}

	@core/tcp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_TCP


47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/¢mp.h
"

51 
	~"lwù/t˝.h
"

52 
	~"lwù/debug.h
"

54 
	~<°rög.h
>

57 
u32_t
 
	gt˝_ticks
;

58 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

61 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

66 
t˝_pcb
 *
	gt˝_bound_pcbs
;

68 
t˝_li°í_pcbs_t
 
	gt˝_li°í_pcbs
;

71 
t˝_pcb
 *
	gt˝_a˘ive_pcbs
;

73 
t˝_pcb
 *
	gt˝_tw_pcbs
;

75 
t˝_pcb
 *
	gt˝_tmp_pcb
;

77 
u8_t
 
	gt˝_timî
;

78 
u16_t
 
t˝_√w_p‹t
();

85 
	$t˝_tmr
()

88 
	`t˝_Á°tmr
();

90 i‡(++
t˝_timî
 & 1) {

93 
	`t˝_¶owtmr
();

95 
	}
}

111 
îr_t


112 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

114 
îr_t
 
îr
;

116 #i‡
TCP_DEBUG


117 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

118 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

121 
pcb
->
°©e
) {

122 
CLOSED
:

130 
îr
 = 
ERR_OK
;

131 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

132 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

133 
pcb
 = 
NULL
;

135 
LISTEN
:

136 
îr
 = 
ERR_OK
;

137 
	`t˝_pcb_ªmove
((
t˝_pcb
 **)&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

138 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
);

139 
pcb
 = 
NULL
;

141 
SYN_SENT
:

142 
îr
 = 
ERR_OK
;

143 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

144 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

145 
pcb
 = 
NULL
;

146 
	`¢mp_öc_t˝©ãm±Áûs
();

148 
SYN_RCVD
:

149 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

150 i‡(
îr
 =
ERR_OK
) {

151 
	`¢mp_öc_t˝©ãm±Áûs
();

152 
pcb
->
°©e
 = 
FIN_WAIT_1
;

155 
ESTABLISHED
:

156 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

157 i‡(
îr
 =
ERR_OK
) {

158 
	`¢mp_öc_t˝e°abª£ts
();

159 
pcb
->
°©e
 = 
FIN_WAIT_1
;

162 
CLOSE_WAIT
:

163 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

164 i‡(
îr
 =
ERR_OK
) {

165 
	`¢mp_öc_t˝e°abª£ts
();

166 
pcb
->
°©e
 = 
LAST_ACK
;

171 
îr
 = 
ERR_OK
;

172 
pcb
 = 
NULL
;

176 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

184 
	`t˝_ouçut
(
pcb
);

186  
îr
;

187 
	}
}

198 
	$t˝_ab™d⁄
(
t˝_pcb
 *
pcb
, 
ª£t
)

200 
u32_t
 
£qno
, 
ackno
;

201 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

202 
ù_addr
 
ªmŸe_ù
, 
loˇl_ù
;

203 #i‡
LWIP_CALLBACK_API


204 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

206 *
îrf_¨g
;

212 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

213 
	`t˝_pcb_ªmove
(&
t˝_tw_pcbs
, 
pcb
);

214 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

216 
£qno
 = 
pcb
->
¢d_nxt
;

217 
ackno
 = 
pcb
->
rcv_nxt
;

218 
	`ù_addr_£t
(&
loˇl_ù
, &(
pcb
->local_ip));

219 
	`ù_addr_£t
(&
ªmŸe_ù
, &(
pcb
->remote_ip));

220 
loˇl_p‹t
 = 
pcb
->local_port;

221 
ªmŸe_p‹t
 = 
pcb
->remote_port;

222 #i‡
LWIP_CALLBACK_API


223 
îrf
 = 
pcb
->errf;

225 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

226 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

227 i‡(
pcb
->
u«cked
 !
NULL
) {

228 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

230 i‡(
pcb
->
un£¡
 !
NULL
) {

231 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

233 #i‡
TCP_QUEUE_OOSEQ


234 i‡(
pcb
->
oo£q
 !
NULL
) {

235 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

238 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

239 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

240 i‡(
ª£t
) {

241 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abandon: sending RST\n"));

242 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

245 
	}
}

260 
îr_t


261 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

263 
t˝_pcb
 *
˝cb
;

265 
	`LWIP_ERROR
("t˝_böd: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

267 i‡(
p‹t
 == 0) {

268 
p‹t
 = 
	`t˝_√w_p‹t
();

272 
˝cb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;

273 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

274 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

275 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

276 
	`ù_addr_ißny
(
ùaddr
) ||

277 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

278  
ERR_USE
;

283 
˝cb
 = 
t˝_a˘ive_pcbs
;

284 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

285 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

286 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

287 
	`ù_addr_ißny
(
ùaddr
) ||

288 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

289  
ERR_USE
;

294 
˝cb
 = 
t˝_bound_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

295 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

296 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

297 
	`ù_addr_ißny
(
ùaddr
) ||

298 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

299  
ERR_USE
;

305 
˝cb
 = 
t˝_tw_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

306 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

307 i‡(
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

308  
ERR_USE
;

313 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

314 
pcb
->
loˇl_ù
 = *
ùaddr
;

316 
pcb
->
loˇl_p‹t
 = 
p‹t
;

317 
	`TCP_REG
(&
t˝_bound_pcbs
, 
pcb
);

318 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

319  
ERR_OK
;

320 
	}
}

321 #i‡
LWIP_CALLBACK_API


325 
îr_t


326 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

328 
	`LWIP_UNUSED_ARG
(
¨g
);

329 
	`LWIP_UNUSED_ARG
(
pcb
);

330 
	`LWIP_UNUSED_ARG
(
îr
);

332  
ERR_ABRT
;

333 
	}
}

350 
t˝_pcb
 *

351 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

353 
t˝_pcb_li°í
 *
Õcb
;

355 
	`LWIP_UNUSED_ARG
(
backlog
);

356 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

359 i‡(
pcb
->
°©e
 =
LISTEN
) {

360  
pcb
;

362 
Õcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
);

363 i‡(
Õcb
 =
NULL
) {

364  
NULL
;

366 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

367 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

368 
Õcb
->
°©e
 = 
LISTEN
;

369 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

370 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

371 
Õcb
->
âl
 = 
pcb
->ttl;

372 
Õcb
->
tos
 = 
pcb
->tos;

373 
	`ù_addr_£t
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip);

374 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

375 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

376 #i‡
LWIP_CALLBACK_API


377 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

379 #i‡
TCP_LISTEN_BACKLOG


380 
Õcb
->
ac˚±s_≥ndög
 = 0;

381 
Õcb
->
backlog
 = (backlog ? backlog : 1);

383 
	`TCP_REG
(&
t˝_li°í_pcbs
.
li°í_pcbs
, 
Õcb
);

384  (
t˝_pcb
 *)
Õcb
;

385 
	}
}

393 
u32_t
 
	$t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
)

395 
u32_t
 
√w_right_edge
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
;

397 i‡(
	`TCP_SEQ_GEQ
(
√w_right_edge
, 
pcb
->
rcv_™n_right_edge
 +Öcb->
mss
)) {

399 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

400  
√w_right_edge
 - 
pcb
->
rcv_™n_right_edge
;

402 i‡(
	`TCP_SEQ_GT
(
pcb
->
rcv_nxt
,Öcb->
rcv_™n_right_edge
)) {

405 
pcb
->
rcv_™n_wnd
 = 0;

408 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_™n_right_edge
 -Öcb->
rcv_nxt
;

412 
	}
}

423 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

425 
wnd_öÊ©i⁄
;

427 
	`LWIP_ASSERT
("tcp_recved:Üen would wrapÑcv_wnd\n",

428 
Àn
 <0xfff‡- 
pcb
->
rcv_wnd
 );

430 
pcb
->
rcv_wnd
 +
Àn
;

431 i‡(
pcb
->
rcv_wnd
 > 
TCP_WND
)

432 
pcb
->
rcv_wnd
 = 
TCP_WND
;

434 
wnd_öÊ©i⁄
 = 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

440 i‡(
wnd_öÊ©i⁄
 >
TCP_WND_UPDATE_THRESHOLD
)

441 
	`t˝_ack_now
(
pcb
);

443 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

444 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

445 
	}
}

453 
u16_t


454 
	$t˝_√w_p‹t
()

456 
t˝_pcb
 *
pcb
;

457 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


458 
	#TCP_LOCAL_PORT_RANGE_START
 4096

	)

459 
	#TCP_LOCAL_PORT_RANGE_END
 0x7fff

	)

461 
u16_t
 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

463 
agaö
:

464 i‡(++
p‹t
 > 
TCP_LOCAL_PORT_RANGE_END
) {

465 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

468 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

469 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

470 
agaö
;

473 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

474 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

475 
agaö
;

478 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

479 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

480 
agaö
;

483  
p‹t
;

484 
	}
}

498 
îr_t


499 
t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
,

500 
	$îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
îr_t
 
îr
))

502 
îr_t
 
ªt
;

503 
u32_t
 
iss
;

505 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ed from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

507 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

508 i‡(
ùaddr
 !
NULL
) {

509 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

511  
ERR_VAL
;

513 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

514 i‡(
pcb
->
loˇl_p‹t
 == 0) {

515 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

517 
iss
 = 
	`t˝_√xt_iss
();

518 
pcb
->
rcv_nxt
 = 0;

519 
pcb
->
¢d_nxt
 = 
iss
;

520 
pcb
->
œ°ack
 = 
iss
 - 1;

521 
pcb
->
¢d_lbb
 = 
iss
 - 1;

522 
pcb
->
rcv_wnd
 = 
TCP_WND
;

523 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

524 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

525 
pcb
->
¢d_wnd
 = 
TCP_WND
;

528 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

529 #i‡
TCP_CALCULATE_EFF_SEND_MSS


530 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

532 
pcb
->
cwnd
 = 1;

533 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

534 
pcb
->
°©e
 = 
SYN_SENT
;

535 #i‡
LWIP_CALLBACK_API


536 
pcb
->
c⁄√˘ed
 = connected;

538 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

539 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

541 
	`¢mp_öc_t˝a˘ive›ís
();

543 
ªt
 = 
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
TCP_SYN
, 0, 
TF_SEG_OPTS_MSS


544 #i‡
LWIP_TCP_TIMESTAMPS


545 | 
TF_SEG_OPTS_TS


548 i‡(
ªt
 =
ERR_OK
) {

549 
	`t˝_ouçut
(
pcb
);

551  
ªt
;

552 
	}
}

562 
	$t˝_¶owtmr
()

564 
t˝_pcb
 *
pcb
, *
pcb2
, *
¥ev
;

565 
u16_t
 
eff_wnd
;

566 
u8_t
 
pcb_ªmove
;

567 
îr_t
 
îr
;

569 
îr
 = 
ERR_OK
;

571 ++
t˝_ticks
;

574 
¥ev
 = 
NULL
;

575 
pcb
 = 
t˝_a˘ive_pcbs
;

576 i‡(
pcb
 =
NULL
) {

577 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

579 
pcb
 !
NULL
) {

580 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

581 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

582 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

583 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

585 
pcb_ªmove
 = 0;

587 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

588 ++
pcb_ªmove
;

589 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

591 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

592 ++
pcb_ªmove
;

593 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

595 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

598 
pcb
->
≥rsi°_˙t
++;

599 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

600 
pcb
->
≥rsi°_˙t
 = 0;

601 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

602 
pcb
->
≥rsi°_backoff
++;

604 
	`t˝_zîo_wödow_¥obe
(
pcb
);

608 if(
pcb
->
πime
 >= 0)

609 ++
pcb
->
πime
;

611 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

613 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


614 "Öcb->πÿ%"
S16_F
"\n",

615 
pcb
->
πime
,Öcb->
πo
));

619 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

620 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

624 
pcb
->
πime
 = 0;

627 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

628 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

629 i‡(
pcb
->
s°hªsh
 <Öcb->
mss
) {

630 
pcb
->
s°hªsh
 =Öcb->
mss
 * 2;

632 
pcb
->
cwnd
 =Öcb->
mss
;

633 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


634 " s°hªsh %"
U16_F
"\n",

635 
pcb
->
cwnd
,Öcb->
s°hªsh
));

639 
	`t˝_ªxmô_πo
(
pcb
);

644 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

645 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

646 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

647 ++
pcb_ªmove
;

648 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

653 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

654 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

655 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

656 #i‡
LWIP_TCP_KEEPALIVE


657 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

658 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

659 / 
TCP_SLOW_INTERVAL
)

661 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

662 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

665 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

666 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

667 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

669 
	`t˝_ab‹t
(
pcb
);

671 #i‡
LWIP_TCP_KEEPALIVE


672 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

673 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

674 / 
TCP_SLOW_INTERVAL
)

676 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

677 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

678 / 
TCP_SLOW_INTERVAL
)

681 
	`t˝_kì∑live
(
pcb
);

682 
pcb
->
kìp_˙t_£¡
++;

689 #i‡
TCP_QUEUE_OOSEQ


690 i‡(
pcb
->
oo£q
 !
NULL
 &&

691 (
u32_t
)
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

692 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

693 
pcb
->
oo£q
 = 
NULL
;

694 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

699 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

700 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

701 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

702 ++
pcb_ªmove
;

703 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

708 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

709 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

710 ++
pcb_ªmove
;

711 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

716 i‡(
pcb_ªmove
) {

717 
	`t˝_pcb_purge
(
pcb
);

719 i‡(
¥ev
 !
NULL
) {

720 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
t˝_a˘ive_pcbs
);

721 
¥ev
->
√xt
 = 
pcb
->next;

724 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
t˝_a˘ive_pcbs
 =
pcb
);

725 
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

728 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

730 
pcb2
 = 
pcb
->
√xt
;

731 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

732 
pcb
 = 
pcb2
;

736 ++
pcb
->
pﬁ…mr
;

737 i‡(
pcb
->
pﬁ…mr
 >pcb->
pﬁlöãrvÆ
) {

738 
pcb
->
pﬁ…mr
 = 0;

739 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

740 
	`TCP_EVENT_POLL
(
pcb
, 
îr
);

741 i‡(
îr
 =
ERR_OK
) {

742 
	`t˝_ouçut
(
pcb
);

746 
¥ev
 = 
pcb
;

747 
pcb
 =Öcb->
√xt
;

753 
¥ev
 = 
NULL
;

754 
pcb
 = 
t˝_tw_pcbs
;

755 
pcb
 !
NULL
) {

756 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

757 
pcb_ªmove
 = 0;

760 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

761 ++
pcb_ªmove
;

767 i‡(
pcb_ªmove
) {

768 
	`t˝_pcb_purge
(
pcb
);

770 i‡(
¥ev
 !
NULL
) {

771 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
t˝_tw_pcbs
);

772 
¥ev
->
√xt
 = 
pcb
->next;

775 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
t˝_tw_pcbs
 =
pcb
);

776 
t˝_tw_pcbs
 = 
pcb
->
√xt
;

778 
pcb2
 = 
pcb
->
√xt
;

779 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

780 
pcb
 = 
pcb2
;

782 
¥ev
 = 
pcb
;

783 
pcb
 =Öcb->
√xt
;

786 
	}
}

795 
	$t˝_Á°tmr
()

797 
t˝_pcb
 *
pcb
;

799 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

801 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

803 
îr_t
 
îr
;

804 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

805 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

806 i‡(
îr
 =
ERR_OK
) {

807 
pcb
->
ªfu£d_d©a
 = 
NULL
;

812 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

813 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

814 
	`t˝_ack_now
(
pcb
);

815 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

818 
	}
}

826 
u8_t


827 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

829 
u8_t
 
cou¡
 = 0;

830 
t˝_£g
 *
√xt
;

831 
£g
 !
NULL
) {

832 
√xt
 = 
£g
->next;

833 
cou¡
 +
	`t˝_£g_‰ì
(
£g
);

834 
£g
 = 
√xt
;

836  
cou¡
;

837 
	}
}

845 
u8_t


846 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

848 
u8_t
 
cou¡
 = 0;

850 i‡(
£g
 !
NULL
) {

851 i‡(
£g
->
p
 !
NULL
) {

852 
cou¡
 = 
	`pbuf_‰ì
(
£g
->
p
);

853 #i‡
TCP_DEBUG


854 
£g
->
p
 = 
NULL
;

857 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
);

859  
cou¡
;

860 
	}
}

869 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

871 
pcb
->
¥io
 =Örio;

872 
	}
}

873 #i‡
TCP_QUEUE_OOSEQ


882 
t˝_£g
 *

883 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

885 
t˝_£g
 *
c£g
;

887 
c£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

888 i‡(
c£g
 =
NULL
) {

889  
NULL
;

891 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

892 
	`pbuf_ªf
(
c£g
->
p
);

893  
c£g
;

894 
	}
}

897 #i‡
LWIP_CALLBACK_API


902 
îr_t


903 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

905 
¨g
 =árg;

906 i‡(
p
 !
NULL
) {

907 
	`pbuf_‰ì
(
p
);

908 } i‡(
îr
 =
ERR_OK
) {

909  
	`t˝_˛o£
(
pcb
);

911  
ERR_OK
;

912 
	}
}

921 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

923 
t˝_pcb
 *
pcb
, *
öa˘ive
;

924 
u32_t
 
öa˘ivôy
;

925 
u8_t
 
m¥io
;

928 
m¥io
 = 
TCP_PRIO_MAX
;

931 
öa˘ivôy
 = 0;

932 
öa˘ive
 = 
NULL
;

933 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

934 i‡(
pcb
->
¥io
 <=Örio &&

935 
pcb
->
¥io
 <
m¥io
 &&

936 (
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

937 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

938 
öa˘ive
 = 
pcb
;

939 
m¥io
 = 
pcb
->
¥io
;

942 i‡(
öa˘ive
 !
NULL
) {

943 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

944 (*)
öa˘ive
, 
öa˘ivôy
));

945 
	`t˝_ab‹t
(
öa˘ive
);

947 
	}
}

954 
	$t˝_kûl_timewaô
()

956 
t˝_pcb
 *
pcb
, *
öa˘ive
;

957 
u32_t
 
öa˘ivôy
;

959 
öa˘ivôy
 = 0;

960 
öa˘ive
 = 
NULL
;

962 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

963 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

964 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

965 
öa˘ive
 = 
pcb
;

968 i‡(
öa˘ive
 !
NULL
) {

969 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

970 (*)
öa˘ive
, 
öa˘ivôy
));

971 
	`t˝_ab‹t
(
öa˘ive
);

973 
	}
}

981 
t˝_pcb
 *

982 
	$t˝_Æloc
(
u8_t
 
¥io
)

984 
t˝_pcb
 *
pcb
;

985 
u32_t
 
iss
;

987 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

988 i‡(
pcb
 =
NULL
) {

990 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

991 
	`t˝_kûl_timewaô
();

993 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

994 i‡(
pcb
 =
NULL
) {

996 
	`t˝_kûl_¥io
(
¥io
);

998 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

1001 i‡(
pcb
 !
NULL
) {

1002 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

1003 
pcb
->
¥io
 = 
TCP_PRIO_NORMAL
;

1004 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

1005 
pcb
->
¢d_queuñí
 = 0;

1006 
pcb
->
rcv_wnd
 = 
TCP_WND
;

1007 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

1008 
pcb
->
tos
 = 0;

1009 
pcb
->
âl
 = 
TCP_TTL
;

1012 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

1013 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

1014 
pcb
->
ß
 = 0;

1015 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1016 
pcb
->
πime
 = -1;

1017 
pcb
->
cwnd
 = 1;

1018 
iss
 = 
	`t˝_√xt_iss
();

1019 
pcb
->
¢d_wl2
 = 
iss
;

1020 
pcb
->
¢d_nxt
 = 
iss
;

1021 
pcb
->
œ°ack
 = 
iss
;

1022 
pcb
->
¢d_lbb
 = 
iss
;

1023 
pcb
->
tmr
 = 
t˝_ticks
;

1025 
pcb
->
pﬁ…mr
 = 0;

1027 #i‡
LWIP_CALLBACK_API


1028 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1032 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1034 #i‡
LWIP_TCP_KEEPALIVE


1035 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1036 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1039 
pcb
->
kìp_˙t_£¡
 = 0;

1041  
pcb
;

1042 
	}
}

1056 
t˝_pcb
 *

1057 
	$t˝_√w
()

1059  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1060 
	}
}

1070 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1072 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1073 
	}
}

1074 #i‡
LWIP_CALLBACK_API


1084 
t˝_ªcv
(
t˝_pcb
 *
pcb
,

1085 
	$îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
pbuf
 *
p
, 
îr_t
 
îr
))

1087 
pcb
->
ªcv
 =Ñecv;

1088 
	}
}

1098 
t˝_£¡
(
t˝_pcb
 *
pcb
,

1099 
	$îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
u16_t
 
Àn
))

1101 
pcb
->
£¡
 = sent;

1102 
	}
}

1113 
t˝_îr
(
t˝_pcb
 *
pcb
,

1114 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
))

1116 
pcb
->
îrf
 =Érrf;

1117 
	}
}

1128 
t˝_ac˚±
(
t˝_pcb
 *
pcb
,

1129 
	$îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
))

1131 
pcb
->
ac˚±
 =áccept;

1132 
	}
}

1143 
t˝_pﬁl
(
t˝_pcb
 *
pcb
,

1144 
	$îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
), 
u8_t
 
öãrvÆ
)

1146 #i‡
LWIP_CALLBACK_API


1147 
pcb
->
pﬁl
 =Öoll;

1149 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1150 
	}
}

1159 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1161 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1162 
pcb
->
°©e
 !
TIME_WAIT
 &&

1163 
pcb
->
°©e
 !
LISTEN
) {

1165 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1167 #i‡
TCP_LISTEN_BACKLOG


1168 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

1170 
t˝_pcb_li°í
 *
Õcb
;

1171 
	`LWIP_ASSERT
("tcp_pcb_purge:Öcb->state == SYN_RCVD butÅcp_listen_pcbs is NULL",

1172 
t˝_li°í_pcbs
.
li°í_pcbs
 !
NULL
);

1173 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

1174 i‡((
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) &&

1175 (
	`ù_addr_ißny
(&
Õcb
->
loˇl_ù
) ||

1176 
	`ù_addr_cmp
(&
pcb
->
loˇl_ù
, &
Õcb
->local_ip))) {

1178 
	`LWIP_ASSERT
("tcp_pcb_purge:ÜistenÖcb doesÇot haveácceptsÖending",

1179 
Õcb
->
ac˚±s_≥ndög
 > 0);

1180 
Õcb
->
ac˚±s_≥ndög
--;

1188 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1189 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1190 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

1191 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1193 i‡(
pcb
->
un£¡
 !
NULL
) {

1194 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1196 i‡(
pcb
->
u«cked
 !
NULL
) {

1197 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1199 #i‡
TCP_QUEUE_OOSEQ


1200 i‡(
pcb
->
oo£q
 !
NULL
) {

1201 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1206 
pcb
->
πime
 = -1;

1208 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1209 
pcb
->
oo£q
 = 
NULL
;

1211 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1212 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1213 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1215 
	}
}

1224 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1226 
	`TCP_RMV
(
pcbli°
, 
pcb
);

1228 
	`t˝_pcb_purge
(
pcb
);

1231 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1232 
pcb
->
°©e
 !
LISTEN
 &&

1233 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1234 
pcb
->
Êags
 |
TF_ACK_NOW
;

1235 
	`t˝_ouçut
(
pcb
);

1238 i‡(
pcb
->
°©e
 !
LISTEN
) {

1239 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1240 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1241 #i‡
TCP_QUEUE_OOSEQ


1242 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1246 
pcb
->
°©e
 = 
CLOSED
;

1248 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1249 
	}
}

1256 
u32_t


1257 
	$t˝_√xt_iss
()

1259 
u32_t
 
iss
 = 6510;

1261 
iss
 +
t˝_ticks
;

1262  
iss
;

1263 
	}
}

1265 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1271 
u16_t


1272 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr
 *
addr
)

1274 
u16_t
 
mss_s
;

1275 
√tif
 *
outif
;

1277 
outif
 = 
	`ù_rouã
(
addr
);

1278 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1279 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1285 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1287  
£ndmss
;

1288 
	}
}

1291 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1298 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1300 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1301 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1302 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1303 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1304 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1305 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1306 
	`¡ohl
(
t˝hdr
->
£qno
)));

1307 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1308 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1309 
	`¡ohl
(
t˝hdr
->
ackno
)));

1310 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1311 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1312 
	`TCPH_HDRLEN
(
t˝hdr
),

1313 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1314 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1315 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1316 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1317 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1318 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1319 
	`¡ohs
(
t˝hdr
->
wnd
)));

1320 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1321 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1322 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1323 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1324 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1325 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1326 
	}
}

1334 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1336 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("State: "));

1337 
s
) {

1338 
CLOSED
:

1339 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSED\n"));

1341 
LISTEN
:

1342 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LISTEN\n"));

1344 
SYN_SENT
:

1345 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_SENT\n"));

1347 
SYN_RCVD
:

1348 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_RCVD\n"));

1350 
ESTABLISHED
:

1351 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ESTABLISHED\n"));

1353 
FIN_WAIT_1
:

1354 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_1\n"));

1356 
FIN_WAIT_2
:

1357 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_2\n"));

1359 
CLOSE_WAIT
:

1360 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSE_WAIT\n"));

1362 
CLOSING
:

1363 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSING\n"));

1365 
LAST_ACK
:

1366 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LAST_ACK\n"));

1368 
TIME_WAIT
:

1369 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME_WAIT\n"));

1372 
	}
}

1380 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1382 i‡(
Êags
 & 
TCP_FIN
) {

1383 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1385 i‡(
Êags
 & 
TCP_SYN
) {

1386 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1388 i‡(
Êags
 & 
TCP_RST
) {

1389 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1391 i‡(
Êags
 & 
TCP_PSH
) {

1392 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1394 i‡(
Êags
 & 
TCP_ACK
) {

1395 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1397 i‡(
Êags
 & 
TCP_URG
) {

1398 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1400 i‡(
Êags
 & 
TCP_ECE
) {

1401 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1403 i‡(
Êags
 & 
TCP_CWR
) {

1404 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1406 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("\n"));

1407 
	}
}

1413 
	$t˝_debug_¥öt_pcbs
()

1415 
t˝_pcb
 *
pcb
;

1416 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1417 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1418 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1419 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1420 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1421 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1423 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1424 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1425 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1426 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1427 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1428 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1430 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1431 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1432 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1433 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1434 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1435 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1437 
	}
}

1442 
s16_t


1443 
	$t˝_pcbs_ß√
()

1445 
t˝_pcb
 *
pcb
;

1446 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1447 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1448 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1449 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1451 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1452 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1455 
	}
}

	@core/tcp_in.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/t˝.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/memp.h
"

54 
	~"lwù/öë.h
"

55 
	~"lwù/öë_chksum.h
"

56 
	~"lwù/°©s.h
"

57 
	~"lwù/¢mp.h
"

58 
	~"¨ch/≥rf.h
"

63 
t˝_£g
 
	gö£g
;

64 
t˝_hdr
 *
	gt˝hdr
;

65 
ù_hdr
 *
	gùhdr
;

66 
u32_t
 
	g£qno
, 
	gackno
;

67 
u8_t
 
	gÊags
;

68 
u16_t
 
	gt˝Àn
;

70 
u8_t
 
	gªcv_Êags
;

71 
pbuf
 *
	gªcv_d©a
;

73 
t˝_pcb
 *
	gt˝_öput_pcb
;

76 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
);

77 
u8_t
 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
);

78 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
);

80 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
);

81 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
);

93 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

95 
t˝_pcb
 *
pcb
, *
¥ev
;

96 
t˝_pcb_li°í
 *
Õcb
;

97 
u8_t
 
hdæí
;

98 
îr_t
 
îr
;

100 
PERF_START
;

102 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

103 
	`¢mp_öc_t˝ö£gs
();

105 
ùhdr
 = 
p
->
∑ylﬂd
;

106 
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(
ùhdr
) * 4);

108 #i‡
TCP_INPUT_DEBUG


109 
	`t˝_debug_¥öt
(
t˝hdr
);

113 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

115 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

116 
	`TCP_STATS_INC
(
t˝
.
À√º
);

117 
	`TCP_STATS_INC
(
t˝
.
dr›
);

118 
	`¢mp_öc_t˝öîrs
();

119 
	`pbuf_‰ì
(
p
);

124 i‡(
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) ||

125 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

126 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

127 
	`TCP_STATS_INC
(
t˝
.
dr›
);

128 
	`¢mp_öc_t˝öîrs
();

129 
	`pbuf_‰ì
(
p
);

133 #i‡
CHECKSUM_CHECK_TCP


135 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

136 (
ù_addr
 *)&(
ùhdr
->
de°
),

137 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

138 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

139 
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
), (ù_add∏*)&(ùhdr->
de°
),

140 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

141 #i‡
TCP_DEBUG


142 
	`t˝_debug_¥öt
(
t˝hdr
);

144 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

145 
	`TCP_STATS_INC
(
t˝
.
dr›
);

146 
	`¢mp_öc_t˝öîrs
();

147 
	`pbuf_‰ì
(
p
);

154 
hdæí
 = 
	`TCPH_HDRLEN
(
t˝hdr
);

155 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

157 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

158 
	`TCP_STATS_INC
(
t˝
.
À√º
);

159 
	`TCP_STATS_INC
(
t˝
.
dr›
);

160 
	`¢mp_öc_t˝öîrs
();

161 
	`pbuf_‰ì
(
p
);

166 
t˝hdr
->
§c
 = 
	`¡ohs
(tcphdr->src);

167 
t˝hdr
->
de°
 = 
	`¡ohs
(tcphdr->dest);

168 
£qno
 = 
t˝hdr
->£qnÿ
	`¡ohl
(tcphdr->seqno);

169 
ackno
 = 
t˝hdr
->acknÿ
	`¡ohl
(tcphdr->ackno);

170 
t˝hdr
->
wnd
 = 
	`¡ohs
(tcphdr->wnd);

172 
Êags
 = 
	`TCPH_FLAGS
(
t˝hdr
);

173 
t˝Àn
 = 
p
->
tŸ_Àn
 + ((
Êags
 & (
TCP_FIN
 | 
TCP_SYN
)) ? 1 : 0);

177 
¥ev
 = 
NULL
;

180 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

181 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

182 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

183 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

184 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

185 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

186 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

187 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

192 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

193 i‡(
¥ev
 !
NULL
) {

194 
¥ev
->
√xt
 = 
pcb
->next;

195 
pcb
->
√xt
 = 
t˝_a˘ive_pcbs
;

196 
t˝_a˘ive_pcbs
 = 
pcb
;

198 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

201 
¥ev
 = 
pcb
;

204 i‡(
pcb
 =
NULL
) {

207 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

208 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

209 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

210 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

211 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

212 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

216 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

217 
	`t˝_timewaô_öput
(
pcb
);

218 
	`pbuf_‰ì
(
p
);

225 
¥ev
 = 
NULL
;

226 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

227 i‡((
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)) ||

228 
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) &&

229 
Õcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
) {

233 i‡(
¥ev
 !
NULL
) {

234 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

236 
Õcb
->
√xt
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;

238 
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

241 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

242 
	`t˝_li°í_öput
(
Õcb
);

243 
	`pbuf_‰ì
(
p
);

246 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

250 #i‡
TCP_INPUT_DEBUG


251 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

252 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

253 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

257 i‡(
pcb
 !
NULL
) {

259 #i‡
TCP_INPUT_DEBUG


260 #i‡
TCP_DEBUG


261 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

266 
ö£g
.
√xt
 = 
NULL
;

267 
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

268 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

269 
ö£g
.
p
 =Ö;

270 
ö£g
.
t˝hdr
 =Åcphdr;

272 
ªcv_d©a
 = 
NULL
;

273 
ªcv_Êags
 = 0;

276 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

278 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

279 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

280 i‡(
îr
 =
ERR_OK
) {

281 
pcb
->
ªfu£d_d©a
 = 
NULL
;

284 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

285 
	`TCP_STATS_INC
(
t˝
.
dr›
);

286 
	`¢mp_öc_t˝öîrs
();

287 
	`pbuf_‰ì
(
p
);

292 
t˝_öput_pcb
 = 
pcb
;

293 
îr
 = 
	`t˝_¥o˚ss
(
pcb
);

294 
t˝_öput_pcb
 = 
NULL
;

297 i‡(
îr
 !
ERR_ABRT
) {

298 i‡(
ªcv_Êags
 & 
TF_RESET
) {

303 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

304 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

305 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

306 } i‡(
ªcv_Êags
 & 
TF_CLOSED
) {

309 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

310 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

312 
îr
 = 
ERR_OK
;

316 i‡(
pcb
->
acked
 > 0) {

317 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

320 i‡(
ªcv_d©a
 !
NULL
) {

321 if(
Êags
 & 
TCP_PSH
) {

322 
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

326 
	`TCP_EVENT_RECV
(
pcb
, 
ªcv_d©a
, 
ERR_OK
, 
îr
);

329 i‡(
îr
 !
ERR_OK
) {

330 
pcb
->
ªfu£d_d©a
 = 
ªcv_d©a
;

331 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

337 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

338 
	`TCP_EVENT_RECV
(
pcb
, 
NULL
, 
ERR_OK
, 
îr
);

342 i‡(
îr
 =
ERR_OK
) {

343 
	`t˝_ouçut
(
pcb
);

350 i‡(
ö£g
.
p
 !
NULL
)

352 
	`pbuf_‰ì
(
ö£g
.
p
);

353 
ö£g
.
p
 = 
NULL
;

355 #i‡
TCP_INPUT_DEBUG


356 #i‡
TCP_DEBUG


357 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

365 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

366 i‡(!(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
)) {

367 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

368 
	`TCP_STATS_INC
(
t˝
.
dr›
);

369 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
,

370 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

371 
t˝hdr
->
de°
,Å˝hdr->
§c
);

373 
	`pbuf_‰ì
(
p
);

376 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

377 
	`PERF_STOP
("tcp_input");

378 
	}
}

392 
îr_t


393 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
)

395 
t˝_pcb
 *
≈cb
;

396 
îr_t
 
rc
;

400 i‡(
Êags
 & 
TCP_ACK
) {

403 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

404 
	`t˝_r°
(
ackno
 + 1, 
£qno
 + 
t˝Àn
,

405 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

406 
t˝hdr
->
de°
,Å˝hdr->
§c
);

407 } i‡(
Êags
 & 
TCP_SYN
) {

408 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
t˝hdr
->
§c
,Å˝hdr->
de°
));

409 #i‡
TCP_LISTEN_BACKLOG


410 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

411 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_li°í_öput:Üi°í backlogÉx˚eded f‹Ö‹à%"
U16_F
"\n", 
t˝hdr
->
de°
));

412  
ERR_ABRT
;

415 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

419 i‡(
≈cb
 =
NULL
) {

420 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

421 
	`TCP_STATS_INC
(
t˝
.
memîr
);

422  
ERR_MEM
;

424 #i‡
TCP_LISTEN_BACKLOG


425 
pcb
->
ac˚±s_≥ndög
++;

428 
	`ù_addr_£t
(&(
≈cb
->
loˇl_ù
), &(
ùhdr
->
de°
));

429 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

430 
	`ù_addr_£t
(&(
≈cb
->
ªmŸe_ù
), &(
ùhdr
->
§c
));

431 
≈cb
->
ªmŸe_p‹t
 = 
t˝hdr
->
§c
;

432 
≈cb
->
°©e
 = 
SYN_RCVD
;

433 
≈cb
->
rcv_nxt
 = 
£qno
 + 1;

434 
≈cb
->
rcv_™n_right_edge
 =Çpcb->
rcv_nxt
;

435 
≈cb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

436 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

437 
≈cb
->
¢d_wl1
 = 
£qno
 - 1;

438 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

439 #i‡
LWIP_CALLBACK_API


440 
≈cb
->
ac˚±
 = 
pcb
->accept;

443 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& (
SOF_DEBUG
|
SOF_DONTROUTE
|
SOF_KEEPALIVE
|
SOF_OOBINLINE
|
SOF_LINGER
);

446 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
);

449 
	`t˝_∑r£›t
(
≈cb
);

450 #i‡
TCP_CALCULATE_EFF_SEND_MSS


451 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

454 
	`¢mp_öc_t˝∑ssive›ís
();

457 
rc
 = 
	`t˝_íqueue
(
≈cb
, 
NULL
, 0, 
TCP_SYN
 | 
TCP_ACK
, 0, 
TF_SEG_OPTS_MSS


458 #i‡
LWIP_TCP_TIMESTAMPS


460 | (
≈cb
->
Êags
 & 
TF_TIMESTAMP
 ? 
TF_SEG_OPTS_TS
 : 0)

463 i‡(
rc
 !
ERR_OK
) {

464 
	`t˝_ab™d⁄
(
≈cb
, 0);

465  
rc
;

467  
	`t˝_ouçut
(
≈cb
);

469  
ERR_OK
;

470 
	}
}

481 
îr_t


482 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
)

484 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
t˝Àn
, 
pcb
->
rcv_nxt
)) {

485 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

487 i‡(
t˝Àn
 > 0) {

488 
	`t˝_ack_now
(
pcb
);

490  
	`t˝_ouçut
(
pcb
);

491 
	}
}

504 
îr_t


505 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
)

507 
t˝_£g
 *
r£g
;

508 
u8_t
 
ac˚±abÀ
 = 0;

509 
îr_t
 
îr
;

511 
îr
 = 
ERR_OK
;

514 i‡(
Êags
 & 
TCP_RST
) {

516 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

517 i‡(
ackno
 =
pcb
->
¢d_nxt
) {

518 
ac˚±abÀ
 = 1;

521 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

522 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

523 
ac˚±abÀ
 = 1;

527 i‡(
ac˚±abÀ
) {

528 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

529 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

530 
ªcv_Êags
 |
TF_RESET
;

531 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

532  
ERR_RST
;

534 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

535 
£qno
, 
pcb
->
rcv_nxt
));

536 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

537 
£qno
, 
pcb
->
rcv_nxt
));

538  
ERR_OK
;

542 i‡((
Êags
 & 
TCP_SYN
Ë&& (
pcb
->
°©e
 !
SYN_SENT
 &&Öcb->°©ê!
SYN_RCVD
)) {

544 
	`t˝_ack_now
(
pcb
);

545  
ERR_OK
;

549 
pcb
->
tmr
 = 
t˝_ticks
;

550 
pcb
->
kìp_˙t_£¡
 = 0;

552 
	`t˝_∑r£›t
(
pcb
);

555 
pcb
->
°©e
) {

556 
SYN_SENT
:

557 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ackno
,

558 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

560 i‡((
Êags
 & 
TCP_ACK
Ë&& (Êag†& 
TCP_SYN
)

561 && 
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

562 
pcb
->
¢d_buf
++;

563 
pcb
->
rcv_nxt
 = 
£qno
 + 1;

564 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

565 
pcb
->
œ°ack
 = 
ackno
;

566 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

567 
pcb
->
¢d_wl1
 = 
£qno
 - 1;

568 
pcb
->
°©e
 = 
ESTABLISHED
;

570 #i‡
TCP_CALCULATE_EFF_SEND_MSS


571 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

576 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

578 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

579 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

580 --
pcb
->
¢d_queuñí
;

581 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

582 
r£g
 = 
pcb
->
u«cked
;

583 
pcb
->
u«cked
 = 
r£g
->
√xt
;

587 if(
pcb
->
u«cked
 =
NULL
)

588 
pcb
->
πime
 = -1;

590 
pcb
->
πime
 = 0;

591 
pcb
->
ƒtx
 = 0;

594 
	`t˝_£g_‰ì
(
r£g
);

598 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

599 
	`t˝_ack_now
(
pcb
);

602 i‡(
Êags
 & 
TCP_ACK
) {

604 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

605 
t˝hdr
->
de°
,Å˝hdr->
§c
);

608 
SYN_RCVD
:

609 i‡(
Êags
 & 
TCP_ACK
) {

611 i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

612 
u16_t
 
ﬁd_cwnd
;

613 
pcb
->
°©e
 = 
ESTABLISHED
;

614 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

615 #i‡
LWIP_CALLBACK_API


616 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

619 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

620 i‡(
îr
 !
ERR_OK
) {

623 
	`t˝_ab‹t
(
pcb
);

624  
ERR_ABRT
;

626 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

629 
	`t˝_ª˚ive
(
pcb
);

631 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

633 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

634 
	`t˝_ack_now
(
pcb
);

635 
pcb
->
°©e
 = 
CLOSE_WAIT
;

641 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

642 
t˝hdr
->
de°
,Å˝hdr->
§c
);

644 } i‡((
Êags
 & 
TCP_SYN
Ë&& (
£qno
 =
pcb
->
rcv_nxt
 - 1)) {

646 
	`t˝_ªxmô
(
pcb
);

649 
CLOSE_WAIT
:

651 
ESTABLISHED
:

652 
	`t˝_ª˚ive
(
pcb
);

653 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

654 
	`t˝_ack_now
(
pcb
);

655 
pcb
->
°©e
 = 
CLOSE_WAIT
;

658 
FIN_WAIT_1
:

659 
	`t˝_ª˚ive
(
pcb
);

660 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

661 i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

662 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

663 ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

664 
	`t˝_ack_now
(
pcb
);

665 
	`t˝_pcb_purge
(
pcb
);

666 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

667 
pcb
->
°©e
 = 
TIME_WAIT
;

668 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

670 
	`t˝_ack_now
(
pcb
);

671 
pcb
->
°©e
 = 
CLOSING
;

673 } i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

674 
pcb
->
°©e
 = 
FIN_WAIT_2
;

677 
FIN_WAIT_2
:

678 
	`t˝_ª˚ive
(
pcb
);

679 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

680 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

681 
	`t˝_ack_now
(
pcb
);

682 
	`t˝_pcb_purge
(
pcb
);

683 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

684 
pcb
->
°©e
 = 
TIME_WAIT
;

685 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

688 
CLOSING
:

689 
	`t˝_ª˚ive
(
pcb
);

690 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

691 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

692 
	`t˝_pcb_purge
(
pcb
);

693 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

694 
pcb
->
°©e
 = 
TIME_WAIT
;

695 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

698 
LAST_ACK
:

699 
	`t˝_ª˚ive
(
pcb
);

700 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

701 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

703 
ªcv_Êags
 |
TF_CLOSED
;

709  
ERR_OK
;

710 
	}
}

726 
u8_t


727 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
)

729 
t˝_£g
 *
√xt
;

730 #i‡
TCP_QUEUE_OOSEQ


731 
t˝_£g
 *
¥ev
, *
c£g
;

733 
pbuf
 *
p
;

734 
s32_t
 
off
;

735 
s16_t
 
m
;

736 
u32_t
 
right_wnd_edge
;

737 
u16_t
 
√w_tŸ_Àn
;

738 
u8_t
 
ac˚±ed_ö£q
 = 0;

740 i‡(
Êags
 & 
TCP_ACK
) {

741 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl2
;

744 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
£qno
) ||

745 (
pcb
->
¢d_wl1
 =
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, 
ackno
)) ||

746 (
pcb
->
¢d_wl2
 =
ackno
 && 
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

747 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

748 
pcb
->
¢d_wl1
 = 
£qno
;

749 
pcb
->
¢d_wl2
 = 
ackno
;

750 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

751 
pcb
->
≥rsi°_backoff
 = 0;

753 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

754 #i‡
TCP_WND_DEBUG


756 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

757 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
,

758 ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
"áckno %"

759 
U32_F
" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

760 
pcb
->
œ°ack
, 
ackno
,Öcb->
¢d_wl1
, 
£qno
,Öcb->
¢d_wl2
));

765 i‡(
pcb
->
œ°ack
 =
ackno
) {

766 
pcb
->
acked
 = 0;

768 i‡(
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

769 ++
pcb
->
du∑cks
;

770 i‡(
pcb
->
du∑cks
 >3 &&Öcb->
u«cked
 !
NULL
) {

771 i‡(!(
pcb
->
Êags
 & 
TF_INFR
)) {

773 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F
"), fastÑetransmit %"U32_F"\n",

774 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

775 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

776 
	`t˝_ªxmô
(
pcb
);

782 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
)

783 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

785 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

788 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

789 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F
" should bêmö 2 ms†%"U16_F"...\n", 
pcb
->
s°hªsh
, 2*pcb->
mss
));

790 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

793 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

794 
pcb
->
Êags
 |
TF_INFR
;

798 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

799 
pcb
->
cwnd
 +pcb->
mss
;

804 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ckávîãd %"
U32_F
" %"U32_F"\n",

805 
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
, 
right_wnd_edge
));

807 } i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)){

813 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

814 
pcb
->
Êags
 &~
TF_INFR
;

815 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

819 
pcb
->
ƒtx
 = 0;

822 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

825 
pcb
->
acked
 = (
u16_t
)(
ackno
 -Öcb->
œ°ack
);

827 
pcb
->
¢d_buf
 +pcb->
acked
;

830 
pcb
->
du∑cks
 = 0;

831 
pcb
->
œ°ack
 = 
ackno
;

835 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

836 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

837 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

838 
pcb
->
cwnd
 +pcb->
mss
;

840 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

842 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

843 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

844 
pcb
->
cwnd
 = 
√w_cwnd
;

846 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

849 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

850 
ackno
,

851 
pcb
->
u«cked
 !
NULL
?

852 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

853 
pcb
->
u«cked
 !
NULL
?

854 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

858 
pcb
->
u«cked
 !
NULL
 &&

859 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

860 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ackno
)) {

861 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

862 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

863 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

864 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

866 
√xt
 = 
pcb
->
u«cked
;

867 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

869 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

870 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

871 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

872 
	`t˝_£g_‰ì
(
√xt
);

874 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

875 i‡(
pcb
->
¢d_queuñí
 != 0) {

876 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

877 
pcb
->
un£¡
 !
NULL
);

883 if(
pcb
->
u«cked
 =
NULL
)

884 
pcb
->
πime
 = -1;

886 
pcb
->
πime
 = 0;

888 
pcb
->
pﬁ…mr
 = 0;

891 
pcb
->
acked
 = 0;

900 
pcb
->
un£¡
 !
NULL
 &&

901 
	`TCP_SEQ_BETWEEN
(
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
) +

902 
	`TCP_TCPLEN
(
pcb
->
un£¡
),Öcb->
¢d_nxt
)) {

903 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

904 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

905 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

907 
√xt
 = 
pcb
->
un£¡
;

908 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

909 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

910 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

911 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

912 
	`t˝_£g_‰ì
(
√xt
);

913 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

914 i‡(
pcb
->
¢d_queuñí
 != 0) {

915 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

916 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

921 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

922 
pcb
->
πã°
,Öcb->
π£q
, 
ackno
));

927 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ackno
)) {

930 
m
 = (
s16_t
)(
t˝_ticks
 - 
pcb
->
πã°
);

932 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

933 
m
, m * 
TCP_SLOW_INTERVAL
));

936 
m
 = m - (
pcb
->
ß
 >> 3);

937 
pcb
->
ß
 +
m
;

938 i‡(
m
 < 0) {

939 
m
 = -m;

941 
m
 = m - (
pcb
->
sv
 >> 2);

942 
pcb
->
sv
 +
m
;

943 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

945 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

946 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

948 
pcb
->
πã°
 = 0;

954 i‡(
t˝Àn
 > 0) {

985 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
£qno
 + 1, seqnÿ+ 
t˝Àn
 - 1)){

1006 
off
 = 
pcb
->
rcv_nxt
 - 
£qno
;

1007 
p
 = 
ö£g
.p;

1008 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö£g
.
p
);

1009 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

1010 i‡(
ö£g
.
p
->
Àn
 < 
off
) {

1011 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1012 
√w_tŸ_Àn
 = (
u16_t
)(
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1013 
p
->
Àn
 < 
off
) {

1014 
off
 -
p
->
Àn
;

1018 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1019 
p
->
Àn
 = 0;

1020 
p
 =Ö->
√xt
;

1022 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1024 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1027 if(
	`pbuf_hódî
(
ö£g
.
p
, (
s16_t
)-
off
)) {

1029 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1034 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

1035 
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - 
£qno
);

1036 
ö£g
.
t˝hdr
->
£qno
 = seqnÿ
pcb
->
rcv_nxt
;

1039 i‡(
	`TCP_SEQ_LT
(
£qno
, 
pcb
->
rcv_nxt
)){

1043 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
£qno
));

1044 
	`t˝_ack_now
(
pcb
);

1051 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

1052 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1053 i‡(
pcb
->
rcv_nxt
 =
£qno
) {

1054 
ac˚±ed_ö£q
 = 1;

1058 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1060 i‡(
t˝Àn
 > 
pcb
->
rcv_wnd
) {

1061 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1063 "£qnÿ%"
U32_F
"Üen %"U32_F"ÑightÉdge %"U32_F"\n",

1064 
£qno
, 
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1065 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
)

1068 
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë&=~ 
TCP_FIN
;

1070 
ö£g
.
Àn
 = 
pcb
->
rcv_wnd
;

1071 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
)

1072 
ö£g
.
Àn
 -= 1;

1073 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1074 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1075 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1076 (
£qno
 + 
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1078 #i‡
TCP_QUEUE_OOSEQ


1079 i‡(
pcb
->
oo£q
 !
NULL
) {

1080 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1081 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1086 
pcb
->
oo£q
 !
NULL
) {

1087 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1088 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1089 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1091 } i‡(
	`TCP_SEQ_LEQ
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqnÿ+ 
t˝Àn
)) {

1092 i‡(
pcb
->
oo£q
->
Àn
 > 0) {

1094 
	`LWIP_ASSERT
("tcp_receive:Årimmed segment would have zeroÜength\n",

1095 
	`TCP_SEQ_GT
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqno));

1096 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
)

1099 
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë&=~ 
TCP_FIN
;

1100 
ö£g
.
Àn
 = (
u16_t
)(
pcb
->
oo£q
->
t˝hdr
->
£qno
 - seqno);

1101 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
)

1102 
ö£g
.
Àn
 -= 1;

1103 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1104 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1105 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅo ooseq queue\n",

1106 (
£qno
 + 
t˝Àn
Ë=
pcb
->
oo£q
->
t˝hdr
->seqno);

1109 i‡((
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
)) ==

1110 (
	`TCPH_FLAGS
(
pcb
->
oo£q
->
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
))) {

1111 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1112 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1113 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1120 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

1123 
	`LWIP_ASSERT
("t˝_ª˚ive:Å˝À¿>Ñcv_wnd\n", 
pcb
->
rcv_wnd
 >
t˝Àn
);

1124 
pcb
->
rcv_wnd
 -
t˝Àn
;

1126 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1137 i‡(
ö£g
.
p
->
tŸ_Àn
 > 0) {

1138 
ªcv_d©a
 = 
ö£g
.
p
;

1142 
ö£g
.
p
 = 
NULL
;

1144 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1145 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1146 
ªcv_Êags
 |
TF_GOT_FIN
;

1149 #i‡
TCP_QUEUE_OOSEQ


1152 
pcb
->
oo£q
 !
NULL
 &&

1153 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1155 
c£g
 = 
pcb
->
oo£q
;

1156 
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1158 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1159 
	`LWIP_ASSERT
("tcp_receive: ooseqÅcplen >Ñcv_wnd\n",

1160 
pcb
->
rcv_wnd
 >
	`TCP_TCPLEN
(
c£g
));

1161 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1163 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1165 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1168 i‡(
ªcv_d©a
) {

1169 
	`pbuf_ˇt
(
ªcv_d©a
, 
c£g
->
p
);

1171 
ªcv_d©a
 = 
c£g
->
p
;

1173 
c£g
->
p
 = 
NULL
;

1175 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1176 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1177 
ªcv_Êags
 |
TF_GOT_FIN
;

1178 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1179 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1184 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1185 
	`t˝_£g_‰ì
(
c£g
);

1191 
	`t˝_ack
(
pcb
);

1195 
	`t˝_ack_now
(
pcb
);

1196 #i‡
TCP_QUEUE_OOSEQ


1198 i‡(
pcb
->
oo£q
 =
NULL
) {

1199 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö£g
);

1213 
¥ev
 = 
NULL
;

1214 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1215 i‡(
£qno
 =
√xt
->
t˝hdr
->seqno) {

1220 i‡(
ö£g
.
Àn
 > 
√xt
->len) {

1224 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1225 i‡(
c£g
 !
NULL
) {

1226 
c£g
->
√xt
 =Çext->next;

1227 i‡(
¥ev
 !
NULL
) {

1228 
¥ev
->
√xt
 = 
c£g
;

1230 
pcb
->
oo£q
 = 
c£g
;

1232 
	`t˝_£g_‰ì
(
√xt
);

1233 i‡(
c£g
->
√xt
 !
NULL
) {

1234 
√xt
 = 
c£g
->next;

1235 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1237 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1238 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

1250 i‡(
¥ev
 =
NULL
) {

1251 i‡(
	`TCP_SEQ_LT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1257 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1259 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1260 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1262 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1263 i‡(
c£g
 !
NULL
) {

1264 
c£g
->
√xt
 =Çext;

1265 
pcb
->
oo£q
 = 
c£g
;

1272 if(
	`TCP_SEQ_BETWEEN
(
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)){

1278 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1280 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1281 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1284 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1285 i‡(
c£g
 !
NULL
) {

1286 
c£g
->
√xt
 =Çext;

1287 
¥ev
->
√xt
 = 
c£g
;

1288 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, seqno)) {

1290 
¥ev
->
Àn
 = (
u16_t
)(
£qno
 -Öªv->
t˝hdr
->seqno);

1291 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1299 i‡(
√xt
->√xà=
NULL
 &&

1300 
	`TCP_SEQ_GT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1301 
√xt
->√xà
	`t˝_£g_c›y
(&
ö£g
);

1302 i‡(
√xt
->√xà!
NULL
) {

1303 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, seqno)) {

1305 
√xt
->
Àn
 = (
u16_t
)(
£qno
 -Çext->
t˝hdr
->seqno);

1306 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1312 
¥ev
 = 
√xt
;

1319 
	`t˝_ack_now
(
pcb
);

1326 if(!
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1327 
	`t˝_ack_now
(
pcb
);

1330  
ac˚±ed_ö£q
;

1331 
	}
}

1342 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
)

1344 
u16_t
 
c
, 
max_c
;

1345 
u16_t
 
mss
;

1346 
u8_t
 *
›ts
, 
›t
;

1347 #i‡
LWIP_TCP_TIMESTAMPS


1348 
u32_t
 
tsvÆ
;

1351 
›ts
 = (
u8_t
 *)
t˝hdr
 + 
TCP_HLEN
;

1354 if(
	`TCPH_HDRLEN
(
t˝hdr
) > 0x5) {

1355 
max_c
 = (
	`TCPH_HDRLEN
(
t˝hdr
) - 5) << 2;

1356 
c
 = 0; c < 
max_c
; ) {

1357 
›t
 = 
›ts
[
c
];

1358 
›t
) {

1361 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: EOL\n"));

1365 ++
c
;

1366 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: NOP\n"));

1369 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: MSS\n"));

1370 i‡(
›ts
[
c
 + 1] !0x04 || c + 0x04 > 
max_c
) {

1372 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1376 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1378 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1380 
c
 += 0x04;

1382 #i‡
LWIP_TCP_TIMESTAMPS


1384 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: TS\n"));

1385 i‡(
›ts
[
c
 + 1] !0x0A || c + 0x0A > 
max_c
) {

1387 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1391 
tsvÆ
 = (
›ts
[
c
+2]) | (opts[c+3] << 8) |

1392 (
›ts
[
c
+4] << 16) | (opts[c+5] << 24);

1393 i‡(
Êags
 & 
TCP_SYN
) {

1394 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1395 
pcb
->
Êags
 |
TF_TIMESTAMP
;

1396 } i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
ts_œ°ack£¡
, 
£qno
, seqno+
t˝Àn
)) {

1397 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1400 
c
 += 0x0A;

1404 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: other\n"));

1405 i‡(
›ts
[
c
 + 1] == 0) {

1406 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1413 
c
 +
›ts
[c + 1];

1417 
	}
}

	@core/tcp_out.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/t˝.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/öë.h
"

53 
	~"lwù/öë_chksum.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/¢mp.h
"

57 
	~<°rög.h
>

60 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

62 
t˝_hdr
 *

63 
	$t˝_ouçut_£t_hódî
(
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
›éí
,

64 
u32_t
 
£qno_be
 )

66 
t˝_hdr
 *
t˝hdr
 = 
p
->
∑ylﬂd
;

67 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

68 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

69 
t˝hdr
->
£qno
 = 
£qno_be
;

70 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

71 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
);

72 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

73 
t˝hdr
->
urgp
 = 0;

74 
	`TCPH_HDRLEN_SET
(
t˝hdr
, (5 + 
›éí
 / 4));

75 
t˝hdr
->
chksum
 = 0;

78 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

80  
t˝hdr
;

81 
	}
}

90 
îr_t


91 
	$t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

94  
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
Êags
, 
TCP_WRITE_FLAG_COPY
, 0);

95 
	}
}

115 
îr_t


116 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
d©a
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

118 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiÊags=%"U16_F")\n", (*)
pcb
,

119 
d©a
, 
Àn
, (
u16_t
)
≠iÊags
));

121 i‡(
pcb
->
°©e
 =
ESTABLISHED
 ||

122 
pcb
->
°©e
 =
CLOSE_WAIT
 ||

123 
pcb
->
°©e
 =
SYN_SENT
 ||

124 
pcb
->
°©e
 =
SYN_RCVD
) {

125 i‡(
Àn
 > 0) {

126 #i‡
LWIP_TCP_TIMESTAMPS


127  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
,

128 
pcb
->
Êags
 & 
TF_TIMESTAMP
 ? 
TF_SEG_OPTS_TS
 : 0);

130  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
, 0);

133  
ERR_OK
;

135 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 3, ("tcp_write() called in invalid state\n"));

136  
ERR_CONN
;

138 
	}
}

154 
îr_t


155 
	$t˝_íqueue
(
t˝_pcb
 *
pcb
, *
¨g
, 
u16_t
 
Àn
,

156 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
)

158 
pbuf
 *
p
;

159 
t˝_£g
 *
£g
, *
u£g
, *
queue
;

160 
u32_t
 
£qno
;

161 
u16_t
 
À·
, 
£gÀn
;

162 *
±r
;

163 
u16_t
 
queuñí
;

164 
u8_t
 
›éí
;

166 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

167 ("t˝_íqueue’cb=%p,árg=%p,Üí=%"
U16_F
", fœgs=%"
X16_F
",ápiflags=%"U16_F")\n",

168 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
Êags
, (u16_t)
≠iÊags
));

169 
	`LWIP_ERROR
("tcp_enqueue:ÖacketÇeedsÖayload, options, or SYN/FIN (programmer violates API)",

170 ((
Àn
 !0Ë|| (
›tÊags
 !0Ë|| ((
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) != 0)),

171  
ERR_ARG
;);

172 
	`LWIP_ERROR
("tcp_enqueue:Üen != 0 ||árg == NULL (programmer violates API)",

173 ((
Àn
 !0Ë|| (
¨g
 =
NULL
)),  
ERR_ARG
;);

176 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

177 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n", 
Àn
, 
pcb
->
¢d_buf
));

178 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

179  
ERR_MEM
;

181 
À·
 = 
Àn
;

182 
±r
 = 
¨g
;

184 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

188 
£qno
 = 
pcb
->
¢d_lbb
;

190 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

194 
queuñí
 = 
pcb
->
¢d_queuñí
;

196 i‡((
queuñí
 >
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

197 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

198 
	`TCP_STATS_INC
(
t˝
.
memîr
);

199 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

200  
ERR_MEM
;

202 i‡(
queuñí
 != 0) {

203 
	`LWIP_ASSERT
("tcp_enqueue:Öbufs on queue =>átÜeast one queueÇon-empty",

204 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

206 
	`LWIP_ASSERT
("tcp_enqueue:ÇoÖbufs on queue => both queuesÉmpty",

207 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

212 
u£g
 = 
queue
 = 
£g
 = 
NULL
;

213 
£gÀn
 = 0;

214 
queue
 =
NULL
 || 
À·
 > 0) {

216 
£gÀn
 = 
À·
 > (
pcb
->
mss
 - 
›éí
) ? (pcb->mss - optlen) :Üeft;

219 
£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

220 i‡(
£g
 =
NULL
) {

221 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

223 
memîr
;

225 
£g
->
√xt
 = 
NULL
;

226 
£g
->
p
 = 
NULL
;

229 i‡(
queue
 =
NULL
) {

230 
queue
 = 
£g
;

235 
	`LWIP_ASSERT
("u£g !NULL", 
u£g
 !
NULL
);

236 
u£g
->
√xt
 = 
£g
;

239 
u£g
 = 
£g
;

244 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

245 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
 + 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

246 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

247 ("t˝_íqueuê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

248 
memîr
;

250 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can holdÅhe complete seglen",

251 (
£g
->
p
->
Àn
 >
£gÀn
 + 
›éí
));

252 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

253 i‡(
¨g
 !
NULL
) {

254 
	`MEMCPY
((*)
£g
->
p
->
∑ylﬂd
 + 
›éí
, 
±r
, 
£gÀn
);

256 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

261 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

262 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

264 
memîr
;

266 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

273 i‡(
À·
 > 0) {

274 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

276 
	`pbuf_‰ì
(
£g
->
p
);

277 
£g
->
p
 = 
NULL
;

278 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

280 
memîr
;

282 ++
queuñí
;

284 
p
->
∑ylﬂd
 = 
±r
;

285 
£g
->
d©≠å
 = 
±r
;

288 
	`pbuf_ˇt
(
£g
->
p
 ,Ö );

289 
p
 = 
NULL
;

295 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

296 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueue: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

297 
memîr
;

300 
£g
->
Àn
 = 
£gÀn
;

303 i‡(
	`pbuf_hódî
(
£g
->
p
, 
TCP_HLEN
)) {

304 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue:ÇoÑoom for TCP header inÖbuf.\n"));

305 
	`TCP_STATS_INC
(
t˝
.
îr
);

306 
memîr
;

308 
£g
->
t˝hdr
 = seg->
p
->
∑ylﬂd
;

309 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

310 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

311 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

312 
£g
->
t˝hdr
->
urgp
 = 0;

313 
	`TCPH_FLAGS_SET
(
£g
->
t˝hdr
, 
Êags
);

316 
£g
->
Êags
 = 
›tÊags
;

319 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4));

320 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_íqueue: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

321 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

322 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

323 (
u16_t
)
Êags
));

325 
À·
 -
£gÀn
;

326 
£qno
 +
£gÀn
;

327 
±r
 = (*)((
u8_t
 *Ìå + 
£gÀn
);

333 i‡(
pcb
->
un£¡
 =
NULL
) {

334 
u£g
 = 
NULL
;

337 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

343 i‡(
u£g
 !
NULL
 &&

344 
	`TCP_TCPLEN
(
u£g
) != 0 &&

345 !(
	`TCPH_FLAGS
(
u£g
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
)) &&

346 !(
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) &&

348 (
u£g
->
Àn
 + 
queue
->À¿<
pcb
->
mss
) &&

350 (
u£g
->
Êags
 =
queue
->flags)) {

352 if(
	`pbuf_hódî
(
queue
->
p
, -(
TCP_HLEN
 + 
›éí
))) {

354 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

355 
	`TCP_STATS_INC
(
t˝
.
îr
);

356 
memîr
;

358 i‡(
queue
->
p
->
Àn
 == 0) {

360 
pbuf
 *
ﬁd_q
 = 
queue
->
p
;

361 
queue
->
p
 = queue->p->
√xt
;

362 
ﬁd_q
->
√xt
 = 
NULL
;

363 
queuñí
--;

364 
	`pbuf_‰ì
(
ﬁd_q
);

366 
	`LWIP_ASSERT
("zîo-ÀngthÖbuf", (
queue
->
p
 !
NULL
Ë&& (queue->p->
Àn
 > 0));

367 
	`pbuf_ˇt
(
u£g
->
p
, 
queue
->p);

368 
u£g
->
Àn
 +
queue
->len;

369 
u£g
->
√xt
 = 
queue
->next;

371 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: chaöög segmíts,ÇewÜí %"
U16_F
"\n", 
u£g
->
Àn
));

372 i‡(
£g
 =
queue
) {

373 
£g
 = 
u£g
;

374 
£gÀn
 = 
u£g
->
Àn
;

376 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
queue
);

380 i‡(
u£g
 =
NULL
) {

382 
pcb
->
un£¡
 = 
queue
;

386 
u£g
->
√xt
 = 
queue
;

389 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

390 ++
Àn
;

392 i‡(
Êags
 & 
TCP_FIN
) {

393 
pcb
->
Êags
 |
TF_FIN
;

395 
pcb
->
¢d_lbb
 +
Àn
;

397 
pcb
->
¢d_buf
 -
Àn
;

400 
pcb
->
¢d_queuñí
 = 
queuñí
;

401 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

402 i‡(
pcb
->
¢d_queuñí
 != 0) {

403 
	`LWIP_ASSERT
("tcp_enqueue: valid queueÜength",

404 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

409 i‡(
£g
 !
NULL
 && 
£gÀn
 > 0 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

410 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

413  
ERR_OK
;

414 
memîr
:

415 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

416 
	`TCP_STATS_INC
(
t˝
.
memîr
);

418 i‡(
queue
 !
NULL
) {

419 
	`t˝_£gs_‰ì
(
queue
);

421 i‡(
pcb
->
¢d_queuñí
 != 0) {

422 
	`LWIP_ASSERT
("t˝_íqueue: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

423 
pcb
->
un£¡
 !
NULL
);

425 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

426  
ERR_MEM
;

427 
	}
}

430 #i‡
LWIP_TCP_TIMESTAMPS


437 
	$t˝_buûd_time°amp_›ti⁄
(
t˝_pcb
 *
pcb
, 
u32_t
 *
›ts
)

440 
›ts
[0] = 
	`ht⁄l
(0x0101080A);

441 
›ts
[1] = 
	`ht⁄l
(
	`sys_now
());

442 
›ts
[2] = 
	`ht⁄l
(
pcb
->
ts_ª˚¡
);

443 
	}
}

454 
îr_t


455 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

457 
pbuf
 *
p
;

458 
t˝_hdr
 *
t˝hdr
;

459 
t˝_£g
 *
£g
, *
u£g
;

460 
u32_t
 
wnd
, 
¢d_nxt
;

461 #i‡
TCP_CWND_DEBUG


462 
s16_t
 
i
 = 0;

464 
u8_t
 
›éí
 = 0;

470 i‡(
t˝_öput_pcb
 =
pcb
) {

471  
ERR_OK
;

474 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

476 
£g
 = 
pcb
->
un£¡
;

479 
u£g
 = 
pcb
->
u«cked
;

480 i‡(
u£g
 !
NULL
) {

481 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

490 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

491 (
£g
 =
NULL
 ||

492 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

493 #i‡
LWIP_TCP_TIMESTAMPS


494 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
)

495 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

497 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 
›éí
, 
PBUF_RAM
);

498 i‡(
p
 =
NULL
) {

499 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

500  
ERR_BUF
;

502 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

503 ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

505 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

507 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 
›éí
, 
	`ht⁄l
’cb->
¢d_nxt
));

510 #i‡
LWIP_TCP_TIMESTAMPS


511 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

513 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
)

514 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, (
u32_t
 *)(
t˝hdr
 + 1));

517 #i‡
CHECKSUM_GEN_TCP


518 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

519 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

521 #i‡
LWIP_NETIF_HWADDRHINT


522 
	`ù_ouçut_höãd
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

523 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

525 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

526 
IP_PROTO_TCP
);

528 
	`pbuf_‰ì
(
p
);

530  
ERR_OK
;

533 #i‡
TCP_OUTPUT_DEBUG


534 i‡(
£g
 =
NULL
) {

535 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

536 (*)
pcb
->
un£¡
));

539 #i‡
TCP_CWND_DEBUG


540 i‡(
£g
 =
NULL
) {

541 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


542 ", cwnd %"
U16_F
", wnd %"
U32_F


543 ", seg =NULL,áck %"
U32_F
"\n",

544 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

546 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

547 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


548 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

549 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

550 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

551 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

555 
£g
 !
NULL
 &&

556 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

557 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

558 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

566 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

567 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

570 #i‡
TCP_CWND_DEBUG


571 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

572 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

573 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

574 
pcb
->
œ°ack
,

575 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

576 ++
i
;

579 
pcb
->
un£¡
 = 
£g
->
√xt
;

581 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

582 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

583 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

586 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

587 
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

588 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_nxt
, snd_nxt)) {

589 
pcb
->
¢d_nxt
 = snd_nxt;

592 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

593 
£g
->
√xt
 = 
NULL
;

595 i‡(
pcb
->
u«cked
 =
NULL
) {

596 
pcb
->
u«cked
 = 
£g
;

597 
u£g
 = 
£g
;

603 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))){

605 
t˝_£g
 **
cur_£g
 = &(
pcb
->
u«cked
);

606 *
cur_£g
 &&

607 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

608 
cur_£g
 = &((*cur_£g)->
√xt
 );

610 
£g
->
√xt
 = (*
cur_£g
);

611 (*
cur_£g
Ë
£g
;

614 
u£g
->
√xt
 = 
£g
;

615 
u£g
 = u£g->
√xt
;

620 
	`t˝_£g_‰ì
(
£g
);

622 
£g
 = 
pcb
->
un£¡
;

625 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

626 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

628 
pcb
->
≥rsi°_˙t
 = 0;

629 
pcb
->
≥rsi°_backoff
 = 1;

632 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

633  
ERR_OK
;

634 
	}
}

643 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

645 
u16_t
 
Àn
;

646 
√tif
 *netif;

647 
u32_t
 *
›ts
;

650 
	`¢mp_öc_t˝out£gs
();

654 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

657 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

659 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

663 
›ts
 = (
u32_t
 *)(
£g
->
t˝hdr
 + 1);

664 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_MSS
) {

665 
	`TCP_BUILD_MSS_OPTION
(*
›ts
);

666 
›ts
 += 1;

668 #i‡
LWIP_TCP_TIMESTAMPS


669 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

671 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_TS
) {

672 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, 
›ts
);

673 
›ts
 += 3;

679 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

680 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

681 i‡(
√tif
 =
NULL
) {

684 
	`ù_addr_£t
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
));

688 if(
pcb
->
πime
 == -1)

689 
pcb
->
πime
 = 0;

691 i‡(
pcb
->
πã°
 == 0) {

692 
pcb
->
πã°
 = 
t˝_ticks
;

693 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

695 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

697 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

698 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

699 
£g
->
Àn
));

701 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

703 
£g
->
p
->
Àn
 -=Üen;

704 
£g
->
p
->
tŸ_Àn
 -
Àn
;

706 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

708 
£g
->
t˝hdr
->
chksum
 = 0;

709 #i‡
CHECKSUM_GEN_TCP


710 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
,

711 &(
pcb
->
loˇl_ù
),

712 &(
pcb
->
ªmŸe_ù
),

713 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

715 
	`TCP_STATS_INC
(
t˝
.
xmô
);

717 #i‡
LWIP_NETIF_HWADDRHINT


718 
	`ù_ouçut_höãd
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

719 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

721 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

722 
IP_PROTO_TCP
);

724 
	}
}

747 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

748 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

749 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

751 
pbuf
 *
p
;

752 
t˝_hdr
 *
t˝hdr
;

753 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

754 i‡(
p
 =
NULL
) {

755 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

758 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

759 (
p
->
Àn
 >(
t˝_hdr
)));

761 
t˝hdr
 = 
p
->
∑ylﬂd
;

762 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

763 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

764 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

765 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

766 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_RST
 | 
TCP_ACK
);

767 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
TCP_WND
);

768 
t˝hdr
->
urgp
 = 0;

769 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

771 
t˝hdr
->
chksum
 = 0;

772 #i‡
CHECKSUM_GEN_TCP


773 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

774 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

776 
	`TCP_STATS_INC
(
t˝
.
xmô
);

777 
	`¢mp_öc_t˝ouå°s
();

779 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

780 
	`pbuf_‰ì
(
p
);

781 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

782 
	}
}

792 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

794 
t˝_£g
 *
£g
;

796 i‡(
pcb
->
u«cked
 =
NULL
) {

801 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

803 
£g
->
√xt
 = 
pcb
->
un£¡
;

805 
pcb
->
un£¡
 =Öcb->
u«cked
;

807 
pcb
->
u«cked
 = 
NULL
;

810 ++
pcb
->
ƒtx
;

813 
pcb
->
πã°
 = 0;

816 
	`t˝_ouçut
(
pcb
);

817 
	}
}

827 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

829 
t˝_£g
 *
£g
;

830 
t˝_£g
 **
cur_£g
;

832 i‡(
pcb
->
u«cked
 =
NULL
) {

838 
£g
 = 
pcb
->
u«cked
;

839 
pcb
->
u«cked
 = 
£g
->
√xt
;

841 
cur_£g
 = &(
pcb
->
un£¡
);

842 *
cur_£g
 &&

843 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

844 
cur_£g
 = &((*cur_£g)->
√xt
 );

846 
£g
->
√xt
 = *
cur_£g
;

847 *
cur_£g
 = 
£g
;

849 ++
pcb
->
ƒtx
;

852 
pcb
->
πã°
 = 0;

855 
	`¢mp_öc_t˝ªå™s£gs
();

856 
	`t˝_ouçut
(
pcb
);

857 
	}
}

868 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

870 
pbuf
 *
p
;

871 
t˝_hdr
 *
t˝hdr
;

873 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

874 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

875 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

877 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

878 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

880 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

882 if(
p
 =
NULL
) {

883 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

887 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

888 (
p
->
Àn
 >(
t˝_hdr
)));

890 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 0, 
	`ht⁄l
’cb->
¢d_nxt
 - 1));

892 #i‡
CHECKSUM_GEN_TCP


893 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

894 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

896 
	`TCP_STATS_INC
(
t˝
.
xmô
);

899 #i‡
LWIP_NETIF_HWADDRHINT


900 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

901 &(
pcb
->
addr_höt
));

903 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

906 
	`pbuf_‰ì
(
p
);

908 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

909 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

910 
	}
}

922 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

924 
pbuf
 *
p
;

925 
t˝_hdr
 *
t˝hdr
;

926 
t˝_£g
 *
£g
;

928 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

930 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

931 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

932 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

934 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

935 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


936 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

937 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

939 
£g
 = 
pcb
->
u«cked
;

941 if(
£g
 =
NULL
)

942 
£g
 = 
pcb
->
un£¡
;

944 if(
£g
 =
NULL
)

947 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 1, 
PBUF_RAM
);

949 if(
p
 =
NULL
) {

950 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

953 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

954 (
p
->
Àn
 >(
t˝_hdr
)));

956 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 0, 
£g
->t˝hdr->
£qno
);

959 *((*)
p
->
∑ylﬂd
 + (
t˝_hdr
)Ë*(*)
£g
->
d©≠å
;

961 #i‡
CHECKSUM_GEN_TCP


962 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

963 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

965 
	`TCP_STATS_INC
(
t˝
.
xmô
);

968 #i‡
LWIP_NETIF_HWADDRHINT


969 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

970 &(
pcb
->
addr_höt
));

972 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

975 
	`pbuf_‰ì
(
p
);

977 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


978 "ácknÿ%"
U32_F
".\n",

979 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

980 
	}
}

	@core/udp.c

49 
	~"lwù/›t.h
"

51 #i‡
LWIP_UDP


53 
	~"lwù/udp.h
"

54 
	~"lwù/def.h
"

55 
	~"lwù/memp.h
"

56 
	~"lwù/öë.h
"

57 
	~"lwù/öë_chksum.h
"

58 
	~"lwù/ù_addr.h
"

59 
	~"lwù/√tif.h
"

60 
	~"lwù/icmp.h
"

61 
	~"lwù/°©s.h
"

62 
	~"lwù/¢mp.h
"

63 
	~"¨ch/≥rf.h
"

64 
	~"lwù/dh˝.h
"

66 
	~<°rög.h
>

70 
udp_pcb
 *
	gudp_pcbs
;

85 
	$udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

87 
udp_hdr
 *
udphdr
;

88 
udp_pcb
 *
pcb
, *
¥ev
;

89 
udp_pcb
 *
unc⁄_pcb
;

90 
ù_hdr
 *
ùhdr
;

91 
u16_t
 
§c
, 
de°
;

92 
u8_t
 
loˇl_m©ch
;

93 
u8_t
 
brﬂdˇ°
;

95 
PERF_START
;

97 
	`UDP_STATS_INC
(
udp
.
ªcv
);

99 
ùhdr
 = 
p
->
∑ylﬂd
;

103 i‡(
p
->
tŸ_Àn
 < (
	`IPH_HL
(
ùhdr
Ë* 4 + 
UDP_HLEN
Ë|| 
	`pbuf_hódî
’, -(
s16_t
)(IPH_HL(iphdr) * 4))) {

105 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

106 ("udp_öput: sh‹àUDP d©agøm (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

107 
	`UDP_STATS_INC
(
udp
.
À√º
);

108 
	`UDP_STATS_INC
(
udp
.
dr›
);

109 
	`¢mp_öc_udpöîr‹s
();

110 
	`pbuf_‰ì
(
p
);

111 
íd
;

114 
udphdr
 = (
udp_hdr
 *)
p
->
∑ylﬂd
;

117 
brﬂdˇ°
 = 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
);

119 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_öput:Ñe˚ived d©agøm o‡Àngth %"
U16_F
"\n", 
p
->
tŸ_Àn
));

122 
§c
 = 
	`¡ohs
(
udphdr
->src);

123 
de°
 = 
	`¡ohs
(
udphdr
->dest);

125 
	`udp_debug_¥öt
(
udphdr
);

128 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

129 ("ud∞(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "

130 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

131 
	`ù4_addr1
(&
ùhdr
->
de°
), 
	`ù4_addr2
(&iphdr->dest),

132 
	`ù4_addr3
(&
ùhdr
->
de°
), 
	`ù4_addr4
(&ùhdr->de°), 
	`¡ohs
(
udphdr
->dest),

133 
	`ù4_addr1
(&
ùhdr
->
§c
), 
	`ù4_addr2
(&iphdr->src),

134 
	`ù4_addr3
(&
ùhdr
->
§c
), 
	`ù4_addr4
(&ùhdr->§c), 
	`¡ohs
(
udphdr
->src)));

136 #i‡
LWIP_DHCP


137 
pcb
 = 
NULL
;

140 i‡(
de°
 =
DHCP_CLIENT_PORT
) {

142 i‡(
§c
 =
DHCP_SERVER_PORT
) {

143 i‡((
öp
->
dh˝
 !
NULL
Ë&& (öp->dh˝->
pcb
 != NULL)) {

147 i‡((
	`ù_addr_ißny
(&
öp
->
dh˝
->
pcb
->
ªmŸe_ù
) ||

148 
	`ù_addr_cmp
(&(
öp
->
dh˝
->
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

149 
pcb
 = 
öp
->
dh˝
->pcb;

156 
¥ev
 = 
NULL
;

157 
loˇl_m©ch
 = 0;

158 
unc⁄_pcb
 = 
NULL
;

163 
pcb
 = 
udp_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

164 
loˇl_m©ch
 = 0;

166 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

167 ("pcb (%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "

168 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

169 
	`ù4_addr1
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2
(&pcb->local_ip),

170 
	`ù4_addr3
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4
(&pcb->loˇl_ù),Öcb->
loˇl_p‹t
,

171 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

172 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->ªmŸe_ù),Öcb->
ªmŸe_p‹t
));

175 i‡((
pcb
->
loˇl_p‹t
 =
de°
) &&

176 ((!
brﬂdˇ°
 && 
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) ||

177 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
)) ||

178 #i‡
LWIP_IGMP


179 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
)) ||

181 #i‡
IP_SOF_BROADCAST_RECV


182 (
brﬂdˇ°
 && (
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
)))) {

184 (
brﬂdˇ°
))) {

186 
loˇl_m©ch
 = 1;

187 i‡((
unc⁄_pcb
 =
NULL
) &&

188 ((
pcb
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0)) {

190 
unc⁄_pcb
 = 
pcb
;

194 i‡((
loˇl_m©ch
 != 0) &&

195 (
pcb
->
ªmŸe_p‹t
 =
§c
) &&

196 (
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
) ||

197 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

199 i‡(
¥ev
 !
NULL
) {

202 
¥ev
->
√xt
 = 
pcb
->next;

203 
pcb
->
√xt
 = 
udp_pcbs
;

204 
udp_pcbs
 = 
pcb
;

206 
	`UDP_STATS_INC
(
udp
.
ˇchehô
);

210 
¥ev
 = 
pcb
;

213 i‡(
pcb
 =
NULL
) {

214 
pcb
 = 
unc⁄_pcb
;

219 i‡(
pcb
 !
NULL
 || 
	`ù_addr_cmp
(&
öp
->
ù_addr
, &
ùhdr
->
de°
)) {

220 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input: calculating checksum\n"));

221 #i‡
LWIP_UDPLITE


222 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDPLITE
) {

224 #i‡
CHECKSUM_CHECK_UDP


225 
u16_t
 
chkÀn
 = 
	`¡ohs
(
udphdr
->
Àn
);

226 i‡(
chkÀn
 < (
udp_hdr
)) {

227 i‡(
chkÀn
 == 0) {

230 
chkÀn
 = 
p
->
tŸ_Àn
;

234 
	`UDP_STATS_INC
(
udp
.
chkîr
);

235 
	`UDP_STATS_INC
(
udp
.
dr›
);

236 
	`¢mp_öc_udpöîr‹s
();

237 
	`pbuf_‰ì
(
p
);

238 
íd
;

241 i‡(
	`öë_chksum_p£udo_∑πül
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

242 (
ù_addr
 *)&(
ùhdr
->
de°
),

243 
IP_PROTO_UDPLITE
, 
p
->
tŸ_Àn
, 
chkÀn
) != 0) {

244 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

246 
	`UDP_STATS_INC
(
udp
.
chkîr
);

247 
	`UDP_STATS_INC
(
udp
.
dr›
);

248 
	`¢mp_öc_udpöîr‹s
();

249 
	`pbuf_‰ì
(
p
);

250 
íd
;

256 #i‡
CHECKSUM_CHECK_UDP


257 i‡(
udphdr
->
chksum
 != 0) {

258 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

259 (
ù_addr
 *)&(
ùhdr
->
de°
),

260 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

261 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

263 
	`UDP_STATS_INC
(
udp
.
chkîr
);

264 
	`UDP_STATS_INC
(
udp
.
dr›
);

265 
	`¢mp_öc_udpöîr‹s
();

266 
	`pbuf_‰ì
(
p
);

267 
íd
;

272 if(
	`pbuf_hódî
(
p
, -
UDP_HLEN
)) {

274 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

275 
	`UDP_STATS_INC
(
udp
.
dr›
);

276 
	`¢mp_öc_udpöîr‹s
();

277 
	`pbuf_‰ì
(
p
);

278 
íd
;

280 i‡(
pcb
 !
NULL
) {

281 
	`¢mp_öc_udpöd©agøms
();

283 i‡(
pcb
->
ªcv
 !
NULL
) {

285 
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
), src);

288 
	`pbuf_‰ì
(
p
);

289 
íd
;

292 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input:Çot for us.\n"));

294 #i‡
LWIP_ICMP


297 i‡(!
brﬂdˇ°
 &&

298 !
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

300 
	`pbuf_hódî
(
p
, (
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
);

301 
	`LWIP_ASSERT
("p->∑ylﬂd =ùhdr", (
p
->
∑ylﬂd
 =
ùhdr
));

302 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PORT
);

305 
	`UDP_STATS_INC
(
udp
.
¥Ÿîr
);

306 
	`UDP_STATS_INC
(
udp
.
dr›
);

307 
	`¢mp_öc_ud≤›‹ts
();

308 
	`pbuf_‰ì
(
p
);

311 
	`pbuf_‰ì
(
p
);

313 
íd
:

314 
	`PERF_STOP
("udp_input");

315 
	}
}

335 
îr_t


336 
	$udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
)

339  
	`udp_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
);

340 
	}
}

359 
îr_t


360 
	$udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

361 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
)

363 
√tif
 *netif;

365 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_send\n"));

368 #i‡
LWIP_IGMP


369 
√tif
 = 
	`ù_rouã
((
	`ù_addr_ismu…iˇ°
(
d°_ù
))?(&(
pcb
->
mu…iˇ°_ù
)):(dst_ip));

371 
√tif
 = 
	`ù_rouã
(
d°_ù
);

375 i‡(
√tif
 =
NULL
) {

376 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£nd: NÿrouãÅÿ0x%"
X32_F
"\n", 
d°_ù
->
addr
));

377 
	`UDP_STATS_INC
(
udp
.
πîr
);

378  
ERR_RTE
;

380  
	`udp_£ndto_if
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
);

381 
	}
}

402 
îr_t


403 
	$udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

404 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif)

406 
udp_hdr
 *
udphdr
;

407 
ù_addr
 *
§c_ù
;

408 
îr_t
 
îr
;

409 
pbuf
 *
q
;

411 #i‡
IP_SOF_BROADCAST


413 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
d°_ù
, 
√tif
) ) {

414 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£ndto_if: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

415  
ERR_VAL
;

420 i‡(
pcb
->
loˇl_p‹t
 == 0) {

421 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send:Çot yet boundÅoáÖort, bindingÇow\n"));

422 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

423 i‡(
îr
 !
ERR_OK
) {

424 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: forcedÖort bind failed\n"));

425  
îr
;

430 i‡(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)) {

432 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
UDP_HLEN
, 
PBUF_RAM
);

434 i‡(
q
 =
NULL
) {

435 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: couldÇotállocate header\n"));

436  
ERR_MEM
;

439 
	`pbuf_chaö
(
q
, 
p
);

441 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

442 ("udp_£nd:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

446 
q
 = 
p
;

447 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd:ádded hódî i¿givíÖbu‡%p\n", (*)
p
));

449 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct udp_hdr",

450 (
q
->
Àn
 >(
udp_hdr
)));

452 
udphdr
 = 
q
->
∑ylﬂd
;

453 
udphdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

454 
udphdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

456 
udphdr
->
chksum
 = 0x0000;

459 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

461 
§c_ù
 = &(
√tif
->
ù_addr
);

465 i‡(!
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

467 i‡(
q
 !
p
) {

469 
	`pbuf_‰ì
(
q
);

470 
q
 = 
NULL
;

473  
ERR_VAL
;

476 
§c_ù
 = &(
pcb
->
loˇl_ù
);

479 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: sídög d©agøm o‡Àngth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

481 #i‡
LWIP_UDPLITE


483 i‡(
pcb
->
Êags
 & 
UDP_FLAGS_UDPLITE
) {

484 
u16_t
 
chkÀn
, 
chkÀn_hdr
;

485 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

487 
chkÀn_hdr
 = 
chkÀn
 = 
pcb
->
chksum_Àn_tx
;

488 i‡((
chkÀn
 < (
udp_hdr
)Ë|| (chkÀ¿> 
q
->
tŸ_Àn
)) {

489 i‡(
chkÀn
 != 0) {

490 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖcb->chksum_À¿i†ûÀgÆ: %"
U16_F
"\n", 
chkÀn
));

498 
chkÀn_hdr
 = 0;

499 
chkÀn
 = 
q
->
tŸ_Àn
;

501 
udphdr
->
Àn
 = 
	`ht⁄s
(
chkÀn_hdr
);

503 #i‡
CHECKSUM_GEN_UDP


504 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
,

505 
IP_PROTO_UDPLITE
, 
q
->
tŸ_Àn
, 
chkÀn
);

507 i‡(
udphdr
->
chksum
 == 0x0000)

508 
udphdr
->
chksum
 = 0xffff;

511 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));

512 #i‡
LWIP_NETIF_HWADDRHINT


513 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

515 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDPLITE
, 
√tif
);

516 #i‡
LWIP_NETIF_HWADDRHINT


517 
√tif
->
addr_höt
 = 
NULL
;

522 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDPÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

523 
udphdr
->
Àn
 = 
	`ht⁄s
(
q
->
tŸ_Àn
);

525 #i‡
CHECKSUM_GEN_UDP


526 i‡((
pcb
->
Êags
 & 
UDP_FLAGS_NOCHKSUM
) == 0) {

527 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
, q->
tŸ_Àn
);

529 i‡(
udphdr
->
chksum
 == 0x0000) udphdr->chksum = 0xffff;

532 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP checksum 0x%04"
X16_F
"\n", 
udphdr
->
chksum
));

533 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));

535 #i‡
LWIP_NETIF_HWADDRHINT


536 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

538 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDP
, 
√tif
);

539 #i‡
LWIP_NETIF_HWADDRHINT


540 
√tif
->
addr_höt
 = 
NULL
;

544 
	`¢mp_öc_udpoutd©agøms
();

547 i‡(
q
 !
p
) {

549 
	`pbuf_‰ì
(
q
);

550 
q
 = 
NULL
;

554 
	`UDP_STATS_INC
(
udp
.
xmô
);

555  
îr
;

556 
	}
}

577 
îr_t


578 
	$udp_böd
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

580 
udp_pcb
 *
ùcb
;

581 
u8_t
 
ªböd
;

583 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_bind(ipaddr = "));

584 
	`ù_addr_debug_¥öt
(
UDP_DEBUG
, 
ùaddr
);

585 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, (",Ö‹à%"
U16_F
")\n", 
p‹t
));

587 
ªböd
 = 0;

589 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

591 i‡(
pcb
 =
ùcb
) {

593 
	`LWIP_ASSERT
("ªböd =0", 
ªböd
 == 0);

595 
ªböd
 = 1;

602 #ifde‡
LWIP_UDP_TODO


605 i‡((
ùcb
->
loˇl_p‹t
 =
p‹t
) &&

607 (
	`ù_addr_ißny
(&(
ùcb
->
loˇl_ù
)) ||

608 
	`ù_addr_ißny
(
ùaddr
) ||

609 
	`ù_addr_cmp
(&(
ùcb
->
loˇl_ù
), 
ùaddr
))) {

611 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

612 ("udp_böd:Üoˇ»p‹à%"
U16_F
"áÃódy bound byánŸhîÖcb\n", 
p‹t
));

613  
ERR_USE
;

618 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

621 i‡(
p‹t
 == 0) {

622 #i‚de‡
UDP_LOCAL_PORT_RANGE_START


623 
	#UDP_LOCAL_PORT_RANGE_START
 4096

	)

624 
	#UDP_LOCAL_PORT_RANGE_END
 0x7fff

	)

626 
p‹t
 = 
UDP_LOCAL_PORT_RANGE_START
;

627 
ùcb
 = 
udp_pcbs
;

628 (
ùcb
 !
NULL
Ë&& (
p‹t
 !
UDP_LOCAL_PORT_RANGE_END
)) {

629 i‡(
ùcb
->
loˇl_p‹t
 =
p‹t
) {

631 
p‹t
++;

633 
ùcb
 = 
udp_pcbs
;

636 
ùcb
 = ipcb->
√xt
;

638 i‡(
ùcb
 !
NULL
) {

640 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_bind: out of free UDPÖorts\n"));

641  
ERR_USE
;

644 
pcb
->
loˇl_p‹t
 = 
p‹t
;

645 
	`¢mp_ö£π_udpidx_åì
(
pcb
);

647 i‡(
ªböd
 == 0) {

649 
pcb
->
√xt
 = 
udp_pcbs
;

650 
udp_pcbs
 = 
pcb
;

652 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

653 ("udp_böd: boundÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",Öort %"U16_F"\n",

654 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 24) & 0xff),

655 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 16) & 0xff),

656 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 8) & 0xff),

657 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
Ë& 0xff),Öcb->
loˇl_p‹t
));

658  
ERR_OK
;

659 
	}
}

677 
îr_t


678 
	$udp_c⁄√˘
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

680 
udp_pcb
 *
ùcb
;

682 i‡(
pcb
->
loˇl_p‹t
 == 0) {

683 
îr_t
 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

684 i‡(
îr
 !
ERR_OK
)

685  
îr
;

688 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

689 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

690 
pcb
->
Êags
 |
UDP_FLAGS_CONNECTED
;

692 #ifde‡
LWIP_UDP_TODO


694 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
Ë&& !ù_addr_ißny(&pcb->
ªmŸe_ù
)) {

695 
√tif
 *netif;

697 i‡((
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
))Ë=
NULL
) {

698 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_c⁄√˘: NÿrouãÅÿ0x%lx\n", 
pcb
->
ªmŸe_ù
.
addr
));

699 
	`UDP_STATS_INC
(
udp
.
πîr
);

700  
ERR_RTE
;

705 
pcb
->
loˇl_ù
 = 
√tif
->
ù_addr
;

706 } i‡(
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
)) {

707 
pcb
->
loˇl_ù
.
addr
 = 0;

710 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

711 ("udp_c⁄√˘: c⁄√˘edÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",

712 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 24) & 0xff),

713 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 16) & 0xff),

714 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 8) & 0xff),

715 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
Ë& 0xff),Öcb->
ªmŸe_p‹t
));

718 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

719 i‡(
pcb
 =
ùcb
) {

721  
ERR_OK
;

725 
pcb
->
√xt
 = 
udp_pcbs
;

726 
udp_pcbs
 = 
pcb
;

727  
ERR_OK
;

728 
	}
}

736 
	$udp_disc⁄√˘
(
udp_pcb
 *
pcb
)

739 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
IP_ADDR_ANY
);

740 
pcb
->
ªmŸe_p‹t
 = 0;

742 
pcb
->
Êags
 &~
UDP_FLAGS_CONNECTED
;

743 
	}
}

755 
udp_ªcv
(
udp_pcb
 *
pcb
,

756 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
, 
pbuf
 *
p
,

757 
ù_addr
 *
addr
, 
u16_t
 
p‹t
),

758 *
ªcv_¨g
)

761 
pcb
->
ªcv
 =Ñecv;

762 
pcb
->
ªcv_¨g
 =Ñecv_arg;

763 
	}
}

774 
	$udp_ªmove
(
udp_pcb
 *
pcb
)

776 
udp_pcb
 *
pcb2
;

778 
	`¢mp_dñëe_udpidx_åì
(
pcb
);

780 i‡(
udp_pcbs
 =
pcb
) {

782 
udp_pcbs
 = udp_pcbs->
√xt
;

785 
pcb2
 = 
udp_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

787 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

789 
pcb2
->
√xt
 = 
pcb
->next;

792 
	`memp_‰ì
(
MEMP_UDP_PCB
, 
pcb
);

793 
	}
}

803 
udp_pcb
 *

804 
	$udp_√w
()

806 
udp_pcb
 *
pcb
;

807 
pcb
 = 
	`memp_mÆloc
(
MEMP_UDP_PCB
);

809 i‡(
pcb
 !
NULL
) {

814 
	`mem£t
(
pcb
, 0, (
udp_pcb
));

815 
pcb
->
âl
 = 
UDP_TTL
;

817  
pcb
;

818 
	}
}

820 #i‡
UDP_DEBUG


827 
	$udp_debug_¥öt
(
udp_hdr
 *
udphdr
)

829 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("UDP header:\n"));

830 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

831 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

832 
	`¡ohs
(
udphdr
->
§c
),Çtohs(udphdr->
de°
)));

833 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

834 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | 0x%04"
X16_F
" | (len, chksum)\n",

835 
	`¡ohs
(
udphdr
->
Àn
),Çtohs(udphdr->
chksum
)));

836 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

837 
	}
}

	@include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

56 
	#AUTOIP_TMR_INTERVAL
 100

	)

57 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

60 
	#PROBE_WAIT
 1

	)

61 
	#PROBE_MIN
 1

	)

62 
	#PROBE_MAX
 2

	)

63 
	#PROBE_NUM
 3

	)

64 
	#ANNOUNCE_NUM
 2

	)

65 
	#ANNOUNCE_INTERVAL
 2

	)

66 
	#ANNOUNCE_WAIT
 2

	)

67 
	#MAX_CONFLICTS
 10

	)

68 
	#RATE_LIMIT_INTERVAL
 60

	)

69 
	#DEFEND_INTERVAL
 10

	)

72 
	#AUTOIP_STATE_OFF
 0

	)

73 
	#AUTOIP_STATE_PROBING
 1

	)

74 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

75 
	#AUTOIP_STATE_BOUND
 3

	)

77 
	sautoù


79 
ù_addr
 
	mŒùaddr
;

80 
u8_t
 
	m°©e
;

81 
u8_t
 
	m£¡_num
;

82 
u16_t
 
	mâw
;

83 
u8_t
 
	mœ°c⁄Êi˘
;

84 
u8_t
 
	måõd_Œùaddr
;

89 
autoù_öô
();

92 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

95 
îr_t
 
autoù_°›
(
√tif
 *netif);

98 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

101 
autoù_tmr
();

	@include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


47 
	#ICMP_ER
 0

	)

48 
	#ICMP_DUR
 3

	)

49 
	#ICMP_SQ
 4

	)

50 
	#ICMP_RD
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TE
 11

	)

53 
	#ICMP_PP
 12

	)

54 
	#ICMP_TS
 13

	)

55 
	#ICMP_TSR
 14

	)

56 
	#ICMP_IRQ
 15

	)

57 
	#ICMP_IR
 16

	)

59 
	eicmp_dur_ty≥
 {

60 
ICMP_DUR_NET
 = 0,

61 
ICMP_DUR_HOST
 = 1,

62 
ICMP_DUR_PROTO
 = 2,

63 
ICMP_DUR_PORT
 = 3,

64 
ICMP_DUR_FRAG
 = 4,

65 
ICMP_DUR_SR
 = 5

68 
	eicmp_ã_ty≥
 {

69 
ICMP_TE_TTL
 = 0,

70 
ICMP_TE_FRAG
 = 1

73 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

75 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

76 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

78 #ifde‡
PACK_STRUCT_USE_INCLUDES


79 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sicmp_echo_hdr
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

91 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

93 } 
PACK_STRUCT_STRUCT
;

94 
PACK_STRUCT_END


95 #ifde‡
PACK_STRUCT_USE_INCLUDES


96 
	~"¨ch/ï°ru˘.h
"

99 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

100 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

103 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

104 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

106 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


52 
	#IP_PROTO_IGMP
 2

	)

53 
	#IGMP_TTL
 1

	)

54 
	#IGMP_MINLEN
 8

	)

55 
	#ROUTER_ALERT
 0x9404

	)

56 
	#ROUTER_ALERTLEN
 4

	)

61 
	#IGMP_MEMB_QUERY
 0x11

	)

62 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

63 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

64 
	#IGMP_LEAVE_GROUP
 0x17

	)

67 
	#IGMP_TMR_INTERVAL
 100

	)

68 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

69 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

72 
	#IGMP_DEL_MAC_FILTER
 0

	)

73 
	#IGMP_ADD_MAC_FILTER
 1

	)

76 
	#IGMP_GROUP_NON_MEMBER
 0

	)

77 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

78 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

83 #ifde‡
PACK_STRUCT_USE_INCLUDES


84 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sigmp_msg
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
igmp_group_addªss
);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

110 
	sigmp_group
 {

111 
igmp_group
 *
√xt
;

112 
√tif
 *
öãrÁ˚
;

113 
ù_addr
 
group_addªss
;

114 
u8_t
 
œ°_ªp‹ãr_Êag
;

115 
u8_t
 
group_°©e
;

116 
u16_t
 
timî
;

117 
u8_t
 
u£
;

122 
igmp_öô
();

124 
îr_t
 
igmp_°¨t
–
√tif
 *netif);

126 
îr_t
 
igmp_°›
–
√tif
 *netif);

128 
igmp_ªp‹t_groups
–
√tif
 *netif);

130 
igmp_group
 *
igmp_lookf‹_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

132 
igmp_group
 *
igmp_lookup_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

134 
îr_t
 
igmp_ªmove_group
–
igmp_group
 *
group
);

136 
igmp_öput
–
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
);

138 
îr_t
 
igmp_joögroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

140 
îr_t
 
igmp_Àavegroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

142 
igmp_tmr
();

144 
igmp_timeout
–
igmp_group
 *
group
);

146 
igmp_°¨t_timî
–
igmp_group
 *
group
, 
u8_t
 
max_time
);

148 
igmp_°›_timî
–
igmp_group
 *
group
);

150 
igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
);

152 
îr_t
 
igmp_ù_ouçut_if
–
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
, 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif);

154 
igmp_£nd
–
igmp_group
 *
group
, 
u8_t
 
ty≥
);

156 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	sö_addr
 {

43 
u32_t
 
s_addr
;

46 
	#INADDR_NONE
 ((
u32_t
)0xffffffffULË

	)

47 
	#INADDR_LOOPBACK
 ((
u32_t
)0x7f000001ULË

	)

48 
	#INADDR_ANY
 ((
u32_t
)0x00000000ULË

	)

49 
	#INADDR_BROADCAST
 ((
u32_t
)0xffffffffULË

	)

51 
u32_t
 
öë_addr
(c⁄° *
˝
);

52 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

53 *
öë_¡ﬂ
(
ö_addr
 
addr
);

55 #ifde‡
ht⁄s


56 #unde‡
ht⁄s


58 #ifde‡
ht⁄l


59 #unde‡
ht⁄l


61 #ifde‡
¡ohs


62 #unde‡
¡ohs


64 #ifde‡
¡ohl


65 #unde‡
¡ohl


68 #i‚de‡
LWIP_PLATFORM_BYTESWAP


69 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

72 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


73 
	#ht⁄s
(
x
Ë(x)

	)

74 
	#¡ohs
(
x
Ë(x)

	)

75 
	#ht⁄l
(
x
Ë(x)

	)

76 
	#¡ohl
(
x
Ë(x)

	)

78 #ifde‡
LWIP_PREFIX_BYTEORDER_FUNCS


80 
	#ht⁄s
 
lwù_ht⁄s


	)

81 
	#¡ohs
 
lwù_¡ohs


	)

82 
	#ht⁄l
 
lwù_ht⁄l


	)

83 
	#¡ohl
 
lwù_¡ohl


	)

85 #i‡
LWIP_PLATFORM_BYTESWAP


86 
	#ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

87 
	#¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

88 
	#ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

89 
	#¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

91 
u16_t
 
ht⁄s
(u16_à
x
);

92 
u16_t
 
¡ohs
(u16_à
x
);

93 
u32_t
 
ht⁄l
(u32_à
x
);

94 
u32_t
 
¡ohl
(u32_à
x
);

99 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


44 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

45 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

46 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

47 
ù_addr
 *
§c
, ù_add∏*
de°
,

48 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

49 #i‡
LWIP_UDPLITE


50 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

51 
ù_addr
 *
§c
, ù_add∏*
de°
,

52 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

55 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


48 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

50 
	#IP_HLEN
 20

	)

52 
	#IP_PROTO_ICMP
 1

	)

53 
	#IP_PROTO_UDP
 17

	)

54 
	#IP_PROTO_UDPLITE
 136

	)

55 
	#IP_PROTO_TCP
 6

	)

60 #ifde‡
IP_HDRINCL


61 #unde‡
IP_HDRINCL


63 
	#IP_HDRINCL
 
NULL


	)

65 #i‡
LWIP_NETIF_HWADDRHINT


66 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

68 
	#IP_PCB_ADDRHINT


	)

75 
	#IP_PCB
 \

77 
ù_addr
 
loˇl_ù
; \

78 
ù_addr
 
ªmŸe_ù
; \

80 
u16_t
 
so_›ti⁄s
; \

82 
u8_t
 
tos
; \

84 
u8_t
 
âl
 \

86 
IP_PCB_ADDRHINT


	)

88 
	sù_pcb
 {

90 
IP_PCB
;

96 
	#SOF_DEBUG
 (
u16_t
)0x0001U

	)

97 
	#SOF_ACCEPTCONN
 (
u16_t
)0x0002U

	)

98 
	#SOF_REUSEADDR
 (
u16_t
)0x0004U

	)

99 
	#SOF_KEEPALIVE
 (
u16_t
)0x0008U

	)

100 
	#SOF_DONTROUTE
 (
u16_t
)0x0010U

	)

101 
	#SOF_BROADCAST
 (
u16_t
)0x0020U

	)

102 
	#SOF_USELOOPBACK
 (
u16_t
)0x0040U

	)

103 
	#SOF_LINGER
 (
u16_t
)0x0080U

	)

104 
	#SOF_OOBINLINE
 (
u16_t
)0x0100U

	)

105 
	#SOF_REUSEPORT
 (
u16_t
)0x0200U

	)

108 #ifde‡
PACK_STRUCT_USE_INCLUDES


109 
	~"¨ch/bp°ru˘.h
"

111 
PACK_STRUCT_BEGIN


112 
	sù_hdr
 {

114 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

116 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

118 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

126 
PACK_STRUCT_FIELD
(
u16_t
 
_âl_¥Ÿo
);

128 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

130 
PACK_STRUCT_FIELD
(
ù_addr
 
§c
);

131 
PACK_STRUCT_FIELD
(
ù_addr
 
de°
);

132 } 
PACK_STRUCT_STRUCT
;

133 
PACK_STRUCT_END


134 #ifde‡
PACK_STRUCT_USE_INCLUDES


135 
	~"¨ch/ï°ru˘.h
"

138 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

139 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

140 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

141 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

142 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

143 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

144 
	#IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

145 
	#IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

146 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

148 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

149 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

150 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

151 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

152 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

153 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`IPH_TTL
(hdrË<< 8)))

	)

154 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

156 
	#ù_öô
(Ë

	)

157 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

158 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

159 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

160 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

161 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

162 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

163 
√tif
 *netif);

164 #i‡
LWIP_NETIF_HWADDRHINT


165 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

166 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

168 #i‡
IP_OPTIONS_SEND


169 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

170 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

171 
u16_t
 
›éí
);

173 
√tif
 *
ù_cuºít_√tif
();

174 c⁄° 
ù_hdr
 *
ù_cuºít_hódî
();

175 #i‡
IP_DEBUG


176 
ù_debug_¥öt
(
pbuf
 *
p
);

178 
	#ù_debug_¥öt
(
p
)

	)

181 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/öë.h
"

39 #ifde‡
__˝lu•lus


43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
√tif
;

73 c⁄° 
ù_addr
 
ù_addr_™y
;

74 c⁄° 
ù_addr
 
ù_addr_brﬂdˇ°
;

79 
	#IP_ADDR_ANY
 ((
ù_addr
 *)&
ù_addr_™y
)

	)

80 
	#IP_ADDR_BROADCAST
 ((
ù_addr
 *)&
ù_addr_brﬂdˇ°
)

	)

87 
	#IN_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

88 
	#IN_CLASSA_NET
 0xff000000

	)

89 
	#IN_CLASSA_NSHIFT
 24

	)

90 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

91 
	#IN_CLASSA_MAX
 128

	)

93 
	#IN_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

94 
	#IN_CLASSB_NET
 0xffff0000

	)

95 
	#IN_CLASSB_NSHIFT
 16

	)

96 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

97 
	#IN_CLASSB_MAX
 65536

	)

99 
	#IN_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

100 
	#IN_CLASSC_NET
 0xffffff00

	)

101 
	#IN_CLASSC_NSHIFT
 8

	)

102 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

104 
	#IN_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

105 
	#IN_CLASSD_NET
 0xf0000000

	)

106 
	#IN_CLASSD_NSHIFT
 28

	)

107 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

108 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

110 
	#IN_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

111 
	#IN_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

113 
	#IN_LOOPBACKNET
 127

	)

115 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

116 (
ùaddr
)->
addr
 = 
	`ht⁄l
(((
u32_t
)((
a
) & 0xff) << 24) | \

117 ((
u32_t
)((
b
) & 0xff) << 16) | \

118 ((
u32_t
)((
c
) & 0xff) << 8) | \

119 (
u32_t
)((
d
Ë& 0xff))

	)

121 
	#ù_addr_£t
(
de°
, 
§c
Ë(de°)->
addr
 = \

122 ((
§c
Ë=
NULL
? 0:\

123 (
§c
)->
addr
)

	)

132 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

133 (
mask
)->
addr
) == \

134 ((
addr2
)->
addr
 & \

135 (
mask
)->
addr
))

	)

136 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

138 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =0)

	)

140 
u8_t
 
ù_addr_isbrﬂdˇ°
(
ù_addr
 *, 
√tif
 *);

142 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xf0000000UL)Ë=¡ohl(0xe0000000UL))

	)

144 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xffff0000UL)Ë=¡ohl(0xa9„0000UL))

	)

146 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

147 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

148 
ùaddr
 !
NULL
 ? \

149 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 24) & 0xff : 0, \

150 
ùaddr
 !
NULL
 ? \

151 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 16) & 0xff : 0, \

152 
ùaddr
 !
NULL
 ? \

153 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 8) & 0xff : 0, \

154 
ùaddr
 !
NULL
 ? \

155 (
u16_t
)
	`¡ohl
((
ùaddr
)->
addr
Ë& 0xf‡: 0))

	)

159 
	#ù4_addr1
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 24Ë& 0xff)

	)

160 
	#ù4_addr2
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 16Ë& 0xff)

	)

161 
	#ù4_addr3
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 8Ë& 0xff)

	)

162 
	#ù4_addr4
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
)Ë& 0xff)

	)

164 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
);

72 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP6_DUR
 1

	)

47 
	#ICMP6_TE
 3

	)

48 
	#ICMP6_ECHO
 128

	)

49 
	#ICMP6_ER
 129

	)

52 
	eicmp_dur_ty≥
 {

53 
ICMP_DUR_NET
 = 0,

54 
ICMP_DUR_HOST
 = 1,

55 
ICMP_DUR_PROTO
 = 2,

56 
ICMP_DUR_PORT
 = 3,

57 
ICMP_DUR_FRAG
 = 4,

58 
ICMP_DUR_SR
 = 5

61 
	eicmp_ã_ty≥
 {

62 
ICMP_TE_TTL
 = 0,

63 
ICMP_TE_FRAG
 = 1

66 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

68 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

69 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

71 
	sicmp_echo_hdr
 {

72 
u8_t
 
ty≥
;

73 
u8_t
 
icode
;

74 
u16_t
 
chksum
;

75 
u16_t
 
id
;

76 
u16_t
 
£qno
;

79 
	sicmp_dur_hdr
 {

80 
u8_t
 
ty≥
;

81 
u8_t
 
icode
;

82 
u16_t
 
chksum
;

83 
u32_t
 
unu£d
;

86 
	sicmp_ã_hdr
 {

87 
u8_t
 
ty≥
;

88 
u8_t
 
icode
;

89 
u16_t
 
chksum
;

90 
u32_t
 
unu£d
;

93 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


43 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

44 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

45 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

46 
ù_addr
 *
§c
, ù_add∏*
de°
,

47 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 #i‚de‡
_MACHINE_ENDIAN_H_


53 #i‚de‡
_NETINET_IN_H


54 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


55 
u16_t
 
ht⁄s
(u16_à
n
);

56 
u16_t
 
¡ohs
(u16_à
n
);

57 
u32_t
 
ht⁄l
(u32_à
n
);

58 
u32_t
 
¡ohl
(u32_à
n
);

63 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#IP_HLEN
 40

	)

48 
	#IP_PROTO_ICMP
 58

	)

49 
	#IP_PROTO_UDP
 17

	)

50 
	#IP_PROTO_UDPLITE
 136

	)

51 
	#IP_PROTO_TCP
 6

	)

56 #ifde‡
IP_HDRINCL


57 #unde‡
IP_HDRINCL


59 
	#IP_HDRINCL
 
NULL


	)

61 #i‡
LWIP_NETIF_HWADDRHINT


62 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

64 
	#IP_PCB_ADDRHINT


	)

71 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

72 
ù_addr
 
ªmŸe_ù
; \

74 
u16_t
 
so_›ti⁄s
; \

76 
u8_t
 
tos
; \

78 
u8_t
 
âl
; \

80 
IP_PCB_ADDRHINT


	)

84 
	sù_hdr
 {

85 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


86 
u8_t
 
t˛ass1
:4, 
v
:4;

87 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

89 
u8_t
 
v
:4, 
t˛ass1
:4;

90 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

92 
u16_t
 
Êow2
;

93 
u16_t
 
Àn
;

94 
u8_t
 
√xthdr
;

95 
u8_t
 
h›lim
;

96 
ù_addr
 
§c
, 
de°
;

99 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

101 
ù_öô
();

103 
	~"lwù/√tif.h
"

105 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

107 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

110 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

111 
u8_t
 
âl
, u8_à
¥Ÿo
);

113 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

114 
u8_t
 
âl
, u8_à
¥Ÿo
,

115 
√tif
 *netif);

117 
	#ù_cuºít_√tif
(Ë
NULL


	)

118 
	#ù_cuºít_hódî
(Ë
NULL


	)

120 #i‡
IP_DEBUG


121 
ù_debug_¥öt
(
pbuf
 *
p
);

124 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 
	#IP_ADDR_ANY
 0

	)

43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

72 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

73 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

74 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

76 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

77 
ù_addr
 *
mask
);

78 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

79 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

80 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

82 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

83 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

84 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

85 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

86 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

87 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

88 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

89 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

90 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

91 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

93 #ifde‡
__˝lu•lus


	@include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

61 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

62 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

64 
	e√tc⁄n_ty≥
 {

65 
NETCONN_INVALID
 = 0,

67 
NETCONN_TCP
 = 0x10,

69 
NETCONN_UDP
 = 0x20,

70 
NETCONN_UDPLITE
 = 0x21,

71 
NETCONN_UDPNOCHKSUM
= 0x22,

73 
NETCONN_RAW
 = 0x40

76 
	e√tc⁄n_°©e
 {

77 
NETCONN_NONE
,

78 
NETCONN_WRITE
,

79 
NETCONN_LISTEN
,

80 
NETCONN_CONNECT
,

81 
NETCONN_CLOSE


84 
	e√tc⁄n_evt
 {

85 
NETCONN_EVT_RCVPLUS
,

86 
NETCONN_EVT_RCVMINUS
,

87 
NETCONN_EVT_SENDPLUS
,

88 
NETCONN_EVT_SENDMINUS


91 #i‡
LWIP_IGMP


92 
	e√tc⁄n_igmp
 {

93 
NETCONN_JOIN
,

94 
NETCONN_LEAVE


99 
ù_pcb
;

100 
t˝_pcb
;

101 
udp_pcb
;

102 
øw_pcb
;

103 
√tc⁄n
;

106 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

109 
	s√tc⁄n
 {

111 
√tc⁄n_ty≥
 
ty≥
;

113 
√tc⁄n_°©e
 
°©e
;

116 
ù_pcb
 *
ù
;

117 
t˝_pcb
 *
t˝
;

118 
udp_pcb
 *
udp
;

119 
øw_pcb
 *
øw
;

120 } 
pcb
;

122 
îr_t
 
îr
;

124 
sys_£m_t
 
›_com∂ëed
;

127 
sys_mbox_t
 
ªcvmbox
;

130 
sys_mbox_t
 
ac˚±mbox
;

132 
sockë
;

133 #i‡
LWIP_SO_RCVTIMEO


136 
ªcv_timeout
;

138 #i‡
LWIP_SO_RCVBUF


140 
ªcv_bufsize
;

142 
s16_t
 
ªcv_avaû
;

143 #i‡
LWIP_TCP


146 
≠i_msg_msg
 *
wrôe_msg
;

149 
size_t
 
wrôe_off£t
;

150 #i‡
LWIP_TCPIP_CORE_LOCKING


154 
u8_t
 
wrôe_dñayed
;

158 
√tc⁄n_ˇŒback
 
ˇŒback
;

162 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

163 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

164 }

	)

167 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

168 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

170 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

171 
√tc⁄n_ˇŒback
 
ˇŒback
);

172 
îr_t
 
√tc⁄n_dñëe
 (
√tc⁄n
 *
c⁄n
);

174 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

176 
îr_t
 
√tc⁄n_gëaddr
 (
√tc⁄n
 *
c⁄n
,

177 
ù_addr
 *
addr
,

178 
u16_t
 *
p‹t
,

179 
u8_t
 
loˇl
);

180 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

181 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

183 
îr_t
 
√tc⁄n_böd
 (
√tc⁄n
 *
c⁄n
,

184 
ù_addr
 *
addr
,

185 
u16_t
 
p‹t
);

186 
îr_t
 
√tc⁄n_c⁄√˘
 (
√tc⁄n
 *
c⁄n
,

187 
ù_addr
 *
addr
,

188 
u16_t
 
p‹t
);

189 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

190 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

191 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

192 
√tc⁄n
 * 
√tc⁄n_ac˚±
 (√tc⁄¿*
c⁄n
);

193 
√tbuf
 * 
√tc⁄n_ªcv
 (
√tc⁄n
 *
c⁄n
);

194 
îr_t
 
√tc⁄n_£ndto
 (
√tc⁄n
 *
c⁄n
,

195 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

196 
îr_t
 
√tc⁄n_£nd
 (
√tc⁄n
 *
c⁄n
,

197 
√tbuf
 *
buf
);

198 
îr_t
 
√tc⁄n_wrôe
 (
√tc⁄n
 *
c⁄n
,

199 c⁄° *
d©≠å
, 
size_t
 
size
,

200 
u8_t
 
≠iÊags
);

201 
îr_t
 
√tc⁄n_˛o£
 (
√tc⁄n
 *
c⁄n
);

203 #i‡
LWIP_IGMP


204 
îr_t
 
√tc⁄n_joö_Àave_group
 (
√tc⁄n
 *
c⁄n
,

205 
ù_addr
 *
mu…üddr
,

206 
ù_addr
 *
öãrÁ˚
,

207 
√tc⁄n_igmp
 
joö_‹_Àave
);

209 #i‡
LWIP_DNS


210 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
);

213 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
îr
)

	)

214 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

216 #ifde‡
__˝lu•lus


	@include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


57 
	s≠i_msg_msg
 {

60 
√tc⁄n
 *
c⁄n
;

64 
√tbuf
 *
b
;

67 
u8_t
 
¥Ÿo
;

68 } 
n
;

71 
ù_addr
 *
ùaddr
;

72 
u16_t
 
p‹t
;

73 } 
bc
;

76 
ù_addr
 *
ùaddr
;

77 
u16_t
 *
p‹t
;

78 
u8_t
 
loˇl
;

79 } 
ad
;

82 c⁄° *
d©≠å
;

83 
size_t
 
Àn
;

84 
u8_t
 
≠iÊags
;

85 } 
w
;

88 
u16_t
 
Àn
;

89 } 
r
;

90 #i‡
LWIP_IGMP


93 
ù_addr
 *
mu…üddr
;

94 
ù_addr
 *
öãrÁ˚
;

95 
√tc⁄n_igmp
 
joö_‹_Àave
;

96 } 
jl
;

98 #i‡
TCP_LISTEN_BACKLOG


100 
u8_t
 
backlog
;

101 } 
lb
;

103 } 
msg
;

109 
	s≠i_msg
 {

111 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

113 
≠i_msg_msg
 
msg
;

116 #i‡
LWIP_DNS


121 
	sdns_≠i_msg
 {

123 c⁄° *
«me
;

125 
ù_addr
 *
addr
;

128 
sys_£m_t
 
£m
;

130 
îr_t
 *
îr
;

134 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

135 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

136 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

137 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

138 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

139 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

140 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

141 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

142 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

143 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

144 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

145 #i‡
LWIP_IGMP


146 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

149 #i‡
LWIP_DNS


150 
do_gëho°by«me
(*
¨g
);

153 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

154 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

156 #ifde‡
__˝lu•lus


	@include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

50 #ifde‡
__˝lu•lus


54 #i‚de‡
PACK_STRUCT_BEGIN


55 
	#PACK_STRUCT_BEGIN


	)

58 #i‚de‡
PACK_STRUCT_END


59 
	#PACK_STRUCT_END


	)

62 #i‚de‡
PACK_STRUCT_FIELD


63 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

67 #i‚de‡
LWIP_UNUSED_ARG


68 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

72 #ifde‡
LWIP_PROVIDE_ERRNO


74 
	#EPERM
 1

	)

75 
	#ENOENT
 2

	)

76 
	#ESRCH
 3

	)

77 
	#EINTR
 4

	)

78 
	#EIO
 5

	)

79 
	#ENXIO
 6

	)

80 
	#E2BIG
 7

	)

81 
	#ENOEXEC
 8

	)

82 
	#EBADF
 9

	)

83 
	#ECHILD
 10

	)

84 
	#EAGAIN
 11

	)

85 
	#ENOMEM
 12

	)

86 
	#EACCES
 13

	)

87 
	#EFAULT
 14

	)

88 
	#ENOTBLK
 15

	)

89 
	#EBUSY
 16

	)

90 
	#EEXIST
 17

	)

91 
	#EXDEV
 18

	)

92 
	#ENODEV
 19

	)

93 
	#ENOTDIR
 20

	)

94 
	#EISDIR
 21

	)

95 
	#EINVAL
 22

	)

96 
	#ENFILE
 23

	)

97 
	#EMFILE
 24

	)

98 
	#ENOTTY
 25

	)

99 
	#ETXTBSY
 26

	)

100 
	#EFBIG
 27

	)

101 
	#ENOSPC
 28

	)

102 
	#ESPIPE
 29

	)

103 
	#EROFS
 30

	)

104 
	#EMLINK
 31

	)

105 
	#EPIPE
 32

	)

106 
	#EDOM
 33

	)

107 
	#ERANGE
 34

	)

108 
	#EDEADLK
 35

	)

109 
	#ENAMETOOLONG
 36

	)

110 
	#ENOLCK
 37

	)

111 
	#ENOSYS
 38

	)

112 
	#ENOTEMPTY
 39

	)

113 
	#ELOOP
 40

	)

114 
	#EWOULDBLOCK
 
EAGAIN


	)

115 
	#ENOMSG
 42

	)

116 
	#EIDRM
 43

	)

117 
	#ECHRNG
 44

	)

118 
	#EL2NSYNC
 45

	)

119 
	#EL3HLT
 46

	)

120 
	#EL3RST
 47

	)

121 
	#ELNRNG
 48

	)

122 
	#EUNATCH
 49

	)

123 
	#ENOCSI
 50

	)

124 
	#EL2HLT
 51

	)

125 
	#EBADE
 52

	)

126 
	#EBADR
 53

	)

127 
	#EXFULL
 54

	)

128 
	#ENOANO
 55

	)

129 
	#EBADRQC
 56

	)

130 
	#EBADSLT
 57

	)

132 
	#EDEADLOCK
 
EDEADLK


	)

134 
	#EBFONT
 59

	)

135 
	#ENOSTR
 60

	)

136 
	#ENODATA
 61

	)

137 
	#ETIME
 62

	)

138 
	#ENOSR
 63

	)

139 
	#ENONET
 64

	)

140 
	#ENOPKG
 65

	)

141 
	#EREMOTE
 66

	)

142 
	#ENOLINK
 67

	)

143 
	#EADV
 68

	)

144 
	#ESRMNT
 69

	)

145 
	#ECOMM
 70

	)

146 
	#EPROTO
 71

	)

147 
	#EMULTIHOP
 72

	)

148 
	#EDOTDOT
 73

	)

149 
	#EBADMSG
 74

	)

150 
	#EOVERFLOW
 75

	)

151 
	#ENOTUNIQ
 76

	)

152 
	#EBADFD
 77

	)

153 
	#EREMCHG
 78

	)

154 
	#ELIBACC
 79

	)

155 
	#ELIBBAD
 80

	)

156 
	#ELIBSCN
 81

	)

157 
	#ELIBMAX
 82

	)

158 
	#ELIBEXEC
 83

	)

159 
	#EILSEQ
 84

	)

160 
	#ERESTART
 85

	)

161 
	#ESTRPIPE
 86

	)

162 
	#EUSERS
 87

	)

163 
	#ENOTSOCK
 88

	)

164 
	#EDESTADDRREQ
 89

	)

165 
	#EMSGSIZE
 90

	)

166 
	#EPROTOTYPE
 91

	)

167 
	#ENOPROTOOPT
 92

	)

168 
	#EPROTONOSUPPORT
 93

	)

169 
	#ESOCKTNOSUPPORT
 94

	)

170 
	#EOPNOTSUPP
 95

	)

171 
	#EPFNOSUPPORT
 96

	)

172 
	#EAFNOSUPPORT
 97

	)

173 
	#EADDRINUSE
 98

	)

174 
	#EADDRNOTAVAIL
 99

	)

175 
	#ENETDOWN
 100

	)

176 
	#ENETUNREACH
 101

	)

177 
	#ENETRESET
 102

	)

178 
	#ECONNABORTED
 103

	)

179 
	#ECONNRESET
 104

	)

180 
	#ENOBUFS
 105

	)

181 
	#EISCONN
 106

	)

182 
	#ENOTCONN
 107

	)

183 
	#ESHUTDOWN
 108

	)

184 
	#ETOOMANYREFS
 109

	)

185 
	#ETIMEDOUT
 110

	)

186 
	#ECONNREFUSED
 111

	)

187 
	#EHOSTDOWN
 112

	)

188 
	#EHOSTUNREACH
 113

	)

189 
	#EALREADY
 114

	)

190 
	#EINPROGRESS
 115

	)

191 
	#ESTALE
 116

	)

192 
	#EUCLEAN
 117

	)

193 
	#ENOTNAM
 118

	)

194 
	#ENAVAIL
 119

	)

195 
	#EISNAM
 120

	)

196 
	#EREMOTEIO
 121

	)

197 
	#EDQUOT
 122

	)

199 
	#ENOMEDIUM
 123

	)

200 
	#EMEDIUMTYPE
 124

	)

203 
	#ENSROK
 0

	)

204 
	#ENSRNODATA
 160

	)

205 
	#ENSRFORMERR
 161

	)

206 
	#ENSRSERVFAIL
 162

	)

207 
	#ENSRNOTFOUND
 163

	)

208 
	#ENSRNOTIMP
 164

	)

209 
	#ENSRREFUSED
 165

	)

210 
	#ENSRBADQUERY
 166

	)

211 
	#ENSRBADNAME
 167

	)

212 
	#ENSRBADFAMILY
 168

	)

213 
	#ENSRBADRESP
 169

	)

214 
	#ENSRCONNREFUSED
 170

	)

215 
	#ENSRTIMEOUT
 171

	)

216 
	#ENSROF
 172

	)

217 
	#ENSRFILE
 173

	)

218 
	#ENSRNOMEM
 174

	)

219 
	#ENSRDESTRUCTION
 175

	)

220 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

221 
	#ENSRCNAMELOOP
 177

	)

223 #i‚de‡
î∫o


224 
î∫o
;

229 #ifde‡
__˝lu•lus


	@include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_OFF
 0x00

	)

44 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

45 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

46 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

47 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

50 
	#LWIP_DBG_ON
 0x80U

	)

52 
	#LWIP_DBG_OFF
 0x00U

	)

55 
	#LWIP_DBG_TRACE
 0x40U

	)

57 
	#LWIP_DBG_STATE
 0x20U

	)

59 
	#LWIP_DBG_FRESH
 0x10U

	)

61 
	#LWIP_DBG_HALT
 0x08U

	)

63 #i‚de‡
LWIP_NOASSERT


64 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

65 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

67 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

71 #i‚de‡
LWIP_ERROR


72 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

73 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

76 #ifde‡
LWIP_DEBUG


80 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

82 ((
debug
Ë& 
LWIP_DBG_ON
) && \

83 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

84 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

85 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

86 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

90 } 0)

	)

93 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

38 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

39 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

41 #i‚de‡
NULL


42 
	#NULL
 ((*)0)

	)

	@include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	sdh˝


28 
u8_t
 
°©e
;

30 
u8_t
 
åõs
;

32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
pbuf
 *
p
;

38 
dh˝_msg
 *
msg_ö
;

40 
dh˝_msg
 *
›ti⁄s_ö
;

42 
u16_t
 
›ti⁄s_ö_Àn
;

44 
pbuf
 *
p_out
;

45 
dh˝_msg
 *
msg_out
;

46 
u16_t
 
›ti⁄s_out_Àn
;

47 
u16_t
 
ªque°_timeout
;

48 
u16_t
 
t1_timeout
;

49 
u16_t
 
t2_timeout
;

50 
ù_addr
 
£rvî_ù_addr
;

51 
ù_addr
 
of„ªd_ù_addr
;

52 
ù_addr
 
of„ªd_¢_mask
;

53 
ù_addr
 
of„ªd_gw_addr
;

54 
ù_addr
 
of„ªd_bc_addr
;

55 
	#DHCP_MAX_DNS
 2

	)

56 
u32_t
 
dns_cou¡
;

57 
ù_addr
 
of„ªd_dns_addr
[
DHCP_MAX_DNS
];

59 
u32_t
 
of„ªd_t0_Àa£
;

60 
u32_t
 
of„ªd_t1_ª√w
;

61 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_AUTOIP_COOP


63 
u8_t
 
autoù_co›_°©e
;

69 
ù_addr
 
of„ªd_si_addr
;

70 
u8_t
 *
boŸ_fûe_«me
;

75 #ifde‡
PACK_STRUCT_USE_INCLUDES


76 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


80 
	sdh˝_msg


82 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

86 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

88 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

89 
PACK_STRUCT_FIELD
(
ù_addr
 
cüddr
);

90 
PACK_STRUCT_FIELD
(
ù_addr
 
yüddr
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
süddr
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
güddr
);

93 
	#DHCP_CHADDR_LEN
 16U

	)

94 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

95 
	#DHCP_SNAME_LEN
 64U

	)

96 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

97 
	#DHCP_FILE_LEN
 128U

	)

98 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

99 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

100 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

102 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

103 #unde‡
DHCP_OPTIONS_LEN


106 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

108 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

110 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

111 } 
PACK_STRUCT_STRUCT
;

112 
PACK_STRUCT_END


113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/ï°ru˘.h
"

118 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

120 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

122 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

124 
dh˝_°›
(
√tif
 *netif);

126 
dh˝_öf‹m
(
√tif
 *netif);

129 #i‡
DHCP_DOES_ARP_CHECK


130 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
);

134 
dh˝_cﬂr£_tmr
();

136 
dh˝_föe_tmr
();

139 
	#DHCP_MSG_OFS
 (
UDP_DATA_OFS
)

	)

140 
	#DHCP_OP_OFS
 (
DHCP_MSG_OFS
 + 0)

	)

141 
	#DHCP_HTYPE_OFS
 (
DHCP_MSG_OFS
 + 1)

	)

142 
	#DHCP_HLEN_OFS
 (
DHCP_MSG_OFS
 + 2)

	)

143 
	#DHCP_HOPS_OFS
 (
DHCP_MSG_OFS
 + 3)

	)

144 
	#DHCP_XID_OFS
 (
DHCP_MSG_OFS
 + 4)

	)

145 
	#DHCP_SECS_OFS
 (
DHCP_MSG_OFS
 + 8)

	)

146 
	#DHCP_FLAGS_OFS
 (
DHCP_MSG_OFS
 + 10)

	)

147 
	#DHCP_CIADDR_OFS
 (
DHCP_MSG_OFS
 + 12)

	)

148 
	#DHCP_YIADDR_OFS
 (
DHCP_MSG_OFS
 + 16)

	)

149 
	#DHCP_SIADDR_OFS
 (
DHCP_MSG_OFS
 + 20)

	)

150 
	#DHCP_GIADDR_OFS
 (
DHCP_MSG_OFS
 + 24)

	)

151 
	#DHCP_CHADDR_OFS
 (
DHCP_MSG_OFS
 + 28)

	)

152 
	#DHCP_SNAME_OFS
 (
DHCP_MSG_OFS
 + 44)

	)

153 
	#DHCP_FILE_OFS
 (
DHCP_MSG_OFS
 + 108)

	)

154 
	#DHCP_MSG_LEN
 236

	)

156 
	#DHCP_COOKIE_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
)

	)

157 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
 + 4)

	)

159 
	#DHCP_CLIENT_PORT
 68

	)

160 
	#DHCP_SERVER_PORT
 67

	)

163 
	#DHCP_REQUESTING
 1

	)

164 
	#DHCP_INIT
 2

	)

165 
	#DHCP_REBOOTING
 3

	)

166 
	#DHCP_REBINDING
 4

	)

167 
	#DHCP_RENEWING
 5

	)

168 
	#DHCP_SELECTING
 6

	)

169 
	#DHCP_INFORMING
 7

	)

170 
	#DHCP_CHECKING
 8

	)

171 
	#DHCP_PERMANENT
 9

	)

172 
	#DHCP_BOUND
 10

	)

174 
	#DHCP_BACKING_OFF
 12

	)

175 
	#DHCP_OFF
 13

	)

178 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

179 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

181 
	#DHCP_BOOTREQUEST
 1

	)

182 
	#DHCP_BOOTREPLY
 2

	)

184 
	#DHCP_DISCOVER
 1

	)

185 
	#DHCP_OFFER
 2

	)

186 
	#DHCP_REQUEST
 3

	)

187 
	#DHCP_DECLINE
 4

	)

188 
	#DHCP_ACK
 5

	)

189 
	#DHCP_NAK
 6

	)

190 
	#DHCP_RELEASE
 7

	)

191 
	#DHCP_INFORM
 8

	)

193 
	#DHCP_HTYPE_ETH
 1

	)

195 
	#DHCP_HLEN_ETH
 6

	)

197 
	#DHCP_BROADCAST_FLAG
 15

	)

198 
	#DHCP_BROADCAST_MASK
 (1 << 
DHCP_FLAG_BROADCAST
)

	)

201 
	#DHCP_OPTION_PAD
 0

	)

202 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

203 
	#DHCP_OPTION_ROUTER
 3

	)

204 
	#DHCP_OPTION_DNS_SERVER
 6

	)

205 
	#DHCP_OPTION_HOSTNAME
 12

	)

206 
	#DHCP_OPTION_IP_TTL
 23

	)

207 
	#DHCP_OPTION_MTU
 26

	)

208 
	#DHCP_OPTION_BROADCAST
 28

	)

209 
	#DHCP_OPTION_TCP_TTL
 37

	)

210 
	#DHCP_OPTION_END
 255

	)

213 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

214 
	#DHCP_OPTION_LEASE_TIME
 51

	)

215 
	#DHCP_OPTION_OVERLOAD
 52

	)

217 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

218 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

221 
	#DHCP_OPTION_SERVER_ID
 54

	)

222 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

224 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

225 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

227 
	#DHCP_OPTION_T1
 58

	)

228 
	#DHCP_OPTION_T2
 59

	)

229 
	#DHCP_OPTION_US
 60

	)

230 
	#DHCP_OPTION_CLIENT_ID
 61

	)

231 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

232 
	#DHCP_OPTION_BOOTFILE
 67

	)

235 
	#DHCP_OVERLOAD_NONE
 0

	)

236 
	#DHCP_OVERLOAD_FILE
 1

	)

237 
	#DHCP_OVERLOAD_SNAME
 2

	)

238 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

240 #ifde‡
__˝lu•lus


	@include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


42 
	#DNS_TMR_INTERVAL
 1000

	)

45 
	#DNS_RRTYPE_A
 1

	)

46 
	#DNS_RRTYPE_NS
 2

	)

47 
	#DNS_RRTYPE_MD
 3

	)

48 
	#DNS_RRTYPE_MF
 4

	)

49 
	#DNS_RRTYPE_CNAME
 5

	)

50 
	#DNS_RRTYPE_SOA
 6

	)

51 
	#DNS_RRTYPE_MB
 7

	)

52 
	#DNS_RRTYPE_MG
 8

	)

53 
	#DNS_RRTYPE_MR
 9

	)

54 
	#DNS_RRTYPE_NULL
 10

	)

55 
	#DNS_RRTYPE_WKS
 11

	)

56 
	#DNS_RRTYPE_PTR
 12

	)

57 
	#DNS_RRTYPE_HINFO
 13

	)

58 
	#DNS_RRTYPE_MINFO
 14

	)

59 
	#DNS_RRTYPE_MX
 15

	)

60 
	#DNS_RRTYPE_TXT
 16

	)

63 
	#DNS_RRCLASS_IN
 1

	)

64 
	#DNS_RRCLASS_CS
 2

	)

65 
	#DNS_RRCLASS_CH
 3

	)

66 
	#DNS_RRCLASS_HS
 4

	)

67 
	#DNS_RRCLASS_FLUSH
 0x800

	)

76 (*
	tdns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr
 *
	tùaddr
, *
	tˇŒback_¨g
);

79 
	`dns_öô
();

81 
	`dns_tmr
();

83 
	`dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
);

85 
ù_addr
 
	`dns_gë£rvî
(
u8_t
 
numdns
);

87 
îr_t
 
	`dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
,

88 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

90 #i‡
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


91 
	`dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

92 
îr_t
 
	`dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

	@include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

58 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_RTE
)

	)

60 
	#ERR_ABRT
 -5

	)

61 
	#ERR_RST
 -6

	)

62 
	#ERR_CLSD
 -7

	)

63 
	#ERR_CONN
 -8

	)

65 
	#ERR_VAL
 -9

	)

67 
	#ERR_ARG
 -10

	)

69 
	#ERR_USE
 -11

	)

71 
	#ERR_IF
 -12

	)

72 
	#ERR_ISCONN
 -13

	)

74 
	#ERR_INPROGRESS
 -14

	)

77 #ifde‡
LWIP_DEBUG


78 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

80 
	#lwù_°ªº
(
x
Ë""

	)

83 #ifde‡
__˝lu•lus


	@include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 3U

	)

46 
	#LWIP_VERSION_REVISION
 1U

	)

50 
	#LWIP_VERSION_RC
 2U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

61 #i‚de‡
mem_ªÆloc


62 *
	$mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
)

64 
	`LWIP_UNUSED_ARG
(
size
);

65  
mem
;

66 
	}
}

73 #i‡
MEM_SIZE
 > 64000l

74 
u32_t
 
	tmem_size_t
;

76 
u16_t
 
	tmem_size_t
;

79 #i‡
MEM_USE_POOLS


81 
	#mem_öô
()

	)

84 
	#mem_ªÆloc
(
mem
, 
size
Ë(mem)

	)

87 
mem_öô
();

88 *
mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
);

90 *
mem_mÆloc
(
mem_size_t
 
size
);

91 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

92 
mem_‰ì
(*
mem
);

95 #i‚de‡
LWIP_MEM_ALIGN_SIZE


96 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

99 #i‚de‡
LWIP_MEM_ALIGN


100 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

103 #ifde‡
__˝lu•lus


	@include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


79 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

82 #i‡
MEMP_MEM_MALLOC


84 
	~"mem.h
"

86 
	#memp_öô
()

	)

87 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

88 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

92 #i‡
MEM_USE_POOLS


94 
	smemp_mÆloc_hñ≥r


96 
memp_t
 
	gpoﬁƒ
;

100 
memp_öô
();

102 #i‡
MEMP_OVERFLOW_CHECK


103 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

104 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

106 *
memp_mÆloc
(
memp_t
 
ty≥
);

108 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

112 #ifde‡
__˝lu•lus


	@include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

51 #i‡
LWIP_NETCONN


52 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

53 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

56 #i‡
NO_SYS
==0

57 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

58 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

61 #i‡
ARP_QUEUEING


62 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

65 #i‡
LWIP_IGMP


66 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

69 #i‡
NO_SYS
==0

70 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

82 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

83 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

90 #i‡
MEMP_USE_CUSTOM_POOLS


91 
	~"lwùpoﬁs.h
"

98 #unde‡
LWIP_MEMPOOL


99 #unde‡
LWIP_MALLOC_MEMPOOL


100 #unde‡
LWIP_MALLOC_MEMPOOL_START


101 #unde‡
LWIP_MALLOC_MEMPOOL_END


102 #unde‡
LWIP_PBUF_MEMPOOL


	@include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

38 #ifde‡
__˝lu•lus


42 
	s√tbuf
 {

43 
pbuf
 *
p
, *
±r
;

44 
ù_addr
 *
addr
;

45 
u16_t
 
p‹t
;

49 
√tbuf
 * 
√tbuf_√w
 ();

50 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

51 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

52 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

53 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

54 c⁄° *
d©≠å
, 
u16_t
 
size
);

55 
√tbuf_chaö
 (
√tbuf
 *
hód
,

56 
√tbuf
 *
èû
);

58 
u16_t
 
√tbuf_Àn
 (
√tbuf
 *
buf
);

59 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

60 **
d©≠å
, 
u16_t
 *
Àn
);

61 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

62 
√tbuf_fú°
 (
√tbuf
 *
buf
);

65 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

66 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

67 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

68 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

69 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

70 
	#√tbuf_‰omaddr
(
buf
Ë((buf)->
addr
)

	)

71 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

73 #ifde‡
__˝lu•lus


	@include/lwip/netdb.h

30 
	~"lwù/›t.h
"

32 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


34 
	~<°ddef.h
>

36 
	~"lwù/sockës.h
"

39 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


40 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

43 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


44 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

47 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


48 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

51 #i‡
LWIP_DNS_API_DEFINE_ERRORS


53 
	#EAI_NONAME
 200

	)

54 
	#EAI_SERVICE
 201

	)

55 
	#EAI_FAIL
 202

	)

56 
	#EAI_MEMORY
 203

	)

58 
	#HOST_NOT_FOUND
 210

	)

59 
	#NO_DATA
 211

	)

60 
	#NO_RECOVERY
 212

	)

61 
	#TRY_AGAIN
 213

	)

64 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


65 
	sho°ít
 {

66 *
	mh_«me
;

67 **
	mh_Æü£s
;

69 
	mh_addπy≥
;

70 
	mh_Àngth
;

71 **
	mh_addr_li°
;

73 
	#h_addr
 
h_addr_li°
[0]

	)

76 
	saddröfo
 {

77 
	mai_Êags
;

78 
	mai_Ámûy
;

79 
	mai_sockty≥
;

80 
	mai_¥Ÿocﬁ
;

81 
sockÀn_t
 
	mai_addæí
;

82 
sockaddr
 *
	mai_addr
;

83 *
	mai_ˇn⁄«me
;

84 
addröfo
 *
	mai_√xt
;

88 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


90 
h_î∫o
;

93 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

94 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

95 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

96 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

97 
lwù_gëaddröfo
(c⁄° *
nodíame
,

98 c⁄° *
£rv«me
,

99 c⁄° 
addröfo
 *
höts
,

100 
addröfo
 **
ªs
);

102 #i‡
LWIP_COMPAT_SOCKETS


103 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

104 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

105 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

106 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
(
a
)

	)

107 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

108 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

	@include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/öë.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

71 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

73 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

75 
	#NETIF_FLAG_DHCP
 0x08U

	)

78 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

80 
	#NETIF_FLAG_ETHARP
 0x20U

	)

82 
	#NETIF_FLAG_IGMP
 0x40U

	)

88 
	s√tif
 {

90 
√tif
 *
√xt
;

93 
ù_addr
 ip_addr;

94 
ù_addr
 
√tmask
;

95 
ù_addr
 
gw
;

99 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *
öp
);

103 
îr_t
 (* 
ouçut
)(
√tif
 *√tif, 
pbuf
 *
p
,

104 
ù_addr
 *
ùaddr
);

108 
îr_t
 (* 
lökouçut
)(
√tif
 *√tif, 
pbuf
 *
p
);

109 #i‡
LWIP_NETIF_STATUS_CALLBACK


112 (* 
°©us_ˇŒback
)(
√tif
 *netif);

114 #i‡
LWIP_NETIF_LINK_CALLBACK


117 (* 
lök_ˇŒback
)(
√tif
 *netif);

121 *
°©e
;

122 #i‡
LWIP_DHCP


124 
dh˝
 *dhcp;

126 #i‡
LWIP_AUTOIP


128 
autoù
 *autoip;

130 #i‡
LWIP_NETIF_HOSTNAME


132 * 
ho°«me
;

135 
u8_t
 
hwaddr_Àn
;

137 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

139 
u16_t
 
mtu
;

141 
u8_t
 
Êags
;

143 
«me
[2];

145 
u8_t
 
num
;

146 #i‡
LWIP_SNMP


148 
u8_t
 
lök_ty≥
;

150 
u32_t
 
lök_•ìd
;

152 
u32_t
 
ts
;

154 
u32_t
 
iföo˘ës
;

155 
u32_t
 
iföuˇ°pkts
;

156 
u32_t
 
ifönuˇ°pkts
;

157 
u32_t
 
ifödisˇrds
;

158 
u32_t
 
ifouto˘ës
;

159 
u32_t
 
ifoutuˇ°pkts
;

160 
u32_t
 
ifouäuˇ°pkts
;

161 
u32_t
 
ifoutdisˇrds
;

163 #i‡
LWIP_IGMP


165 
îr_t
 (*
igmp_mac_fûãr
)–
√tif
 *√tif, 
ù_addr
 *
group
, 
u8_t
 
a˘i⁄
);

167 #i‡
LWIP_NETIF_HWADDRHINT


168 
u8_t
 *
addr_höt
;

170 #i‡
ENABLE_LOOPBACK


172 
pbuf
 *
lo›_fú°
;

173 
pbuf
 *
lo›_œ°
;

174 #i‡
LWIP_LOOPBACK_MAX_PBUFS


175 
u16_t
 
lo›_˙t_cuºít
;

180 #i‡
LWIP_SNMP


181 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

183 
√tif
->
lök_ty≥
 = 
ty≥
; \

185 
√tif
->
lök_•ìd
 = 
•ìd
; \

186 
√tif
->
ts
 = 0; \

187 
√tif
->
iföo˘ës
 = 0; \

188 
√tif
->
iföuˇ°pkts
 = 0; \

189 
√tif
->
ifönuˇ°pkts
 = 0; \

190 
√tif
->
ifödisˇrds
 = 0; \

191 
√tif
->
ifouto˘ës
 = 0; \

192 
√tif
->
ifoutuˇ°pkts
 = 0; \

193 
√tif
->
ifouäuˇ°pkts
 = 0; \

194 
√tif
->
ifoutdisˇrds
 = 0

	)

196 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

201 
√tif
 *
√tif_li°
;

203 
√tif
 *
√tif_deÁu…
;

205 
	#√tif_öô
(Ë

	)

207 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

208 
ù_addr
 *
gw
,

209 *
°©e
,

210 
îr_t
 (* 
öô
)(
√tif
 *netif),

211 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif));

214 
√tif_£t_addr
(
√tif
 *√tif,
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

215 
ù_addr
 *
gw
);

216 
√tif_ªmove
(
√tif
 *Çetif);

222 
√tif
 *
√tif_föd
(*
«me
);

224 
√tif_£t_deÁu…
(
√tif
 *netif);

226 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

227 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
);

228 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
);

230 
√tif_£t_up
(
√tif
 *netif);

231 
√tif_£t_down
(
√tif
 *netif);

232 
u8_t
 
√tif_is_up
(
√tif
 *netif);

234 #i‡
LWIP_NETIF_STATUS_CALLBACK


238 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif));

241 #i‡
LWIP_NETIF_LINK_CALLBACK


242 
√tif_£t_lök_up
(
√tif
 *netif);

243 
√tif_£t_lök_down
(
√tif
 *netif);

244 
u8_t
 
√tif_is_lök_up
(
√tif
 *netif);

248 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif));

251 #ifde‡
__˝lu•lus


255 #i‡
ENABLE_LOOPBACK


256 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
de°_ù
);

257 
√tif_pﬁl
(
√tif
 *netif);

258 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


259 
√tif_pﬁl_Æl
();

	@include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 
	s√tiÁpi_msg_msg
 {

45 #i‡!
LWIP_TCPIP_CORE_LOCKING


46 
sys_£m_t
 
£m
;

48 
îr_t
 
îr
;

49 
√tif
 *netif;

52 
ù_addr
 *
ùaddr
;

53 
ù_addr
 *
√tmask
;

54 
ù_addr
 *
gw
;

55 *
°©e
;

56 
îr_t
 (* 
öô
Ë(
√tif
 *netif);

57 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif);

58 } 
add
;

60 (* 
voidfunc
)(
√tif
 *netif);

61 
îr_t
 (* 
îπfunc
)(
√tif
 *netif);

62 } 
comm⁄
;

63 } 
msg
;

66 
	s√tiÁpi_msg
 {

67 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

68 
√tiÁpi_msg_msg
 
msg
;

73 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

74 
ù_addr
 *
ùaddr
,

75 
ù_addr
 *
√tmask
,

76 
ù_addr
 *
gw
,

77 *
°©e
,

78 
îr_t
 (* 
öô
)(
√tif
 *netif),

79 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif) );

81 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

82 (* 
voidfunc
)(
√tif
 *netif),

83 
îr_t
 (* 
îπfunc
)(
√tif
 *netif) );

85 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

86 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

87 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

88 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

89 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

90 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

91 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

92 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

94 #ifde‡
__˝lu•lus


	@include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
MEMCPY


76 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

83 #i‚de‡
SMEMCPY


84 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

97 #i‚de‡
MEM_LIBC_MALLOC


98 
	#MEM_LIBC_MALLOC
 0

	)

106 #i‚de‡
MEMP_MEM_MALLOC


107 
	#MEMP_MEM_MALLOC
 0

	)

115 #i‚de‡
MEM_ALIGNMENT


116 
	#MEM_ALIGNMENT
 1

	)

123 #i‚de‡
MEM_SIZE


124 
	#MEM_SIZE
 1600

	)

136 #i‚de‡
MEMP_OVERFLOW_CHECK


137 
	#MEMP_OVERFLOW_CHECK
 0

	)

144 #i‚de‡
MEMP_SANITY_CHECK


145 
	#MEMP_SANITY_CHECK
 0

	)

154 #i‚de‡
MEM_USE_POOLS


155 
	#MEM_USE_POOLS
 0

	)

162 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


163 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

172 #i‚de‡
MEMP_USE_CUSTOM_POOLS


173 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

194 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


195 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

208 #i‚de‡
MEMP_NUM_PBUF


209 
	#MEMP_NUM_PBUF
 16

	)

216 #i‚de‡
MEMP_NUM_RAW_PCB


217 
	#MEMP_NUM_RAW_PCB
 4

	)

225 #i‚de‡
MEMP_NUM_UDP_PCB


226 
	#MEMP_NUM_UDP_PCB
 4

	)

233 #i‚de‡
MEMP_NUM_TCP_PCB


234 
	#MEMP_NUM_TCP_PCB
 5

	)

241 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


242 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

249 #i‚de‡
MEMP_NUM_TCP_SEG


250 
	#MEMP_NUM_TCP_SEG
 16

	)

257 #i‚de‡
MEMP_NUM_REASSDATA


258 
	#MEMP_NUM_REASSDATA
 5

	)

267 #i‚de‡
MEMP_NUM_ARP_QUEUE


268 
	#MEMP_NUM_ARP_QUEUE
 30

	)

277 #i‚de‡
MEMP_NUM_IGMP_GROUP


278 
	#MEMP_NUM_IGMP_GROUP
 8

	)

285 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


286 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

293 #i‚de‡
MEMP_NUM_NETBUF


294 
	#MEMP_NUM_NETBUF
 2

	)

301 #i‚de‡
MEMP_NUM_NETCONN


302 
	#MEMP_NUM_NETCONN
 4

	)

310 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


311 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

319 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


320 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

326 #i‚de‡
PBUF_POOL_SIZE


327 
	#PBUF_POOL_SIZE
 16

	)

338 #i‚de‡
LWIP_ARP


339 
	#LWIP_ARP
 1

	)

345 #i‚de‡
ARP_TABLE_SIZE


346 
	#ARP_TABLE_SIZE
 10

	)

353 #i‚de‡
ARP_QUEUEING


354 
	#ARP_QUEUEING
 1

	)

365 #i‚de‡
ETHARP_TRUST_IP_MAC


366 
	#ETHARP_TRUST_IP_MAC
 1

	)

379 #i‚de‡
IP_FORWARD


380 
	#IP_FORWARD
 0

	)

388 #i‚de‡
IP_OPTIONS_ALLOWED


389 
	#IP_OPTIONS_ALLOWED
 1

	)

397 #i‚de‡
IP_REASSEMBLY


398 
	#IP_REASSEMBLY
 1

	)

406 #i‚de‡
IP_FRAG


407 
	#IP_FRAG
 1

	)

415 #i‚de‡
IP_REASS_MAXAGE


416 
	#IP_REASS_MAXAGE
 3

	)

425 #i‚de‡
IP_REASS_MAX_PBUFS


426 
	#IP_REASS_MAX_PBUFS
 10

	)

434 #i‚de‡
IP_FRAG_USES_STATIC_BUF


435 
	#IP_FRAG_USES_STATIC_BUF
 1

	)

442 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

443 
	#IP_FRAG_MAX_MTU
 1500

	)

449 #i‚de‡
IP_DEFAULT_TTL


450 
	#IP_DEFAULT_TTL
 255

	)

458 #i‚de‡
IP_SOF_BROADCAST


459 
	#IP_SOF_BROADCAST
 0

	)

466 #i‚de‡
IP_SOF_BROADCAST_RECV


467 
	#IP_SOF_BROADCAST_RECV
 0

	)

479 #i‚de‡
LWIP_ICMP


480 
	#LWIP_ICMP
 1

	)

486 #i‚de‡
ICMP_TTL


487 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

493 #i‚de‡
LWIP_BROADCAST_PING


494 
	#LWIP_BROADCAST_PING
 0

	)

500 #i‚de‡
LWIP_MULTICAST_PING


501 
	#LWIP_MULTICAST_PING
 0

	)

512 #i‚de‡
LWIP_RAW


513 
	#LWIP_RAW
 1

	)

519 #i‚de‡
RAW_TTL


520 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

531 #i‚de‡
LWIP_DHCP


532 
	#LWIP_DHCP
 0

	)

538 #i‚de‡
DHCP_DOES_ARP_CHECK


539 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

550 #i‚de‡
LWIP_AUTOIP


551 
	#LWIP_AUTOIP
 0

	)

558 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


559 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

569 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


570 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

582 #i‚de‡
LWIP_SNMP


583 
	#LWIP_SNMP
 0

	)

590 #i‚de‡
SNMP_CONCURRENT_REQUESTS


591 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

598 #i‚de‡
SNMP_TRAP_DESTINATIONS


599 
	#SNMP_TRAP_DESTINATIONS
 1

	)

605 #i‚de‡
SNMP_PRIVATE_MIB


606 
	#SNMP_PRIVATE_MIB
 0

	)

614 #i‚de‡
SNMP_SAFE_REQUESTS


615 
	#SNMP_SAFE_REQUESTS
 1

	)

626 #i‚de‡
LWIP_IGMP


627 
	#LWIP_IGMP
 0

	)

639 #i‚de‡
LWIP_DNS


640 
	#LWIP_DNS
 0

	)

644 #i‚de‡
DNS_TABLE_SIZE


645 
	#DNS_TABLE_SIZE
 4

	)

649 #i‚de‡
DNS_MAX_NAME_LENGTH


650 
	#DNS_MAX_NAME_LENGTH
 256

	)

654 #i‚de‡
DNS_MAX_SERVERS


655 
	#DNS_MAX_SERVERS
 2

	)

659 #i‚de‡
DNS_DOES_NAME_CHECK


660 
	#DNS_DOES_NAME_CHECK
 1

	)

666 #i‚de‡
DNS_USES_STATIC_BUF


667 
	#DNS_USES_STATIC_BUF
 1

	)

671 #i‚de‡
DNS_MSG_SIZE


672 
	#DNS_MSG_SIZE
 512

	)

685 #i‚de‡
DNS_LOCAL_HOSTLIST


686 
	#DNS_LOCAL_HOSTLIST
 0

	)

691 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


692 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

703 #i‚de‡
LWIP_UDP


704 
	#LWIP_UDP
 1

	)

710 #i‚de‡
LWIP_UDPLITE


711 
	#LWIP_UDPLITE
 0

	)

717 #i‚de‡
UDP_TTL


718 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

729 #i‚de‡
LWIP_TCP


730 
	#LWIP_TCP
 1

	)

736 #i‚de‡
TCP_TTL


737 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

744 #i‚de‡
TCP_WND


745 
	#TCP_WND
 2048

	)

751 #i‚de‡
TCP_MAXRTX


752 
	#TCP_MAXRTX
 12

	)

758 #i‚de‡
TCP_SYNMAXRTX


759 
	#TCP_SYNMAXRTX
 6

	)

766 #i‚de‡
TCP_QUEUE_OOSEQ


767 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

777 #i‚de‡
TCP_MSS


778 
	#TCP_MSS
 128

	)

789 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


790 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

797 #i‚de‡
TCP_SND_BUF


798 
	#TCP_SND_BUF
 256

	)

805 #i‚de‡
TCP_SND_QUEUELEN


806 
	#TCP_SND_QUEUELEN
 (4 * (
TCP_SND_BUF
/
TCP_MSS
))

	)

814 #i‚de‡
TCP_SNDLOWAT


815 
	#TCP_SNDLOWAT
 (
TCP_SND_BUF
/2)

	)

821 #i‚de‡
TCP_LISTEN_BACKLOG


822 
	#TCP_LISTEN_BACKLOG
 0

	)

830 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


831 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

837 #i‚de‡
LWIP_TCP_TIMESTAMPS


838 
	#LWIP_TCP_TIMESTAMPS
 0

	)

845 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


846 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

856 #i‚de‡
LWIP_EVENT_API


857 
	#LWIP_EVENT_API
 0

	)

858 
	#LWIP_CALLBACK_API
 1

	)

860 
	#LWIP_EVENT_API
 1

	)

861 
	#LWIP_CALLBACK_API
 0

	)

875 #i‚de‡
PBUF_LINK_HLEN


876 
	#PBUF_LINK_HLEN
 14

	)

884 #i‚de‡
PBUF_POOL_BUFSIZE


885 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

897 #i‚de‡
LWIP_NETIF_HOSTNAME


898 
	#LWIP_NETIF_HOSTNAME
 0

	)

904 #i‚de‡
LWIP_NETIF_API


905 
	#LWIP_NETIF_API
 0

	)

912 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


913 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

920 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


921 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

931 #i‚de‡
LWIP_NETIF_HWADDRHINT


932 
	#LWIP_NETIF_HWADDRHINT
 0

	)

939 #i‚de‡
LWIP_NETIF_LOOPBACK


940 
	#LWIP_NETIF_LOOPBACK
 0

	)

947 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


948 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

964 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


965 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

977 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


978 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

989 #i‚de‡
LWIP_HAVE_LOOPIF


990 
	#LWIP_HAVE_LOOPIF
 0

	)

1001 #i‚de‡
LWIP_HAVE_SLIPIF


1002 
	#LWIP_HAVE_SLIPIF
 0

	)

1013 #i‚de‡
TCPIP_THREAD_NAME


1014 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1022 #i‚de‡
TCPIP_THREAD_STACKSIZE


1023 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1031 #i‚de‡
TCPIP_THREAD_PRIO


1032 
	#TCPIP_THREAD_PRIO
 1

	)

1040 #i‚de‡
TCPIP_MBOX_SIZE


1041 
	#TCPIP_MBOX_SIZE
 0

	)

1047 #i‚de‡
SLIPIF_THREAD_NAME


1048 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1056 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1057 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1065 #i‚de‡
SLIPIF_THREAD_PRIO


1066 
	#SLIPIF_THREAD_PRIO
 1

	)

1072 #i‚de‡
PPP_THREAD_NAME


1073 
	#PPP_THREAD_NAME
 "µpMaö"

	)

1081 #i‚de‡
PPP_THREAD_STACKSIZE


1082 
	#PPP_THREAD_STACKSIZE
 0

	)

1090 #i‚de‡
PPP_THREAD_PRIO


1091 
	#PPP_THREAD_PRIO
 1

	)

1097 #i‚de‡
DEFAULT_THREAD_NAME


1098 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1106 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1107 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1115 #i‚de‡
DEFAULT_THREAD_PRIO


1116 
	#DEFAULT_THREAD_PRIO
 1

	)

1124 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1125 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1133 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1134 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1142 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1143 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1151 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1152 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1164 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1165 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1171 #i‚de‡
LWIP_NETCONN


1172 
	#LWIP_NETCONN
 1

	)

1183 #i‚de‡
LWIP_SOCKET


1184 
	#LWIP_SOCKET
 1

	)

1191 #i‚de‡
LWIP_COMPAT_SOCKETS


1192 
	#LWIP_COMPAT_SOCKETS
 1

	)

1200 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1201 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1209 #i‚de‡
LWIP_TCP_KEEPALIVE


1210 
	#LWIP_TCP_KEEPALIVE
 0

	)

1216 #i‚de‡
LWIP_SO_RCVTIMEO


1217 
	#LWIP_SO_RCVTIMEO
 0

	)

1223 #i‚de‡
LWIP_SO_RCVBUF


1224 
	#LWIP_SO_RCVBUF
 0

	)

1230 #i‚de‡
RECV_BUFSIZE_DEFAULT


1231 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1237 #i‚de‡
SO_REUSE


1238 
	#SO_REUSE
 0

	)

1249 #i‚de‡
LWIP_STATS


1250 
	#LWIP_STATS
 1

	)

1253 #i‡
LWIP_STATS


1258 #i‚de‡
LWIP_STATS_DISPLAY


1259 
	#LWIP_STATS_DISPLAY
 0

	)

1265 #i‚de‡
LINK_STATS


1266 
	#LINK_STATS
 1

	)

1272 #i‚de‡
ETHARP_STATS


1273 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1279 #i‚de‡
IP_STATS


1280 
	#IP_STATS
 1

	)

1287 #i‚de‡
IPFRAG_STATS


1288 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1294 #i‚de‡
ICMP_STATS


1295 
	#ICMP_STATS
 1

	)

1301 #i‚de‡
IGMP_STATS


1302 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1309 #i‚de‡
UDP_STATS


1310 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1317 #i‚de‡
TCP_STATS


1318 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1324 #i‚de‡
MEM_STATS


1325 
	#MEM_STATS
 1

	)

1331 #i‚de‡
MEMP_STATS


1332 
	#MEMP_STATS
 1

	)

1338 #i‚de‡
SYS_STATS


1339 
	#SYS_STATS
 1

	)

1344 
	#LINK_STATS
 0

	)

1345 
	#IP_STATS
 0

	)

1346 
	#IPFRAG_STATS
 0

	)

1347 
	#ICMP_STATS
 0

	)

1348 
	#IGMP_STATS
 0

	)

1349 
	#UDP_STATS
 0

	)

1350 
	#TCP_STATS
 0

	)

1351 
	#MEM_STATS
 0

	)

1352 
	#MEMP_STATS
 0

	)

1353 
	#SYS_STATS
 0

	)

1354 
	#LWIP_STATS_DISPLAY
 0

	)

1366 #i‚de‡
PPP_SUPPORT


1367 
	#PPP_SUPPORT
 0

	)

1373 #i‚de‡
PPPOE_SUPPORT


1374 
	#PPPOE_SUPPORT
 0

	)

1380 #i‚de‡
PPPOS_SUPPORT


1381 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1384 #i‡
PPP_SUPPORT


1389 #i‚de‡
NUM_PPP


1390 
	#NUM_PPP
 1

	)

1396 #i‚de‡
PAP_SUPPORT


1397 
	#PAP_SUPPORT
 0

	)

1403 #i‚de‡
CHAP_SUPPORT


1404 
	#CHAP_SUPPORT
 0

	)

1410 #i‚de‡
MSCHAP_SUPPORT


1411 
	#MSCHAP_SUPPORT
 0

	)

1417 #i‚de‡
CBCP_SUPPORT


1418 
	#CBCP_SUPPORT
 0

	)

1424 #i‚de‡
CCP_SUPPORT


1425 
	#CCP_SUPPORT
 0

	)

1431 #i‚de‡
VJ_SUPPORT


1432 
	#VJ_SUPPORT
 0

	)

1438 #i‚de‡
MD5_SUPPORT


1439 
	#MD5_SUPPORT
 0

	)

1445 #i‚de‡
FSM_DEFTIMEOUT


1446 
	#FSM_DEFTIMEOUT
 6

	)

1449 #i‚de‡
FSM_DEFMAXTERMREQS


1450 
	#FSM_DEFMAXTERMREQS
 2

	)

1453 #i‚de‡
FSM_DEFMAXCONFREQS


1454 
	#FSM_DEFMAXCONFREQS
 10

	)

1457 #i‚de‡
FSM_DEFMAXNAKLOOPS


1458 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1461 #i‚de‡
UPAP_DEFTIMEOUT


1462 
	#UPAP_DEFTIMEOUT
 6

	)

1465 #i‚de‡
UPAP_DEFREQTIME


1466 
	#UPAP_DEFREQTIME
 30

	)

1469 #i‚de‡
CHAP_DEFTIMEOUT


1470 
	#CHAP_DEFTIMEOUT
 6

	)

1473 #i‚de‡
CHAP_DEFTRANSMITS


1474 
	#CHAP_DEFTRANSMITS
 10

	)

1478 #i‚de‡
LCP_ECHOINTERVAL


1479 
	#LCP_ECHOINTERVAL
 0

	)

1483 #i‚de‡
LCP_MAXECHOFAILS


1484 
	#LCP_MAXECHOFAILS
 3

	)

1488 #i‚de‡
PPP_MAXIDLEFLAG


1489 
	#PPP_MAXIDLEFLAG
 100

	)

1500 
	#PPP_MTU
 1500

	)

1501 #i‚de‡
PPP_MAXMTU


1503 
	#PPP_MAXMTU
 1500

	)

1505 
	#PPP_MINMTU
 64

	)

1506 
	#PPP_MRU
 1500

	)

1507 
	#PPP_MAXMRU
 1500

	)

1508 #i‚de‡
PPP_DEFMRU


1509 
	#PPP_DEFMRU
 296

	)

1511 
	#PPP_MINMRU
 128

	)

1514 
	#MAXNAMELEN
 256

	)

1515 
	#MAXSECRETLEN
 256

	)

1527 #i‚de‡
CHECKSUM_GEN_IP


1528 
	#CHECKSUM_GEN_IP
 1

	)

1534 #i‚de‡
CHECKSUM_GEN_UDP


1535 
	#CHECKSUM_GEN_UDP
 1

	)

1541 #i‚de‡
CHECKSUM_GEN_TCP


1542 
	#CHECKSUM_GEN_TCP
 1

	)

1548 #i‚de‡
CHECKSUM_CHECK_IP


1549 
	#CHECKSUM_CHECK_IP
 1

	)

1555 #i‚de‡
CHECKSUM_CHECK_UDP


1556 
	#CHECKSUM_CHECK_UDP
 1

	)

1562 #i‚de‡
CHECKSUM_CHECK_TCP


1563 
	#CHECKSUM_CHECK_TCP
 1

	)

1576 #i‚de‡
LWIP_DBG_MIN_LEVEL


1577 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_OFF


	)

1584 #i‚de‡
LWIP_DBG_TYPES_ON


1585 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1591 #i‚de‡
ETHARP_DEBUG


1592 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1598 #i‚de‡
NETIF_DEBUG


1599 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1605 #i‚de‡
PBUF_DEBUG


1606 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1612 #i‚de‡
API_LIB_DEBUG


1613 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1619 #i‚de‡
API_MSG_DEBUG


1620 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1626 #i‚de‡
SOCKETS_DEBUG


1627 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1633 #i‚de‡
ICMP_DEBUG


1634 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1640 #i‚de‡
IGMP_DEBUG


1641 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1647 #i‚de‡
INET_DEBUG


1648 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1654 #i‚de‡
IP_DEBUG


1655 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1661 #i‚de‡
IP_REASS_DEBUG


1662 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1668 #i‚de‡
RAW_DEBUG


1669 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1675 #i‚de‡
MEM_DEBUG


1676 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1682 #i‚de‡
MEMP_DEBUG


1683 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1689 #i‚de‡
SYS_DEBUG


1690 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1696 #i‚de‡
TCP_DEBUG


1697 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1703 #i‚de‡
TCP_INPUT_DEBUG


1704 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1710 #i‚de‡
TCP_FR_DEBUG


1711 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1718 #i‚de‡
TCP_RTO_DEBUG


1719 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1725 #i‚de‡
TCP_CWND_DEBUG


1726 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1732 #i‚de‡
TCP_WND_DEBUG


1733 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1739 #i‚de‡
TCP_OUTPUT_DEBUG


1740 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1746 #i‚de‡
TCP_RST_DEBUG


1747 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1753 #i‚de‡
TCP_QLEN_DEBUG


1754 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1760 #i‚de‡
UDP_DEBUG


1761 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1767 #i‚de‡
TCPIP_DEBUG


1768 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1774 #i‚de‡
PPP_DEBUG


1775 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

1781 #i‚de‡
SLIP_DEBUG


1782 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

1788 #i‚de‡
DHCP_DEBUG


1789 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

1795 #i‚de‡
AUTOIP_DEBUG


1796 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

1802 #i‚de‡
SNMP_MSG_DEBUG


1803 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1809 #i‚de‡
SNMP_MIB_DEBUG


1810 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

1816 #i‚de‡
DNS_DEBUG


1817 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 
	#PBUF_TRANSPORT_HLEN
 20

	)

44 
	#PBUF_IP_HLEN
 20

	)

47 
PBUF_TRANSPORT
,

48 
PBUF_IP
,

49 
PBUF_LINK
,

50 
PBUF_RAW


51 } 
	tpbuf_œyî
;

54 
PBUF_RAM
,

55 
PBUF_ROM
,

56 
PBUF_REF
,

57 
PBUF_POOL


58 } 
	tpbuf_ty≥
;

62 
	#PBUF_FLAG_PUSH
 0x01U

	)

64 
	spbuf
 {

66 
pbuf
 *
√xt
;

69 *
∑ylﬂd
;

78 
u16_t
 
tŸ_Àn
;

81 
u16_t
 
Àn
;

84 
u8_t
 
ty≥
;

87 
u8_t
 
Êags
;

94 
u16_t
 
ªf
;

99 
	#pbuf_öô
()

	)

101 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
size
, 
pbuf_ty≥
 
ty≥
);

102 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

103 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

104 
pbuf_ªf
(
pbuf
 *
p
);

105 
pbuf_ªf_chaö
(
pbuf
 *
p
);

106 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

107 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

108 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

109 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

110 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

111 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

112 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

113 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

114 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

116 #ifde‡
__˝lu•lus


	@include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/öë.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
	søw_pcb
 {

50 
IP_PCB
;

52 
øw_pcb
 *
√xt
;

54 
u8_t
 
¥Ÿocﬁ
;

66 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

67 
ù_addr
 *
addr
);

69 *
ªcv_¨g
;

74 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

75 
øw_ªmove
 (
øw_pcb
 *
pcb
);

76 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

77 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

79 
øw_ªcv
 (
øw_pcb
 *
pcb
,

80 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
,

81 
pbuf
 *
p
,

82 
ù_addr
 *
addr
),

83 *
ªcv_¨g
);

84 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
);

85 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

88 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

89 
	#øw_öô
(Ë

	)

91 #ifde‡
__˝lu•lus


	@include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


54 
sio_fd_t
 
sio_›í
(
u8_t
);

57 #i‚de‡
sio_£nd


58 
sio_£nd
(
u8_t
, 
sio_fd_t
);

61 #i‚de‡
sio_ªcv


62 
u8_t
 
sio_ªcv
(
sio_fd_t
);

65 #i‚de‡
sio_ªad


66 
u32_t
 
sio_ªad
(
sio_fd_t
, 
u8_t
 *, u32_t);

69 #i‚de‡
sio_wrôe


70 
u32_t
 
sio_wrôe
(
sio_fd_t
, 
u8_t
 *, u32_t);

73 #i‚de‡
sio_ªad_ab‹t


74 
sio_ªad_ab‹t
(
sio_fd_t
);

77 #ifde‡
__˝lu•lus


	@include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/udp.h
"

40 #ifde‡
__˝lu•lus


47 
	e¢mp_ifTy≥
 {

48 
¢mp_ifTy≥_Ÿhî
=1,

49 
¢mp_ifTy≥_ªguœr1822
,

50 
¢mp_ifTy≥_hdh1822
,

51 
¢mp_ifTy≥_ddn_x25
,

52 
¢mp_ifTy≥_rfc877_x25
,

53 
¢mp_ifTy≥_ëhî√t_csmacd
,

54 
¢mp_ifTy≥_iso88023_csmacd
,

55 
¢mp_ifTy≥_iso88024_tokíBus
,

56 
¢mp_ifTy≥_iso88025_tokíRög
,

57 
¢mp_ifTy≥_iso88026_m™
,

58 
¢mp_ifTy≥_°¨L™
,

59 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

60 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

61 
¢mp_ifTy≥_hy≥rch™√l
,

62 
¢mp_ifTy≥_fddi
,

63 
¢mp_ifTy≥_œpb
,

64 
¢mp_ifTy≥_sdlc
,

65 
¢mp_ifTy≥_ds1
,

66 
¢mp_ifTy≥_e1
,

67 
¢mp_ifTy≥_basicISDN
,

68 
¢mp_ifTy≥_¥im¨yISDN
,

69 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

70 
¢mp_ifTy≥_µp
,

71 
¢mp_ifTy≥_so·w¨eLo›back
,

72 
¢mp_ifTy≥_e⁄
,

73 
¢mp_ifTy≥_ëhî√t_3Mbô
,

74 
¢mp_ifTy≥_nsù
,

75 
¢mp_ifTy≥_¶ù
,

76 
¢mp_ifTy≥_u…ø
,

77 
¢mp_ifTy≥_ds3
,

78 
¢mp_ifTy≥_sù
,

79 
¢mp_ifTy≥_‰ame_ªœy


82 #i‡
LWIP_SNMP


85 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

88 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

91 
	s¢mp_obj_id


93 
u8_t
 
Àn
;

94 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

98 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

99 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

100 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

101 
¢mp_öc_sysu±ime
();

102 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

103 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

104 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

105 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

106 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

110 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

111 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

112 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

113 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

114 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

116 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

117 
¢mp_öc_iÊi°
();

118 
¢mp_dec_iÊi°
();

121 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

122 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

125 
¢mp_öc_ùöª˚ives
();

126 
¢mp_öc_ùöhdªº‹s
();

127 
¢mp_öc_ùöaddªº‹s
();

128 
¢mp_öc_ùf‹wd©agøms
();

129 
¢mp_öc_ùöunknow≈rŸos
();

130 
¢mp_öc_ùödisˇrds
();

131 
¢mp_öc_ùödñivîs
();

132 
¢mp_öc_ùouåeque°s
();

133 
¢mp_öc_ùoutdisˇrds
();

134 
¢mp_öc_ùouä‹ouãs
();

135 
¢mp_öc_ùªasmªqds
();

136 
¢mp_öc_ùªasmoks
();

137 
¢mp_öc_ùªasmÁûs
();

138 
¢mp_öc_ù‰agoks
();

139 
¢mp_öc_ù‰agÁûs
();

140 
¢mp_öc_ù‰ag¸óãs
();

141 
¢mp_öc_ùroutögdisˇrds
();

142 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

143 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

144 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

145 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_öc_icmpömsgs
();

149 
¢mp_öc_icmpöîr‹s
();

150 
¢mp_öc_icmpöde°uƒóchs
();

151 
¢mp_öc_icmpötimìxcds
();

152 
¢mp_öc_icmpö∑rm¥obs
();

153 
¢mp_öc_icmpö§cquíchs
();

154 
¢mp_öc_icmpöªdúe˘s
();

155 
¢mp_öc_icmpöechos
();

156 
¢mp_öc_icmpöech‹ïs
();

157 
¢mp_öc_icmpötime°amps
();

158 
¢mp_öc_icmpötime°am¥ïs
();

159 
¢mp_öc_icmpöaddrmasks
();

160 
¢mp_öc_icmpöaddrmaskªps
();

161 
¢mp_öc_icmpoutmsgs
();

162 
¢mp_öc_icmpouãº‹s
();

163 
¢mp_öc_icmpoutde°uƒóchs
();

164 
¢mp_öc_icmpouâimìxcds
();

165 
¢mp_öc_icmpouç¨m¥obs
();

166 
¢mp_öc_icmpout§cquíchs
();

167 
¢mp_öc_icmpouåedúe˘s
();

168 
¢mp_öc_icmpouãchos
();

169 
¢mp_öc_icmpouãch‹ïs
();

170 
¢mp_öc_icmpouâime°amps
();

171 
¢mp_öc_icmpouâime°am¥ïs
();

172 
¢mp_öc_icmpouèddrmasks
();

173 
¢mp_öc_icmpouèddrmaskªps
();

176 
¢mp_öc_t˝a˘ive›ís
();

177 
¢mp_öc_t˝∑ssive›ís
();

178 
¢mp_öc_t˝©ãm±Áûs
();

179 
¢mp_öc_t˝e°abª£ts
();

180 
¢mp_öc_t˝ö£gs
();

181 
¢mp_öc_t˝out£gs
();

182 
¢mp_öc_t˝ªå™s£gs
();

183 
¢mp_öc_t˝öîrs
();

184 
¢mp_öc_t˝ouå°s
();

187 
¢mp_öc_udpöd©agøms
();

188 
¢mp_öc_ud≤›‹ts
();

189 
¢mp_öc_udpöîr‹s
();

190 
¢mp_öc_udpoutd©agøms
();

191 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

192 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_öc_¢mpöpkts
();

196 
¢mp_öc_¢mpouçkts
();

197 
¢mp_öc_¢mpöbadvîsi⁄s
();

198 
¢mp_öc_¢mpöbadcommunôy«mes
();

199 
¢mp_öc_¢mpöbadcommunôyu£s
();

200 
¢mp_öc_¢mpöa¢∑r£îrs
();

201 
¢mp_öc_¢mpötoobigs
();

202 
¢mp_öc_¢mpönosuch«mes
();

203 
¢mp_öc_¢mpöbadvÆues
();

204 
¢mp_öc_¢mpöªad⁄lys
();

205 
¢mp_öc_¢mpögíîrs
();

206 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

207 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

208 
¢mp_öc_¢mpögëªque°s
();

209 
¢mp_öc_¢mpögë√xts
();

210 
¢mp_öc_¢mpö£åeque°s
();

211 
¢mp_öc_¢mpögëª•⁄£s
();

212 
¢mp_öc_¢mpöå≠s
();

213 
¢mp_öc_¢mpouâoobigs
();

214 
¢mp_öc_¢mpouäosuch«mes
();

215 
¢mp_öc_¢mpoutbadvÆues
();

216 
¢mp_öc_¢mpoutgíîrs
();

217 
¢mp_öc_¢mpoutgëªque°s
();

218 
¢mp_öc_¢mpoutgë√xts
();

219 
¢mp_öc_¢mpout£åeque°s
();

220 
¢mp_öc_¢mpoutgëª•⁄£s
();

221 
¢mp_öc_¢mpouâøps
();

222 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

223 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

224 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

231 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

232 
	#¢mp_£t_sysobjid
(
oid
);

	)

233 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

234 
	#¢mp_öc_sysu±ime
()

	)

235 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

236 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

237 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

238 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

239 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

243 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

244 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

245 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

246 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

247 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

249 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

250 
	#¢mp_öc_iÊi°
()

	)

251 
	#¢mp_dec_iÊi°
()

	)

254 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

255 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_öc_ùöª˚ives
()

	)

259 
	#¢mp_öc_ùöhdªº‹s
()

	)

260 
	#¢mp_öc_ùöaddªº‹s
()

	)

261 
	#¢mp_öc_ùf‹wd©agøms
()

	)

262 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

263 
	#¢mp_öc_ùödisˇrds
()

	)

264 
	#¢mp_öc_ùödñivîs
()

	)

265 
	#¢mp_öc_ùouåeque°s
()

	)

266 
	#¢mp_öc_ùoutdisˇrds
()

	)

267 
	#¢mp_öc_ùouä‹ouãs
()

	)

268 
	#¢mp_öc_ùªasmªqds
()

	)

269 
	#¢mp_öc_ùªasmoks
()

	)

270 
	#¢mp_öc_ùªasmÁûs
()

	)

271 
	#¢mp_öc_ù‰agoks
()

	)

272 
	#¢mp_öc_ù‰agÁûs
()

	)

273 
	#¢mp_öc_ù‰ag¸óãs
()

	)

274 
	#¢mp_öc_ùroutögdisˇrds
()

	)

275 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

276 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

277 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

278 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_öc_icmpömsgs
()

	)

282 
	#¢mp_öc_icmpöîr‹s
()

	)

283 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

284 
	#¢mp_öc_icmpötimìxcds
()

	)

285 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

286 
	#¢mp_öc_icmpö§cquíchs
()

	)

287 
	#¢mp_öc_icmpöªdúe˘s
()

	)

288 
	#¢mp_öc_icmpöechos
()

	)

289 
	#¢mp_öc_icmpöech‹ïs
()

	)

290 
	#¢mp_öc_icmpötime°amps
()

	)

291 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

292 
	#¢mp_öc_icmpöaddrmasks
()

	)

293 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

294 
	#¢mp_öc_icmpoutmsgs
()

	)

295 
	#¢mp_öc_icmpouãº‹s
()

	)

296 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

297 
	#¢mp_öc_icmpouâimìxcds
()

	)

298 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

299 
	#¢mp_öc_icmpout§cquíchs
()

	)

300 
	#¢mp_öc_icmpouåedúe˘s
()

	)

301 
	#¢mp_öc_icmpouãchos
()

	)

302 
	#¢mp_öc_icmpouãch‹ïs
()

	)

303 
	#¢mp_öc_icmpouâime°amps
()

	)

304 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

305 
	#¢mp_öc_icmpouèddrmasks
()

	)

306 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

308 
	#¢mp_öc_t˝a˘ive›ís
()

	)

309 
	#¢mp_öc_t˝∑ssive›ís
()

	)

310 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

311 
	#¢mp_öc_t˝e°abª£ts
()

	)

312 
	#¢mp_öc_t˝ö£gs
()

	)

313 
	#¢mp_öc_t˝out£gs
()

	)

314 
	#¢mp_öc_t˝ªå™s£gs
()

	)

315 
	#¢mp_öc_t˝öîrs
()

	)

316 
	#¢mp_öc_t˝ouå°s
()

	)

319 
	#¢mp_öc_udpöd©agøms
()

	)

320 
	#¢mp_öc_ud≤›‹ts
()

	)

321 
	#¢mp_öc_udpöîr‹s
()

	)

322 
	#¢mp_öc_udpoutd©agøms
()

	)

323 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

324 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_öc_¢mpöpkts
()

	)

328 
	#¢mp_öc_¢mpouçkts
()

	)

329 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

330 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

331 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

332 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

333 
	#¢mp_öc_¢mpötoobigs
()

	)

334 
	#¢mp_öc_¢mpönosuch«mes
()

	)

335 
	#¢mp_öc_¢mpöbadvÆues
()

	)

336 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

337 
	#¢mp_öc_¢mpögíîrs
()

	)

338 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

339 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

340 
	#¢mp_öc_¢mpögëªque°s
()

	)

341 
	#¢mp_öc_¢mpögë√xts
()

	)

342 
	#¢mp_öc_¢mpö£åeque°s
()

	)

343 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

344 
	#¢mp_öc_¢mpöå≠s
()

	)

345 
	#¢mp_öc_¢mpouâoobigs
()

	)

346 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

347 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

348 
	#¢mp_öc_¢mpoutgíîrs
()

	)

349 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

350 
	#¢mp_öc_¢mpoutgë√xts
()

	)

351 
	#¢mp_öc_¢mpout£åeque°s
()

	)

352 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

353 
	#¢mp_öc_¢mpouâøps
()

	)

354 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

355 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

356 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

360 #ifde‡
__˝lu•lus


	@include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (!0x80 | !0x40)

	)

50 
	#SNMP_ASN1_APPLIC
 (!0x80 | 0x40)

	)

51 
	#SNMP_ASN1_CONTXT
 ( 0x80 | !0x40)

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20)

	)

54 
	#SNMP_ASN1_PRIMIT
 (!0x20)

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
);

95 #ifde‡
__˝lu•lus


	@include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

42 #i‡
LWIP_SNMP


44 #i‡
SNMP_PRIVATE_MIB


45 
	~"¥iv©e_mib.h
"

48 #ifde‡
__˝lu•lus


54 #i‚de‡
SNMP_IN_PORT


55 
	#SNMP_IN_PORT
 161

	)

59 #i‚de‡
SNMP_TRAP_PORT


60 
	#SNMP_TRAP_PORT
 162

	)

63 
	#SNMP_ES_NOERROR
 0

	)

64 
	#SNMP_ES_TOOBIG
 1

	)

65 
	#SNMP_ES_NOSUCHNAME
 2

	)

66 
	#SNMP_ES_BADVALUE
 3

	)

67 
	#SNMP_ES_READONLY
 4

	)

68 
	#SNMP_ES_GENERROR
 5

	)

70 
	#SNMP_GENTRAP_COLDSTART
 0

	)

71 
	#SNMP_GENTRAP_WARMSTART
 1

	)

72 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

73 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

75 
	s¢mp_v¨böd


78 
¢mp_v¨böd
 *
√xt
;

80 
¢mp_v¨böd
 *
¥ev
;

83 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

88 
u8_t
 
vÆue_ty≥
;

90 
u8_t
 
vÆue_Àn
;

92 *
vÆue
;

95 
u8_t
 
£qÀ∆í
;

97 
u8_t
 
ﬁíÀn
;

99 
u8_t
 
vÀ∆í
;

101 
u16_t
 
£qÀn
;

103 
u16_t
 
ﬁí
;

105 
u16_t
 
vÀn
;

108 
	s¢mp_v¨böd_roŸ


110 
¢mp_v¨böd
 *
hód
;

111 
¢mp_v¨böd
 *
èû
;

113 
u8_t
 
cou¡
;

115 
u8_t
 
£qÀ∆í
;

117 
u16_t
 
£qÀn
;

121 
	s¢mp_ª•_hódî_Àngths


124 
u8_t
 
îridxÀ∆í
;

126 
u8_t
 
îr°©À∆í
;

128 
u8_t
 
ridÀ∆í
;

130 
u8_t
 
pduÀ∆í
;

132 
u8_t
 
comÀ∆í
;

134 
u8_t
 
vîÀ∆í
;

136 
u8_t
 
£qÀ∆í
;

139 
u16_t
 
îridxÀn
;

141 
u16_t
 
îr°©Àn
;

143 
u16_t
 
ridÀn
;

145 
u16_t
 
pduÀn
;

147 
u16_t
 
comÀn
;

149 
u16_t
 
vîÀn
;

151 
u16_t
 
£qÀn
;

155 
	s¢mp_å≠_hódî_Àngths


158 
u8_t
 
t¶íÀn
;

160 
u8_t
 
°ΩÀ∆í
;

162 
u8_t
 
gå∂íÀn
;

164 
u8_t
 
ØddæíÀn
;

166 
u8_t
 
eidÀ∆í
;

168 
u8_t
 
pduÀ∆í
;

170 
u8_t
 
comÀ∆í
;

172 
u8_t
 
vîÀ∆í
;

174 
u8_t
 
£qÀ∆í
;

177 
u16_t
 
t¶í
;

179 
u16_t
 
°ΩÀn
;

181 
u16_t
 
gå∂í
;

183 
u16_t
 
Øddæí
;

185 
u16_t
 
eidÀn
;

187 
u16_t
 
pduÀn
;

189 
u16_t
 
comÀn
;

191 
u16_t
 
vîÀn
;

193 
u16_t
 
£qÀn
;

197 
	#SNMP_MSG_EMPTY
 0

	)

199 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

202 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

203 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

204 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

205 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

206 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

210 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

211 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

212 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

213 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

214 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

216 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

217 
	s¢mp_msg_p°©


220 
udp_pcb
 *
pcb
;

222 
ù_addr
 
sù
;

224 
u16_t
 
•
;

226 
u8_t
 
π
;

228 
s32_t
 
rid
;

230 
s32_t
 
îr‹_°©us
;

232 
s32_t
 
îr‹_ödex
;

234 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

236 
u8_t
 
com_°æí
;

238 
u8_t
 
°©e
;

240 
mib_exã∫Æ_node
 *
ext_mib_node
;

241 
¢mp_«me_±r
 
ext_«me_±r
;

242 
obj_def
 
ext_obje˘_def
;

243 
¢mp_obj_id
 
ext_oid
;

245 
u8_t
 
vb_idx
;

247 
¢mp_v¨böd
 *
vb_±r
;

249 
¢mp_v¨böd_roŸ
 
övb
;

251 
¢mp_v¨böd_roŸ
 
outvb
;

253 
¢mp_ª•_hódî_Àngths
 
rhl
;

256 
	s¢mp_msg_å≠


259 
udp_pcb
 *
pcb
;

261 
ù_addr
 
dù
;

264 
¢mp_obj_id
 *
íãΩri£
;

266 
u8_t
 
sù_øw
[4];

268 
u32_t
 
gí_å≠
;

270 
u32_t
 
•c_å≠
;

272 
u32_t
 
ts
;

274 
¢mp_v¨böd_roŸ
 
outvb
;

276 
¢mp_å≠_hódî_Àngths
 
thl
;

280 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

282 c⁄° 
¢mp_publiccommunôy
[7];

284 
¢mp_msg_å≠
 
å≠_msg
;

287 
¢mp_öô
();

288 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

289 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
);

292 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

293 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

294 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

295 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

300 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

301 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

302 
¢mp_cﬁd°¨t_å≠
();

303 
¢mp_authÁû_å≠
();

305 #ifde‡
__˝lu•lus


	@include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


47 
	~"¥iv©e_mib.h
"

50 #ifde‡
__˝lu•lus


55 
	#MIB_OBJECT_NONE
 0

	)

56 
	#MIB_OBJECT_SCALAR
 1

	)

57 
	#MIB_OBJECT_TAB
 2

	)

60 
	#MIB_OBJECT_READ_ONLY
 0

	)

61 
	#MIB_OBJECT_READ_WRITE
 1

	)

62 
	#MIB_OBJECT_WRITE_ONLY
 2

	)

63 
	#MIB_OBJECT_NOT_ACCESSIBLE
 3

	)

66 
	sobj_def


69 
u8_t
 
ö°™˚
;

71 
u8_t
 
ac˚ss
;

73 
u8_t
 
a¢_ty≥
;

75 
u16_t
 
v_Àn
;

77 
u8_t
 
id_ö°_Àn
;

79 
s32_t
 *
id_ö°_±r
;

82 
	s¢mp_«me_±r


84 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

89 
	#MIB_NODE_SC
 0x01

	)

91 
	#MIB_NODE_AR
 0x02

	)

93 
	#MIB_NODE_RA
 0x03

	)

95 
	#MIB_NODE_LR
 0x04

	)

97 
	#MIB_NODE_EX
 0x05

	)

100 
	smib_node


103 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

106 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

108 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 c⁄° 
u8_t
 
node_ty≥
;

114 c⁄° 
u16_t
 
maxÀngth
;

118 
mib_node
 
	tmib_sˇœr_node
;

122 
	smib_¨øy_node


125 (* c⁄° 
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

126 (* c⁄° 
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

127 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

128 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

130 c⁄° 
u8_t
 
node_ty≥
;

131 c⁄° 
u16_t
 
maxÀngth
;

134 c⁄° 
s32_t
 *
objid
;

135 
mib_node
* c⁄° *
≈å
;

140 
	smib_øm_¨øy_node


143 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

144 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

145 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

146 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

148 
u8_t
 
node_ty≥
;

149 
u16_t
 
maxÀngth
;

152 
s32_t
 *
objid
;

153 
mib_node
 **
≈å
;

156 
	smib_li°_node


158 
mib_li°_node
 *
¥ev
;

159 
mib_li°_node
 *
√xt
;

160 
s32_t
 
objid
;

161 
mib_node
 *
≈å
;

166 
	smib_li°_roŸnode


169 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

170 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

171 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

172 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

174 
u8_t
 
node_ty≥
;

175 
u16_t
 
maxÀngth
;

178 
mib_li°_node
 *
hód
;

179 
mib_li°_node
 *
èû
;

181 
u16_t
 
cou¡
;

186 
	smib_exã∫Æ_node


189 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

190 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

191 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

192 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

194 
u8_t
 
node_ty≥
;

195 
u16_t
 
maxÀngth
;

200 * 
addr_öf
;

202 
u8_t
 
åì_Àvñs
;

204 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

207 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

208 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

211 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

212 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

213 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

214 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

216 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

217 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

218 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

219 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

223 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

224 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

225 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

229 c⁄° 
mib_¨øy_node
 
öã∫ë
;

232 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

233 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

234 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

235 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

237 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
);

238 
¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
);

239 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

240 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

242 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

243 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

244 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

245 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

247 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

248 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

249 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

251 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

252 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

253 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

254 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

256 #ifde‡
__˝lu•lus


	@include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

65 #i‚de‡
sockÀn_t


66 
	#sockÀn_t
 
u32_t


	)

70 
	#SOCK_STREAM
 1

	)

71 
	#SOCK_DGRAM
 2

	)

72 
	#SOCK_RAW
 3

	)

77 
	#SO_DEBUG
 0x0001

	)

78 
	#SO_ACCEPTCONN
 0x0002

	)

79 
	#SO_REUSEADDR
 0x0004

	)

80 
	#SO_KEEPALIVE
 0x0008

	)

81 
	#SO_DONTROUTE
 0x0010

	)

82 
	#SO_BROADCAST
 0x0020

	)

83 
	#SO_USELOOPBACK
 0x0040

	)

84 
	#SO_LINGER
 0x0080

	)

85 
	#SO_OOBINLINE
 0x0100

	)

86 
	#SO_REUSEPORT
 0x0200

	)

88 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

93 
	#SO_SNDBUF
 0x1001

	)

94 
	#SO_RCVBUF
 0x1002

	)

95 
	#SO_SNDLOWAT
 0x1003

	)

96 
	#SO_RCVLOWAT
 0x1004

	)

97 
	#SO_SNDTIMEO
 0x1005

	)

98 
	#SO_RCVTIMEO
 0x1006

	)

99 
	#SO_ERROR
 0x1007

	)

100 
	#SO_TYPE
 0x1008

	)

101 
	#SO_CONTIMEO
 0x1009

	)

102 
	#SO_NO_CHECK
 0x100®

	)

108 
	slögî
 {

109 
l_⁄off
;

110 
l_lögî
;

116 
	#SOL_SOCKET
 0xff‡

	)

119 
	#AF_UNSPEC
 0

	)

120 
	#AF_INET
 2

	)

121 
	#PF_INET
 
AF_INET


	)

122 
	#PF_UNSPEC
 
AF_UNSPEC


	)

124 
	#IPPROTO_IP
 0

	)

125 
	#IPPROTO_TCP
 6

	)

126 
	#IPPROTO_UDP
 17

	)

127 
	#IPPROTO_UDPLITE
 136

	)

130 
	#MSG_PEEK
 0x01

	)

131 
	#MSG_WAITALL
 0x02

	)

132 
	#MSG_OOB
 0x04

	)

133 
	#MSG_DONTWAIT
 0x08

	)

134 
	#MSG_MORE
 0x10

	)

140 
	#IP_TOS
 1

	)

141 
	#IP_TTL
 2

	)

143 #i‡
LWIP_TCP


147 
	#TCP_NODELAY
 0x01

	)

148 
	#TCP_KEEPALIVE
 0x02

	)

149 
	#TCP_KEEPIDLE
 0x03

	)

150 
	#TCP_KEEPINTVL
 0x04

	)

151 
	#TCP_KEEPCNT
 0x05

	)

154 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


158 
	#UDPLITE_SEND_CSCOV
 0x01

	)

159 
	#UDPLITE_RECV_CSCOV
 0x02

	)

163 #i‡
LWIP_IGMP


167 
	#IP_ADD_MEMBERSHIP
 3

	)

168 
	#IP_DROP_MEMBERSHIP
 4

	)

169 
	#IP_MULTICAST_TTL
 5

	)

170 
	#IP_MULTICAST_IF
 6

	)

171 
	#IP_MULTICAST_LOOP
 7

	)

173 
	sù_mªq
 {

174 
ö_addr
 
imr_mu…üddr
;

175 
ö_addr
 
imr_öãrÁ˚
;

176 } 
	tù_mªq
;

195 
	#IPTOS_TOS_MASK
 0x1E

	)

196 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

197 
	#IPTOS_LOWDELAY
 0x10

	)

198 
	#IPTOS_THROUGHPUT
 0x08

	)

199 
	#IPTOS_RELIABILITY
 0x04

	)

200 
	#IPTOS_LOWCOST
 0x02

	)

201 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

212 
	#IPTOS_PREC_MASK
 0xe0

	)

213 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

214 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

215 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

216 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

217 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

218 
	#IPTOS_PREC_FLASH
 0x60

	)

219 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

220 
	#IPTOS_PREC_PRIORITY
 0x20

	)

221 
	#IPTOS_PREC_ROUTINE
 0x00

	)

234 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

235 
	#IOCPARM_MASK
 0x7fU

	)

236 
	#IOC_VOID
 0x20000000UL

	)

237 
	#IOC_OUT
 0x40000000UL

	)

238 
	#IOC_IN
 0x80000000UL

	)

239 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

242 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

244 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

246 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

249 #i‚de‡
FIONREAD


250 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

252 #i‚de‡
FIONBIO


253 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

257 #i‚de‡
SIOCSHIWAT


258 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

259 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

260 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

261 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

262 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

266 #i‚de‡
O_NONBLOCK


267 
	#O_NONBLOCK
 04000U

	)

271 #i‚de‡
FD_SET


272 #unde‡
FD_SETSIZE


274 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

275 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

276 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

277 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

278 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

280 
	sfd_£t
 {

281 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

282 } 
	tfd_£t
;

288 #i‚de‡
LWIP_TIMEVAL_PRIVATE


289 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

292 #i‡
LWIP_TIMEVAL_PRIVATE


293 
	stimevÆ
 {

294 
tv_£c
;

295 
tv_u£c
;

299 
lwù_sockë_öô
();

301 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

302 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

303 
lwù_shutdown
(
s
, 
how
);

304 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

305 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

306 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

307 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

308 
lwù_˛o£
(
s
);

309 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

310 
lwù_li°í
(
s
, 
backlog
);

311 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

312 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

313 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

314 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

315 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

316 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

317 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

318 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

319 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

320 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

321 
timevÆ
 *
timeout
);

322 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

324 #i‡
LWIP_COMPAT_SOCKETS


325 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

326 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

327 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

328 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

329 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

330 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

331 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

332 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

333 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

334 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

335 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

336 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

337 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

338 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

339 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

340 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

341 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

343 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


344 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

345 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

346 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

351 #ifde‡
__˝lu•lus


	@include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mÀ√º
;

75 
STAT_COUNTER
 
	mchkîr
;

76 
STAT_COUNTER
 
	mv1_rxed
;

77 
STAT_COUNTER
 
	mjoö_£¡
;

78 
STAT_COUNTER
 
	mÀave_£¡
;

79 
STAT_COUNTER
 
	muniˇ°_quîy
;

80 
STAT_COUNTER
 
	mªp‹t_£¡
;

81 
STAT_COUNTER
 
	mªp‹t_rxed
;

82 
STAT_COUNTER
 
	mgroup_quîy_rxed
;

85 
	s°©s_mem
 {

86 
mem_size_t
 
	mavaû
;

87 
mem_size_t
 
	mu£d
;

88 
mem_size_t
 
	mmax
;

89 
STAT_COUNTER
 
	mîr
;

90 
STAT_COUNTER
 
	mûÀgÆ
;

93 
	s°©s_sy£Àm
 {

94 
STAT_COUNTER
 
	mu£d
;

95 
STAT_COUNTER
 
	mmax
;

96 
STAT_COUNTER
 
	mîr
;

99 
	s°©s_sys
 {

100 
°©s_sy£Àm
 
	m£m
;

101 
°©s_sy£Àm
 
	mmbox
;

104 
	s°©s_
 {

105 #i‡
LINK_STATS


106 
°©s_¥Ÿo
 
	mlök
;

108 #i‡
ETHARP_STATS


109 
°©s_¥Ÿo
 
	mëh¨p
;

111 #i‡
IPFRAG_STATS


112 
°©s_¥Ÿo
 
	mù_‰ag
;

114 #i‡
IP_STATS


115 
°©s_¥Ÿo
 
	mù
;

117 #i‡
ICMP_STATS


118 
°©s_¥Ÿo
 
	micmp
;

120 #i‡
IGMP_STATS


121 
°©s_igmp
 
	migmp
;

123 #i‡
UDP_STATS


124 
°©s_¥Ÿo
 
	mudp
;

126 #i‡
TCP_STATS


127 
°©s_¥Ÿo
 
	mt˝
;

129 #i‡
MEM_STATS


130 
°©s_mem
 
	mmem
;

132 #i‡
MEMP_STATS


133 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

135 #i‡
SYS_STATS


136 
°©s_sys
 
	msys
;

140 
°©s_
 
lwù_°©s
;

142 
	#°©s_öô
(Ë

	)

144 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

145 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

147 
	#°©s_öô
()

	)

148 
	#STATS_INC
(
x
)

	)

149 
	#STATS_DEC
(
x
)

	)

152 #i‡
TCP_STATS


153 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

154 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

156 
	#TCP_STATS_INC
(
x
)

	)

157 
	#TCP_STATS_DISPLAY
()

	)

160 #i‡
UDP_STATS


161 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

162 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

164 
	#UDP_STATS_INC
(
x
)

	)

165 
	#UDP_STATS_DISPLAY
()

	)

168 #i‡
ICMP_STATS


169 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

170 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

172 
	#ICMP_STATS_INC
(
x
)

	)

173 
	#ICMP_STATS_DISPLAY
()

	)

176 #i‡
IGMP_STATS


177 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

178 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

180 
	#IGMP_STATS_INC
(
x
)

	)

181 
	#IGMP_STATS_DISPLAY
()

	)

184 #i‡
IP_STATS


185 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

186 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

188 
	#IP_STATS_INC
(
x
)

	)

189 
	#IP_STATS_DISPLAY
()

	)

192 #i‡
IPFRAG_STATS


193 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

194 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

196 
	#IPFRAG_STATS_INC
(
x
)

	)

197 
	#IPFRAG_STATS_DISPLAY
()

	)

200 #i‡
ETHARP_STATS


201 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

202 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

204 
	#ETHARP_STATS_INC
(
x
)

	)

205 
	#ETHARP_STATS_DISPLAY
()

	)

208 #i‡
LINK_STATS


209 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

210 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

212 
	#LINK_STATS_INC
(
x
)

	)

213 
	#LINK_STATS_DISPLAY
()

	)

216 #i‡
MEM_STATS


217 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

218 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

219 
	#MEM_STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.
mem
.
u£d
 += y; \

220 i‡(
lwù_°©s
.
mem
.
max
 <Üwù_°©s.mem.
u£d
) { \

221 
lwù_°©s
.
mem
.
max
 =Üwù_°©s.mem.
u£d
; \

223 } 0)

	)

224 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

225 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

227 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

228 
	#MEM_STATS_INC
(
x
)

	)

229 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

230 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

231 
	#MEM_STATS_DISPLAY
()

	)

234 #i‡
MEMP_STATS


235 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

236 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

237 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

238 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ëdÿ{ ++
lwù_°©s
.
memp
[i].
u£d
; \

239 i‡(
lwù_°©s
.
memp
[
i
].
max
 <Üwù_°©s.memp[i].
u£d
) { \

240 
lwù_°©s
.
memp
[
i
].
max
 =Üwù_°©s.memp[i].
u£d
; \

242 } 0)

	)

243 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

245 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

246 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

247 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

248 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

249 
	#MEMP_STATS_DISPLAY
(
i
)

	)

252 #i‡
SYS_STATS


253 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

254 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

255 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

257 
	#SYS_STATS_INC
(
x
)

	)

258 
	#SYS_STATS_DEC
(
x
)

	)

259 
	#SYS_STATS_DISPLAY
()

	)

263 #i‡
LWIP_STATS_DISPLAY


264 
°©s_di•œy
();

265 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

266 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

267 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

268 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

269 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

271 
	#°©s_di•œy
()

	)

272 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

273 
	#°©s_di•œy_igmp
(
igmp
)

	)

274 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

275 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

276 
	#°©s_di•œy_sys
(
sys
)

	)

279 #ifde‡
__˝lu•lus


	@include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_mbox_t
;

47 
	ssys_timeo
 {
u8_t
 
	mdummy
;};

49 
	#sys_öô
()

	)

50 
	#sys_timeout
(
m
,
h
,
a
)

	)

51 
	#sys_u¡imeout
(
m
,
a
)

	)

52 
	#sys_£m_√w
(
c
Ë
	)
c

53 
	#sys_£m_sig«l
(
s
)

	)

54 
	#sys_£m_waô
(
s
)

	)

55 
	#sys_£m_waô_timeout
(
s
,
t
)

	)

56 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

57 
	#sys_£m_‰ì
(
s
)

	)

58 
	#sys_mbox_√w
(
s
Ë0

	)

59 
	#sys_mbox_„tch
(
m
,
d
)

	)

60 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

61 
	#sys_mbox_po°
(
m
,
d
)

	)

62 
	#sys_mbox_åypo°
(
m
,
d
)

	)

63 
	#sys_mbox_‰ì
(
m
)

	)

65 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

70 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

75 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

77 
	~"lwù/îr.h
"

78 
	~"¨ch/sys_¨ch.h
"

80 (* 
	tsys_timeout_h™dÀr
)(*
	t¨g
);

82 
	ssys_timeo
 {

83 
sys_timeo
 *
√xt
;

84 
u32_t
 
time
;

85 
sys_timeout_h™dÀr
 
h
;

86 *
¨g
;

89 
	ssys_timeouts
 {

90 
sys_timeo
 *
√xt
;

94 
	`sys_öô
();

105 
	`sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

106 
	`sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

107 
sys_timeouts
 *
	`sys_¨ch_timeouts
();

110 
sys_£m_t
 
	`sys_£m_√w
(
u8_t
 
cou¡
);

111 
	`sys_£m_sig«l
(
sys_£m_t
 
£m
);

112 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, u32_à
timeout
);

113 
	`sys_£m_‰ì
(
sys_£m_t
 
£m
);

114 
	`sys_£m_waô
(
sys_£m_t
 
£m
);

115 
	`sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
);

118 #i‚de‡
sys_m¶ìp


119 
	`sys_m¶ìp
(
u32_t
 
ms
);

121 #i‚de‡
sys_jiffõs


122 
u32_t
 
	`sys_jiffõs
();

126 
sys_mbox_t
 
	`sys_mbox_√w
(
size
);

127 
	`sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
);

128 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
);

129 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, u32_à
timeout
);

130 #i‚de‡
sys_¨ch_mbox_åy„tch


131 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
);

134 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

135 
	`sys_mbox_‰ì
(
sys_mbox_t
 
mbox
);

136 
	`sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
);

139 
sys_thªad_t
 
	`sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *¨g, 
°acksize
, 
¥io
);

144 
u32_t
 
	`sys_now
();

151 #i‚de‡
SYS_ARCH_PROTECT


157 #i‡
SYS_LIGHTWEIGHT_PROT


164 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

174 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

183 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

184 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

185 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

189 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

190 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

191 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

202 #i‚de‡
SYS_ARCH_INC


203 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

204 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

205 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

206 
v¨
 +
vÆ
; \

207 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

208 } 0)

	)

211 #i‚de‡
SYS_ARCH_DEC


212 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

213 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

214 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

215 
v¨
 -
vÆ
; \

216 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

217 } 0)

	)

220 #i‚de‡
SYS_ARCH_GET


221 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

222 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

223 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

224 
ªt
 = 
v¨
; \

225 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

226 } 0)

	)

229 #i‚de‡
SYS_ARCH_SET


230 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

231 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

232 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

233 
v¨
 = 
vÆ
; \

234 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

235 } 0)

	)

239 #ifde‡
__˝lu•lus


240 
	}
}

	@include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


50 
t˝_pcb
;

55 
	#t˝_öô
(Ë

	)

56 
t˝_tmr
 ();

60 
t˝_pcb
 * 
t˝_√w
 ();

61 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

63 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

64 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
,

65 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,

66 
îr_t
 
îr
));

67 
t˝_ªcv
 (
t˝_pcb
 *
pcb
,

68 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
,

69 
pbuf
 *
p
, 
îr_t
 
îr
));

70 
t˝_£¡
 (
t˝_pcb
 *
pcb
,

71 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
,

72 
u16_t
 
Àn
));

73 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
,

74 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
),

75 
u8_t
 
öãrvÆ
);

76 
t˝_îr
 (
t˝_pcb
 *
pcb
,

77 (* 
îr
)(*
¨g
, 
îr_t
Érr));

79 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

80 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

82 #i‡
TCP_LISTEN_BACKLOG


83 
	#t˝_ac˚±ed
(
pcb
Ë(((
t˝_pcb_li°í
 *)’cb))->
ac˚±s_≥ndög
--)

	)

85 
	#t˝_ac˚±ed
(
pcb
)

	)

88 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

89 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

90 
u16_t
 
p‹t
);

91 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

92 
u16_t
 
p‹t
, 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
,

93 
t˝_pcb
 *
çcb
,

94 
îr_t
 
îr
));

96 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

97 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

99 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

100 
	#t˝_ab‹t
(
pcb
Ë
	`t˝_ab™d⁄
(’cb), 1)

	)

101 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

104 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

105 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

107 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

108 
u8_t
 
≠iÊags
);

110 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

112 
	#TCP_PRIO_MIN
 1

	)

113 
	#TCP_PRIO_NORMAL
 64

	)

114 
	#TCP_PRIO_MAX
 127

	)

118 
t˝_¶owtmr
 ();

119 
t˝_Á°tmr
 ();

123 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

125 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

126 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

127 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

128 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

138 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

139 ((
çcb
)->
Êags
 & 
TF_NODELAY
) || \

140 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

141 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) \

142 Ë? 1 : 0)

	)

143 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

146 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

147 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

148 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

149 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

152 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

154 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

155 
	#TCP_FIN
 0x01U

	)

156 
	#TCP_SYN
 0x02U

	)

157 
	#TCP_RST
 0x04U

	)

158 
	#TCP_PSH
 0x08U

	)

159 
	#TCP_ACK
 0x10U

	)

160 
	#TCP_URG
 0x20U

	)

161 
	#TCP_ECE
 0x40U

	)

162 
	#TCP_CWR
 0x80U

	)

164 
	#TCP_FLAGS
 0x3fU

	)

167 
	#TCP_HLEN
 20

	)

169 #i‚de‡
TCP_TMR_INTERVAL


170 
	#TCP_TMR_INTERVAL
 250

	)

173 #i‚de‡
TCP_FAST_INTERVAL


174 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

177 #i‚de‡
TCP_SLOW_INTERVAL


178 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

181 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

182 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

184 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

186 #i‚de‡
TCP_MSL


187 
	#TCP_MSL
 60000UL

	)

191 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


192 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

195 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


196 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

199 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


200 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

203 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

208 #ifde‡
PACK_STRUCT_USE_INCLUDES


209 
	~"¨ch/bp°ru˘.h
"

211 
PACK_STRUCT_BEGIN


212 
	st˝_hdr
 {

213 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

214 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

215 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

216 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

217 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

218 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

219 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

220 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

221 } 
PACK_STRUCT_STRUCT
;

222 
PACK_STRUCT_END


223 #ifde‡
PACK_STRUCT_USE_INCLUDES


224 
	~"¨ch/ï°ru˘.h
"

227 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

228 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

229 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

231 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

232 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

233 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË& ~
TCP_FLAGS
Ë| (Êags))

	)

234 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (Êags))

	)

235 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

237 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& 
TCP_FIN
 || \

238 
	`TCPH_FLAGS
((
£g
)->
t˝hdr
Ë& 
TCP_SYN
)? 1: 0))

	)

240 
	et˝_°©e
 {

241 
CLOSED
 = 0,

242 
LISTEN
 = 1,

243 
SYN_SENT
 = 2,

244 
SYN_RCVD
 = 3,

245 
ESTABLISHED
 = 4,

246 
FIN_WAIT_1
 = 5,

247 
FIN_WAIT_2
 = 6,

248 
CLOSE_WAIT
 = 7,

249 
CLOSING
 = 8,

250 
LAST_ACK
 = 9,

251 
TIME_WAIT
 = 10

256 
	#TF_RESET
 (
u8_t
)0x08U

	)

257 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

258 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

261 #i‡
LWIP_CALLBACK_API


269 
	#DEF_ACCEPT_CALLBACK
 
	`îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

	)

271 
	#DEF_ACCEPT_CALLBACK


	)

277 
	#TCP_PCB_COMMON
(
ty≥
) \

278 
ty≥
 *
√xt
; \

279 
t˝_°©e
 
°©e
; \

280 
u8_t
 
¥io
; \

281 *
ˇŒback_¨g
; \

283 
u16_t
 
loˇl_p‹t
; \

285 
DEF_ACCEPT_CALLBACK


	)

289 
	st˝_pcb
 {

291 
IP_PCB
;

293 
TCP_PCB_COMMON
(
t˝_pcb
);

296 
u16_t
 
ªmŸe_p‹t
;

298 
u8_t
 
Êags
;

299 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

300 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

301 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

302 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

303 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

304 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

305 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

310 
u32_t
 
rcv_nxt
;

311 
u16_t
 
rcv_wnd
;

312 
u16_t
 
rcv_™n_wnd
;

313 
u32_t
 
rcv_™n_right_edge
;

316 
u32_t
 
tmr
;

317 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

320 
s16_t
 
πime
;

322 
u16_t
 
mss
;

325 
u32_t
 
πã°
;

326 
u32_t
 
π£q
;

327 
s16_t
 
ß
, 
sv
;

329 
s16_t
 
πo
;

330 
u8_t
 
ƒtx
;

333 
u32_t
 
œ°ack
;

334 
u8_t
 
du∑cks
;

337 
u16_t
 
cwnd
;

338 
u16_t
 
s°hªsh
;

341 
u32_t
 
¢d_nxt
;

342 
u16_t
 
¢d_wnd
;

343 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

345 
u32_t
 
¢d_lbb
;

347 
u16_t
 
acked
;

349 
u16_t
 
¢d_buf
;

350 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffff-3)

	)

351 
u16_t
 
¢d_queuñí
;

355 
t˝_£g
 *
un£¡
;

356 
t˝_£g
 *
u«cked
;

357 #i‡
TCP_QUEUE_OOSEQ


358 
t˝_£g
 *
oo£q
;

361 
pbuf
 *
ªfu£d_d©a
;

363 #i‡
LWIP_CALLBACK_API


370 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
•a˚
);

379 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

387 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
pcb
,Éº_à
îr
);

396 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
pcb
);

406 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

409 #i‡
LWIP_TCP_TIMESTAMPS


410 
u32_t
 
ts_œ°ack£¡
;

411 
u32_t
 
ts_ª˚¡
;

415 
u32_t
 
kìp_idÀ
;

416 #i‡
LWIP_TCP_KEEPALIVE


417 
u32_t
 
kìp_ötvl
;

418 
u32_t
 
kìp_˙t
;

422 
u32_t
 
≥rsi°_˙t
;

424 
u8_t
 
≥rsi°_backoff
;

427 
u8_t
 
kìp_˙t_£¡
;

430 
	st˝_pcb_li°í
 {

432 
IP_PCB
;

434 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

436 #i‡
TCP_LISTEN_BACKLOG


437 
u8_t
 
backlog
;

438 
u8_t
 
ac˚±s_≥ndög
;

442 #i‡
LWIP_EVENT_API


444 
	elwù_evít
 {

445 
LWIP_EVENT_ACCEPT
,

446 
LWIP_EVENT_SENT
,

447 
LWIP_EVENT_RECV
,

448 
LWIP_EVENT_CONNECTED
,

449 
LWIP_EVENT_POLL
,

450 
LWIP_EVENT_ERR


453 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

454 
lwù_evít
,

455 
pbuf
 *
p
,

456 
u16_t
 
size
,

457 
îr_t
 
îr
);

459 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

460 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

461 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

462 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

463 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

464 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

465 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

466 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

467 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

468 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

469 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

470 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

473 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

475 if((
pcb
)->
ac˚±
 !
NULL
) \

476 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

477 (
ªt
Ë
ERR_OK
; \

478 } 0)

	)

480 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

482 if((
pcb
)->
£¡
 !
NULL
) \

483 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

484 (
ªt
Ë
ERR_OK
; \

485 } 0)

	)

487 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

489 if((
pcb
)->
ªcv
 !
NULL
) { \

490 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
)); \

492 (
ªt
Ë
ERR_OK
; \

493 i‡(
p
 !
NULL
) \

494 
	`pbuf_‰ì
(
p
); \

496 } 0)

	)

498 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

500 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

501 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

502 (
ªt
Ë
ERR_OK
; \

503 } 0)

	)

505 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

507 if((
pcb
)->
pﬁl
 !
NULL
) \

508 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

509 (
ªt
Ë
ERR_OK
; \

510 } 0)

	)

512 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

514 if((
îrf
Ë!
NULL
) \

515 (
îrf
)((
¨g
),(
îr
)); \

516 } 0)

	)

521 
	st˝_£g
 {

522 
t˝_£g
 *
√xt
;

523 
pbuf
 *
p
;

524 *
d©≠å
;

525 
u16_t
 
Àn
;

526 
u8_t
 
Êags
;

527 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

528 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

529 
t˝_hdr
 *
t˝hdr
;

532 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

533 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

534 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

537 
	#TCP_BUILD_MSS_OPTION
(
x
Ë(xË
	`ht⁄l
(((
u32_t
)2 << 24) | \

538 ((
u32_t
)4 << 16) | \

539 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

540 (
TCP_MSS
 & 255))

	)

543 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

544 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

545 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

547 
u8_t
 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

548 
u8_t
 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

549 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

551 
	#t˝_ack
(
pcb
) \

553 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

554 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

555 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

556 
	`t˝_ouçut
(
pcb
); \

559 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

561 } 0)

	)

563 
	#t˝_ack_now
(
pcb
) \

565 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

566 
	`t˝_ouçut
(
pcb
); \

567 } 0)

	)

569 
îr_t
 
t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

570 
îr_t
 
t˝_íqueue
(
t˝_pcb
 *
pcb
, *
d©≠å
, 
u16_t
 
Àn
,

571 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
);

573 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

575 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

576 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

577 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

579 
u32_t
 
t˝_√xt_iss
();

581 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

582 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

584 #i‡
TCP_CALCULATE_EFF_SEND_MSS


585 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr
 *
addr
);

588 
t˝_pcb
 *
t˝_öput_pcb
;

589 
u32_t
 
t˝_ticks
;

591 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


592 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

593 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

594 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

595 
t˝_debug_¥öt_pcbs
();

596 
s16_t
 
t˝_pcbs_ß√
();

598 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

599 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

600 
	#t˝_debug_¥öt_°©e
(
s
)

	)

601 
	#t˝_debug_¥öt_pcbs
()

	)

602 
	#t˝_pcbs_ß√
(Ë1

	)

605 #i‡
NO_SYS


606 
	#t˝_timî_√eded
()

	)

608 
t˝_timî_√eded
();

612 
	ut˝_li°í_pcbs_t
 {

613 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

614 
t˝_pcb
 *
	gpcbs
;

616 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

617 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

620 
t˝_pcb
 *
t˝_tw_pcbs
;

622 
t˝_pcb
 *
t˝_tmp_pcb
;

634 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

635 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", 
≈cb
,Çpcb->
loˇl_p‹t
)); \

636 
t˝_tmp_pcb
 = *
pcbs
; \

637 
t˝_tmp_pcb
 !
NULL
; \

638 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

639 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !
≈cb
); \

641 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", 
≈cb
->
°©e
 !
CLOSED
); \

642 
≈cb
->
√xt
 = *
pcbs
; \

643 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", 
≈cb
->
√xt
 !=Çpcb); \

644 *(
pcbs
Ë
≈cb
; \

645 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

646 
	`t˝_timî_√eded
(); \

647 } 0)

	)

648 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

649 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *
pcbs
 !
NULL
); \

650 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

651 if(*
pcbs
 =
≈cb
) { \

652 *
pcbs
 = (*pcbs)->
√xt
; \

653 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

654 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

655 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

659 
≈cb
->
√xt
 = 
NULL
; \

660 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

661 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

662 } 0)

	)

666 
	#TCP_REG
(
pcbs
, 
≈cb
) \

668 
≈cb
->
√xt
 = *
pcbs
; \

669 *(
pcbs
Ë
≈cb
; \

670 
	`t˝_timî_√eded
(); \

671 } 0)

	)

673 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

675 if(*(
pcbs
Ë=
≈cb
) { \

676 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

679 
t˝_tmp_pcb
 = *
pcbs
; \

680 
t˝_tmp_pcb
 !
NULL
; \

681 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

682 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

683 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

688 
≈cb
->
√xt
 = 
NULL
; \

689 } 0)

	)

693 #ifde‡
__˝lu•lus


	@include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/√tif.h
"

46 #ifde‡
__˝lu•lus


50 #i‡
LWIP_TCPIP_CORE_LOCKING


52 
sys_£m_t
 
lock_t˝ù_c‹e
;

53 
	#LOCK_TCPIP_CORE
(Ë
	`sys_£m_waô
(
lock_t˝ù_c‹e
)

	)

54 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_£m_sig«l
(
lock_t˝ù_c‹e
)

	)

55 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

56 
	#TCPIP_APIMSG_ACK
(
m
)

	)

57 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

58 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

60 
	#LOCK_TCPIP_CORE
()

	)

61 
	#UNLOCK_TCPIP_CORE
()

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
c⁄n
->
›_com∂ëed
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
£m
)

	)

68 
t˝ù_öô
((* 
t˝ù_öô_d⁄e
)(*), *
¨g
);

70 #i‡
LWIP_NETCONN


71 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

72 #i‡
LWIP_TCPIP_CORE_LOCKING


73 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

77 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

79 #i‡
LWIP_NETIF_API


80 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

81 #i‡
LWIP_TCPIP_CORE_LOCKING


82 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

86 
îr_t
 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
);

87 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

90 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

91 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

93 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

94 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

96 
	et˝ù_msg_ty≥
 {

97 #i‡
LWIP_NETCONN


98 
	gTCPIP_MSG_API
,

100 
	gTCPIP_MSG_INPKT
,

101 #i‡
LWIP_NETIF_API


102 
	gTCPIP_MSG_NETIFAPI
,

104 
	gTCPIP_MSG_CALLBACK
,

105 
	gTCPIP_MSG_TIMEOUT
,

106 
	gTCPIP_MSG_UNTIMEOUT


109 
	st˝ù_msg
 {

110 
t˝ù_msg_ty≥
 
	gty≥
;

111 
sys_£m_t
 *
	g£m
;

113 #i‡
LWIP_NETCONN


114 
≠i_msg
 *
	g≠imsg
;

116 #i‡
LWIP_NETIF_API


117 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

120 
pbuf
 *
	gp
;

121 
√tif
 *
	g√tif
;

122 } 
	göp
;

124 (*
	gf
)(*
	g˘x
);

125 *
	g˘x
;

126 } 
	gcb
;

128 
u32_t
 
	gm£cs
;

129 
sys_timeout_h™dÀr
 
	gh
;

130 *
	g¨g
;

131 } 
	gtmo
;

132 } 
	gmsg
;

135 #ifde‡
__˝lu•lus


	@include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

70 
	sudp_pcb
 {

72 
IP_PCB
;

76 
udp_pcb
 *
√xt
;

78 
u8_t
 
Êags
;

80 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

82 #i‡
LWIP_IGMP


84 
ù_addr
 
mu…iˇ°_ù
;

87 #i‡
LWIP_UDPLITE


89 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

103 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

104 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

106 *
ªcv_¨g
;

109 
udp_pcb
 *
udp_pcbs
;

113 
udp_pcb
 * 
udp_√w
 ();

114 
udp_ªmove
 (
udp_pcb
 *
pcb
);

115 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

116 
u16_t
 
p‹t
);

117 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

118 
u16_t
 
p‹t
);

119 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

120 
udp_ªcv
 (
udp_pcb
 *
pcb
,

121 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
,

122 
pbuf
 *
p
,

123 
ù_addr
 *
addr
,

124 
u16_t
 
p‹t
),

125 *
ªcv_¨g
);

126 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif);

127 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

128 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

130 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

131 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

134 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

136 
	#udp_öô
(Ë

	)

138 #i‡
UDP_DEBUG


139 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

141 
	#udp_debug_¥öt
(
udphdr
)

	)

144 #ifde‡
__˝lu•lus


	@include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
ETH_PAD_SIZE


52 
	#ETH_PAD_SIZE
 0

	)

55 #i‚de‡
ETHARP_HWADDR_LEN


56 
	#ETHARP_HWADDR_LEN
 6

	)

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sëh_addr
 {

64 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sëh_hdr
 {

76 #i‡
ETH_PAD_SIZE


77 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

79 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

80 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

82 } 
PACK_STRUCT_STRUCT
;

83 
PACK_STRUCT_END


84 #ifde‡
PACK_STRUCT_USE_INCLUDES


85 
	~"¨ch/ï°ru˘.h
"

88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/bp°ru˘.h
"

91 
PACK_STRUCT_BEGIN


93 
	sëh¨p_hdr
 {

94 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëhhdr
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

96 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

97 
PACK_STRUCT_FIELD
(
u16_t
 
_hwÀn_¥Ÿﬁí
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

99 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

100 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

101 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

102 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

103 } 
PACK_STRUCT_STRUCT
;

104 
PACK_STRUCT_END


105 #ifde‡
PACK_STRUCT_USE_INCLUDES


106 
	~"¨ch/ï°ru˘.h
"

109 #ifde‡
PACK_STRUCT_USE_INCLUDES


110 
	~"¨ch/bp°ru˘.h
"

112 
PACK_STRUCT_BEGIN


113 
	sëhù_hdr
 {

114 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëh
);

115 
PACK_STRUCT_FIELD
(
ù_hdr
 
ù
);

116 } 
PACK_STRUCT_STRUCT
;

117 
PACK_STRUCT_END


118 #ifde‡
PACK_STRUCT_USE_INCLUDES


119 
	~"¨ch/ï°ru˘.h
"

123 
	#ARP_TMR_INTERVAL
 5000

	)

125 
	#ETHTYPE_ARP
 0x0806

	)

126 
	#ETHTYPE_IP
 0x0800

	)

127 
	#ETHTYPE_PPPOEDISC
 0x8863

	)

128 
	#ETHTYPE_PPPOE
 0x8864

	)

131 
	#ARP_REQUEST
 1

	)

132 
	#ARP_REPLY
 2

	)

134 #i‡
ARP_QUEUEING


138 
	sëh¨p_q_íåy
 {

139 
ëh¨p_q_íåy
 *
√xt
;

140 
pbuf
 *
p
;

144 
	#ëh¨p_öô
(Ë

	)

145 
ëh¨p_tmr
();

146 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

147 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
);

148 
ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

149 
ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
,

150 
pbuf
 *
p
);

151 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
);

152 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
);

153 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

158 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), &“ëif)->
ù_addr
)

	)

160 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

162 #i‡
LWIP_AUTOIP


163 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

164 c⁄° 
ëh_addr
 *
ëhd°_addr
,

165 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

166 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

167 c⁄° 
u16_t
 
›code
);

170 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

172 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

174 #ifde‡
__˝lu•lus


	@include/netif/loopif.h

32 #i‚de‡
__NETIF_LOOPIF_H__


33 
	#__NETIF_LOOPIF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


44 
	#lo›if_pﬁl
 
√tif_pﬁl


	)

47 
îr_t
 
lo›if_öô
(
√tif
 *netif);

49 #ifde‡
__˝lu•lus


	@include/netif/ppp_oe.h

70 #i‚de‡
PPP_OE_H


71 
	#PPP_OE_H


	)

73 
	~"lwù/›t.h
"

75 #i‡
PPPOE_SUPPORT
 > 0

77 #ifde‡
PACK_STRUCT_USE_INCLUDES


78 
	~"¨ch/bp°ru˘.h
"

80 
PACK_STRUCT_BEGIN


81 
	sµp€hdr
 {

82 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

86 } 
	gPACK_STRUCT_STRUCT
;

87 
	gPACK_STRUCT_END


88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/ï°ru˘.h
"

92 #ifde‡
PACK_STRUCT_USE_INCLUDES


93 
	~"¨ch/bp°ru˘.h
"

95 
PACK_STRUCT_BEGIN


96 
	sµp€èg
 {

97 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

99 } 
	gPACK_STRUCT_STRUCT
;

100 
	gPACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

106 
	#PPPOE_STATE_INITIAL
 0

	)

107 
	#PPPOE_STATE_PADI_SENT
 1

	)

108 
	#PPPOE_STATE_PADR_SENT
 2

	)

109 
	#PPPOE_STATE_SESSION
 3

	)

110 
	#PPPOE_STATE_CLOSING
 4

	)

112 
	#PPPOE_STATE_PADO_SENT
 1

	)

114 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

115 
	#PPPOE_VERTYPE
 0x11

	)

117 
	#PPPOE_TAG_EOL
 0x0000

	)

118 
	#PPPOE_TAG_SNAME
 0x0101

	)

119 
	#PPPOE_TAG_ACNAME
 0x0102

	)

120 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

121 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

122 
	#PPPOE_TAG_VENDOR
 0x0105

	)

123 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

124 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

125 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

126 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

128 
	#PPPOE_CODE_PADI
 0x09

	)

129 
	#PPPOE_CODE_PADO
 0x07

	)

130 
	#PPPOE_CODE_PADR
 0x19

	)

131 
	#PPPOE_CODE_PADS
 0x65

	)

132 
	#PPPOE_CODE_PADT
 0xA7

	)

134 #i‚de‡
ETHERMTU


135 
	#ETHERMTU
 1500

	)

139 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

141 
	gµp€_so·c
;

144 
µp€_öô
();

146 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

147 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

149 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

150 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

152 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

153 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

155 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

157 
µp€_hdæí
;

	@include/netif/slipif.h

34 #i‚de‡
__NETIF_SLIPIF_H__


35 
	#__NETIF_SLIPIF_H__


	)

37 
	~"lwù/√tif.h
"

39 #ifde‡
__˝lu•lus


43 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

45 #ifde‡
__˝lu•lus


	@netif/etharp.c

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_ARP


50 
	~"lwù/öë.h
"

51 
	~"lwù/ù.h
"

52 
	~"lwù/°©s.h
"

53 
	~"lwù/¢mp.h
"

54 
	~"lwù/dh˝.h
"

55 
	~"lwù/autoù.h
"

56 
	~"√tif/ëh¨p.h
"

58 #i‡
PPPOE_SUPPORT


59 
	~"√tif/µp_€.h
"

62 
	~<°rög.h
>

68 
	#ARP_MAXAGE
 240

	)

76 
	#ARP_MAXPENDING
 2

	)

78 
	#HWTYPE_ETHERNET
 1

	)

80 
	#ARPH_HWLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë>> 8)

	)

81 
	#ARPH_PROTOLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë& 0xff)

	)

83 
	#ARPH_HWLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(
	`ARPH_PROTOLEN
(hdrË| (÷íË<< 8))

	)

84 
	#ARPH_PROTOLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(÷íË| (
	`ARPH_HWLEN
(hdrË<< 8))

	)

86 
	eëh¨p_°©e
 {

87 
	mETHARP_STATE_EMPTY
 = 0,

88 
	mETHARP_STATE_PENDING
,

89 
	mETHARP_STATE_STABLE


92 
	sëh¨p_íåy
 {

93 #i‡
ARP_QUEUEING


97 
ëh¨p_q_íåy
 *
	mq
;

99 
ù_addr
 
	mùaddr
;

100 
ëh_addr
 
	mëhaddr
;

101 
ëh¨p_°©e
 
	m°©e
;

102 
u8_t
 
	m˘ime
;

103 
√tif
 *
	m√tif
;

106 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

107 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

108 
ëh¨p_íåy
 
	g¨p_èbÀ
[
ARP_TABLE_SIZE
];

109 #i‡!
LWIP_NETIF_HWADDRHINT


110 
u8_t
 
	gëh¨p_ˇched_íåy
;

116 
	#ETHARP_TRY_HARD
 1

	)

117 
	#ETHARP_FIND_ONLY
 2

	)

119 #i‡
LWIP_NETIF_HWADDRHINT


120 
	#NETIF_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

121 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

122 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif);

124 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
);

127 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

131 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

136 #i‡
ARP_QUEUEING


143 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

145 
ëh¨p_q_íåy
 *
r
;

146 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

147 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

148 
q
) {

149 
r
 = 
q
;

150 
q
 = q->
√xt
;

151 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

152 
	`pbuf_‰ì
(
r
->
p
);

153 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
);

155 
	}
}

165 
	$ëh¨p_tmr
()

167 
u8_t
 
i
;

169 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

171 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

172 
¨p_èbÀ
[
i
].
˘ime
++;

173 i‡(((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) &&

174 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
)) ||

175 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

176 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

178 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

179 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

182 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

183 #i‡
ARP_QUEUEING


185 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

187 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

188 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

189 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

193 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

195 #i‡
ARP_QUEUEING


197 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

202 
	}
}

226 
	gs8_t


227 #i‡
LWIP_NETIF_HWADDRHINT


228 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif)

230 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
)

233 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

234 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

235 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

236 #i‡
ARP_QUEUEING


238 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

240 
u8_t
 
age_queue
 = 0;

245 i‡(
ùaddr
) {

247 #i‡
LWIP_NETIF_HWADDRHINT


248 i‡((
√tif
 !
NULL
Ë&& (√tif->
addr_höt
 != NULL)) {

250 
u8_t
 
≥r_pcb_ˇche
 = *(
√tif
->
addr_höt
);

251 i‡((
≥r_pcb_ˇche
 < 
ARP_TABLE_SIZE
Ë&& 
¨p_èbÀ
[≥r_pcb_ˇche].
°©e
 =
ETHARP_STATE_STABLE
) {

253 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
≥r_pcb_ˇche
].ipaddr)) {

255 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

256  
≥r_pcb_ˇche
;

261 i‡(
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) {

263 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr)) {

265 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

266  
ëh¨p_ˇched_íåy
;

287 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

289 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
)) {

290 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

292 
em±y
 = 
i
;

295 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

297 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

298 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÖídögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

300 #i‡
LWIP_NETIF_HWADDRHINT


301 
	`NETIF_SET_HINT
(
√tif
, 
i
);

303 
ëh¨p_ˇched_íåy
 = 
i
;

305  
i
;

306 #i‡
ARP_QUEUEING


308 } i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

309 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

310 
ﬁd_queue
 = 
i
;

311 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

316 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

317 
ﬁd_≥ndög
 = 
i
;

318 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

323 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

325 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

326 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chög sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

328 #i‡
LWIP_NETIF_HWADDRHINT


329 
	`NETIF_SET_HINT
(
√tif
, 
i
);

331 
ëh¨p_ˇched_íåy
 = 
i
;

333  
i
;

335 } i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

336 
ﬁd_°abÀ
 = 
i
;

337 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

344 i‡(((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_TRY_HARD
) == 0))

346 || ((
Êags
 & 
ETHARP_FIND_ONLY
) != 0)) {

347 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

348  (
s8_t
)
ERR_MEM
;

361 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

362 
i
 = 
em±y
;

363 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

366 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

368 
i
 = 
ﬁd_°abÀ
;

369 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

370 #i‡
ARP_QUEUEING


372 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

375 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

377 
i
 = 
ﬁd_≥ndög
;

378 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

379 #i‡
ARP_QUEUEING


381 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

383 
i
 = 
ﬁd_queue
;

384 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

385 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

386 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

390  (
s8_t
)
ERR_MEM
;

394 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

396 i‡(
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_EMPTY
)

398 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

401 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

404 i‡(
ùaddr
 !
NULL
) {

406 
	`ù_addr_£t
(&
¨p_èbÀ
[
i
].
ùaddr
, ipaddr);

408 
¨p_èbÀ
[
i
].
˘ime
 = 0;

409 #i‡
LWIP_NETIF_HWADDRHINT


410 
	`NETIF_SET_HINT
(
√tif
, 
i
);

412 
ëh¨p_ˇched_íåy
 = 
i
;

414  (
îr_t
)
i
;

415 
	}
}

427 
îr_t


428 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

430 
ëh_hdr
 *
ëhhdr
 = 
p
->
∑ylﬂd
;

431 
u8_t
 
k
;

433 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

434 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

435 
k
 = 
ETHARP_HWADDR_LEN
;

436 
k
 > 0) {

437 
k
--;

438 
ëhhdr
->
de°
.
addr
[
k
] = 
d°
->addr[k];

439 
ëhhdr
->
§c
.
addr
[
k
] = src->addr[k];

441 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_IP
);

442 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

444  
√tif
->
	`lökouçut
“ëif, 
p
);

445 
	}
}

466 
îr_t


467 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

469 
s8_t
 
i
;

470 
u8_t
 
k
;

471 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("update_arp_entry()\n"));

472 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

473 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

474 
	`ù4_addr1
(
ùaddr
), 
	`ù4_addr2
(ùaddr), 
	`ù4_addr3
(ùaddr), 
	`ù4_addr4
(ipaddr),

475 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

476 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

478 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

479 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

480 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

481 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

482  
ERR_ARG
;

485 #i‡
LWIP_NETIF_HWADDRHINT


486 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
, 
√tif
);

488 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
);

491 i‡(
i
 < 0)

492  (
îr_t
)
i
;

495 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

497 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

500 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

502 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

504 
k
 = 
ETHARP_HWADDR_LEN
;

505 
k
 > 0) {

506 
k
--;

507 
¨p_èbÀ
[
i
].
ëhaddr
.
addr
[
k
] =Éthaddr->addr[k];

510 
¨p_èbÀ
[
i
].
˘ime
 = 0;

511 #i‡
ARP_QUEUEING


513 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

514 
pbuf
 *
p
;

516 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

518 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

520 
p
 = 
q
->p;

522 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
);

524 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

526 
	`pbuf_‰ì
(
p
);

529  
ERR_OK
;

530 
	}
}

543 
s8_t


544 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

545 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
)

547 
s8_t
 
i
;

549 
	`LWIP_UNUSED_ARG
(
√tif
);

551 #i‡
LWIP_NETIF_HWADDRHINT


552 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
, 
NULL
);

554 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
);

556 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

557 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

558 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

559  
i
;

562 
	}
}

580 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

582 
ëhù_hdr
 *
hdr
;

583 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

586 
hdr
 = 
p
->
∑ylﬂd
;

588 i‡(!
	`ù_addr_√tcmp
(&(
hdr
->
ù
.
§c
), &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

593 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

597 
	`upd©e_¨p_íåy
(
√tif
, &(
hdr
->
ù
.
§c
), &(hdr->
ëh
.src), 0);

598 
	}
}

617 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

619 
ëh¨p_hdr
 *
hdr
;

621 
ù_addr
 
sùaddr
, 
dùaddr
;

622 
u8_t
 
i
;

623 
u8_t
 
f‹_us
;

624 #i‡
LWIP_AUTOIP


625 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

628 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

632 i‡(
p
->
Àn
 < (
ëh¨p_hdr
)) {

633 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
, (
s16_t
)(
ëh¨p_hdr
)));

634 
	`ETHARP_STATS_INC
(
ëh¨p
.
À√º
);

635 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

636 
	`pbuf_‰ì
(
p
);

640 
hdr
 = 
p
->
∑ylﬂd
;

643 i‡((
hdr
->
hwty≥
 !
	`ht⁄s
(
HWTYPE_ETHERNET
)) ||

644 (
hdr
->
_hwÀn_¥Ÿﬁí
 !
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
))) ||

645 (
hdr
->
¥Ÿo
 !
	`ht⁄s
(
ETHTYPE_IP
)) ||

646 (
hdr
->
ëhhdr
.
ty≥
 !
	`ht⁄s
(
ETHTYPE_ARP
))) {

647 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1,

648 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",

649 
hdr
->
hwty≥
, 
	`ARPH_HWLEN
(hdr), hdr->
¥Ÿo
, 
	`ARPH_PROTOLEN
(hdr), hdr->
ëhhdr
.
ty≥
));

650 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

651 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

652 
	`pbuf_‰ì
(
p
);

655 
	`ETHARP_STATS_INC
(
ëh¨p
.
ªcv
);

657 #i‡
LWIP_AUTOIP


661 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

666 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

667 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

670 i‡(
√tif
->
ù_addr
.
addr
 == 0) {

671 
f‹_us
 = 0;

674 
f‹_us
 = 
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

678 i‡(
f‹_us
) {

681 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 
ETHARP_TRY_HARD
);

685 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 0);

689 
	`ht⁄s
(
hdr
->
›code
)) {

691 
ARP_REQUEST
:

696 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

698 i‡(
f‹_us
) {

700 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

704 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

706 
hdr
->
dùaddr
 = hdr->
sùaddr
;

707 
	`SMEMCPY
(&
hdr
->
sùaddr
, &
√tif
->
ù_addr
, (hdr->sipaddr));

709 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

710 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

711 
i
 = 
ETHARP_HWADDR_LEN
;

712 #i‡
LWIP_AUTOIP


715 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

718 
i
 > 0) {

719 
i
--;

720 
hdr
->
dhwaddr
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

721 #i‡
LWIP_AUTOIP


722 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = 
ëhd°_hwaddr
[i];

724 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

726 
hdr
->
shwaddr
.
addr
[
i
] = 
ëhaddr
->addr[i];

727 
hdr
->
ëhhdr
.
§c
.
addr
[
i
] = 
ëhaddr
->addr[i];

734 
√tif
->
	`lökouçut
“ëif, 
p
);

736 } i‡(
√tif
->
ù_addr
.
addr
 == 0) {

738 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

742 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

745 
ARP_REPLY
:

747 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

748 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

753 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

757 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

758 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

762 
	`pbuf_‰ì
(
p
);

763 
	}
}

783 
îr_t


784 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
)

786 
ëh_addr
 *
de°
, 
mˇ°addr
;

789 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

791 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_output: couldÇotállocateÑoom for header.\n"));

792 
	`LINK_STATS_INC
(
lök
.
À√º
);

793  
ERR_BUF
;

797 
de°
 = 
NULL
;

802 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

804 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

806 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

808 
mˇ°addr
.
addr
[0] = 0x01;

809 
mˇ°addr
.
addr
[1] = 0x00;

810 
mˇ°addr
.
addr
[2] = 0x5e;

811 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

812 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

813 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

815 
de°
 = &
mˇ°addr
;

819 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

821 i‡(
√tif
->
gw
.
addr
 != 0) {

823 
ùaddr
 = &(
√tif
->
gw
);

827  
ERR_RTE
;

831  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

837  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

838 
	}
}

873 
îr_t


874 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
)

876 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

877 
îr_t
 
ªsu…
 = 
ERR_MEM
;

878 
s8_t
 
i
;

881 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

882 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

883 
	`ù_addr_ißny
(
ùaddr
)) {

884 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

885  
ERR_ARG
;

889 #i‡
LWIP_NETIF_HWADDRHINT


890 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
, 
√tif
);

892 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
);

896 i‡(
i
 < 0) {

897 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

898 i‡(
q
) {

899 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

900 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

902  (
îr_t
)
i
;

906 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

907 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

911 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

912 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

913 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

916 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

918 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

919 i‡(
ªsu…
 !
ERR_OK
) {

928 i‡(
q
 !
NULL
) {

930 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

933 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

935 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

936 #i‡
ARP_QUEUEING


937 
pbuf
 *
p
;

938 
c›y_√eded
 = 0;

942 
p
 = 
q
;

943 
p
) {

944 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

945 if(
p
->
ty≥
 !
PBUF_ROM
) {

946 
c›y_√eded
 = 1;

949 
p
 =Ö->
√xt
;

951 if(
c›y_√eded
) {

953 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_RAM
);

954 if(
p
 !
NULL
) {

955 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

956 
	`pbuf_‰ì
(
p
);

957 
p
 = 
NULL
;

962 
p
 = 
q
;

963 
	`pbuf_ªf
(
p
);

966 i‡(
p
 !
NULL
) {

968 
ëh¨p_q_íåy
 *
√w_íåy
;

970 
√w_íåy
 = 
	`memp_mÆloc
(
MEMP_ARP_QUEUE
);

971 i‡(
√w_íåy
 !
NULL
) {

972 
√w_íåy
->
√xt
 = 0;

973 
√w_íåy
->
p
 =Ö;

974 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

976 
ëh¨p_q_íåy
 *
r
;

977 
r
 = 
¨p_èbÀ
[
i
].
q
;

978 
r
->
√xt
 !
NULL
) {

979 
r
 =Ñ->
√xt
;

981 
r
->
√xt
 = 
√w_íåy
;

984 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

986 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

987 
ªsu…
 = 
ERR_OK
;

990 
	`pbuf_‰ì
(
p
);

991 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

995 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

996 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1002 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: Ethî√àde°ö©i⁄áddªs†unknown, queueög dißbÀd,Öackë %∞dr›≥d\n", (*)
q
));

1006  
ªsu…
;

1007 
	}
}

1024 #i‡!
LWIP_AUTOIP


1027 
îr_t


1028 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1029 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1030 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

1031 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

1032 c⁄° 
u16_t
 
›code
)

1034 
pbuf
 *
p
;

1035 
îr_t
 
ªsu…
 = 
ERR_OK
;

1036 
u8_t
 
k
;

1037 
ëh¨p_hdr
 *
hdr
;

1038 #i‡
LWIP_AUTOIP


1039 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1043 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, (
ëh¨p_hdr
), 
PBUF_RAM
);

1045 i‡(
p
 =
NULL
) {

1046 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_raw: couldÇotállocateÖbuf for ARPÑequest.\n"));

1047 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1048  
ERR_MEM
;

1050 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1051 (
p
->
Àn
 >(
ëh¨p_hdr
)));

1053 
hdr
 = 
p
->
∑ylﬂd
;

1054 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1055 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1057 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1058 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1059 
k
 = 
ETHARP_HWADDR_LEN
;

1060 #i‡
LWIP_AUTOIP


1063 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1066 
k
 > 0) {

1067 
k
--;

1069 
hdr
->
shwaddr
.
addr
[
k
] = 
hw§c_addr
->addr[k];

1070 
hdr
->
dhwaddr
.
addr
[
k
] = 
hwd°_addr
->addr[k];

1072 #i‡
LWIP_AUTOIP


1073 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_hwaddr
[k];

1075 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_addr
->addr[k];

1077 
hdr
->
ëhhdr
.
§c
.
addr
[
k
] = 
ëh§c_addr
->addr[k];

1079 
hdr
->
sùaddr
 = *(
ù_addr2
 *)
ù§c_addr
;

1080 
hdr
->
dùaddr
 = *(
ù_addr2
 *)
ùd°_addr
;

1082 
hdr
->
hwty≥
 = 
	`ht⁄s
(
HWTYPE_ETHERNET
);

1083 
hdr
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

1085 
hdr
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
));

1087 
hdr
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

1089 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1090 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1092 
	`pbuf_‰ì
(
p
);

1093 
p
 = 
NULL
;

1096  
ªsu…
;

1097 
	}
}

1108 
îr_t


1109 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

1111 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1112  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1113 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1114 
ùaddr
, 
ARP_REQUEST
);

1115 
	}
}

1125 
îr_t


1126 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1128 
ëh_hdr
* 
ëhhdr
;

1131 
ëhhdr
 = 
p
->
∑ylﬂd
;

1132 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1134 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1135 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1136 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1137 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1138 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1140 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

1142 
ETHTYPE_IP
:

1143 #i‡
ETHARP_TRUST_IP_MAC


1145 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1148 if(
	`pbuf_hódî
(
p
, -(
s16_t
)(
ëh_hdr
))) {

1149 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

1150 
	`pbuf_‰ì
(
p
);

1151 
p
 = 
NULL
;

1154 
	`ù_öput
(
p
, 
√tif
);

1158 
ETHTYPE_ARP
:

1160 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1163 #i‡
PPPOE_SUPPORT


1164 
ETHTYPE_PPPOEDISC
:

1165 
	`µp€_disc_öput
(
√tif
, 
p
);

1168 
ETHTYPE_PPPOE
:

1169 
	`µp€_d©a_öput
(
√tif
, 
p
);

1174 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1175 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1176 
	`pbuf_‰ì
(
p
);

1177 
p
 = 
NULL
;

1183  
ERR_OK
;

1184 
	}
}

	@netif/ethernetif.c

46 
	~"lwù/›t.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/mem.h
"

52 
	~"lwù/pbuf.h
"

53 
	~"lwù/sys.h
"

54 
	~<lwù/°©s.h
>

55 
	~<lwù/¢mp.h
>

56 
	~"√tif/ëh¨p.h
"

57 
	~"√tif/µp_€.h
"

60 
	#IFNAME0
 'e'

	)

61 
	#IFNAME1
 'n'

	)

69 
	sëhî√tif
 {

70 
ëh_addr
 *
	mëhaddr
;

75 
ëhî√tif_öput
(
√tif
 *netif);

85 
	$low_Àvñ_öô
(
√tif
 *netif)

87 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

90 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

93 
√tif
->
hwaddr
[0] = ;

95 
√tif
->
hwaddr
[5] = ;

98 
√tif
->
mtu
 = 1500;

102 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

105 
	}
}

123 
îr_t


124 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

126 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

127 
pbuf
 *
q
;

129 
öôüã
 
	`å™s„r
();

131 #i‡
ETH_PAD_SIZE


132 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

135 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

139 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

142 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

144 #i‡
ETH_PAD_SIZE


145 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

148 
	`LINK_STATS_INC
(
lök
.
xmô
);

150  
ERR_OK
;

151 
	}
}

161 
pbuf
 *

162 
	$low_Àvñ_öput
(
√tif
 *netif)

164 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

165 
pbuf
 *
p
, *
q
;

166 
u16_t
 
Àn
;

170 
Àn
 = ;

172 #i‡
ETH_PAD_SIZE


173 
Àn
 +
ETH_PAD_SIZE
;

177 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

179 i‡(
p
 !
NULL
) {

181 #i‡
ETH_PAD_SIZE


182 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

187 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

191 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

193 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

195 #i‡
ETH_PAD_SIZE


196 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

199 
	`LINK_STATS_INC
(
lök
.
ªcv
);

201 
dr›
 
	`∑ckë
();

202 
	`LINK_STATS_INC
(
lök
.
memîr
);

203 
	`LINK_STATS_INC
(
lök
.
dr›
);

206  
p
;

207 
	}
}

219 
	$ëhî√tif_öput
(
√tif
 *netif)

221 
ëhî√tif
 *ethernetif;

222 
ëh_hdr
 *
ëhhdr
;

223 
pbuf
 *
p
;

225 
ëhî√tif
 = 
√tif
->
°©e
;

228 
p
 = 
	`low_Àvñ_öput
(
√tif
);

230 i‡(
p
 =
NULL
) ;

232 
ëhhdr
 = 
p
->
∑ylﬂd
;

234 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

236 
ETHTYPE_IP
:

237 
ETHTYPE_ARP
:

238 #i‡
PPPOE_SUPPORT


240 
ETHTYPE_PPPOEDISC
:

241 
ETHTYPE_PPPOE
:

244 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

245 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

246 
	`pbuf_‰ì
(
p
);

247 
p
 = 
NULL
;

252 
	`pbuf_‰ì
(
p
);

253 
p
 = 
NULL
;

256 
	}
}

270 
îr_t


271 
	$ëhî√tif_öô
(
√tif
 *netif)

273 
ëhî√tif
 *ethernetif;

275 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

277 
ëhî√tif
 = 
	`mem_mÆloc
((ethernetif));

278 i‡(
ëhî√tif
 =
NULL
) {

279 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_init: out of memory\n"));

280  
ERR_MEM
;

283 #i‡
LWIP_NETIF_HOSTNAME


285 
√tif
->
ho°«me
 = "lwip";

293 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

295 
√tif
->
°©e
 = 
ëhî√tif
;

296 
√tif
->
«me
[0] = 
IFNAME0
;

297 
√tif
->
«me
[1] = 
IFNAME1
;

302 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

303 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

305 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

308 
	`low_Àvñ_öô
(
√tif
);

310  
ERR_OK
;

311 
	}
}

	@netif/loopif.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_HAVE_LOOPIF


42 
	~"√tif/lo›if.h
"

43 
	~"lwù/¢mp.h
"

52 
îr_t


53 
	$lo›if_öô
(
√tif
 *netif)

58 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

60 
√tif
->
«me
[0] = 'l';

61 
√tif
->
«me
[1] = 'o';

62 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

63  
ERR_OK
;

64 
	}
}

	@netif/ppp/auth.c

67 
	~"lwù/›t.h
"

69 #i‡
PPP_SUPPORT


71 
	~"µp.h
"

72 
	~"µpdebug.h
"

74 
	~"fsm.h
"

75 
	~"l˝.h
"

76 
	~"∑p.h
"

77 
	~"ch≠.h
"

78 
	~"auth.h
"

79 
	~"ù˝.h
"

81 #i‡
CBCP_SUPPORT


82 
	~"cb˝.h
"

90 
	#PAP_WITHPEER
 1

	)

91 
	#PAP_PEER
 2

	)

92 
	#CHAP_WITHPEER
 4

	)

93 
	#CHAP_PEER
 8

	)

100 
	sw‹dli°
 {

101 
w‹dli°
 *
	m√xt
;

102 
	mw‹d
[1];

109 *
¸y±
 (const *, const *);

113 
√tw‹k_pha£
 ();

114 
check_idÀ
 (*);

115 
c⁄√˘_time_expúed
 (*);

117 
logö
 (*, *, **, *);

119 
logout
 ();

120 
nuŒ_logö
 ();

121 
gë_∑p_∑sswd
 (, *, *);

122 
have_∑p_£¸ë
 ();

123 
have_ch≠_£¸ë
 (*, *, 
u32_t
);

124 
ù_addr_check
 (
u32_t
, 
w‹dli°
 *);

126 
£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
);

127 
‰ì_w‹dli°
 (
w‹dli°
 *);

129 #i‡
CBCP_SUPPORT


130 
ˇŒback_pha£
 ();

142 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


144 
	g≥î_auth«me
[
MAXNAMELEN
];

148 
	gauth_≥ndög
[
NUM_PPP
];

151 
	glogged_ö
;

154 
	gdid_authup
;

157 
w‹dli°
 *
	gaddªs£s
[
NUM_PPP
];

160 
	gnum_≈_›í
;

163 
	gnum_≈_up
;

165 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


167 
	g∑sswd_‰om_fûe
;

179 
	$lök_ªquúed
(
unô
)

181 
	`LWIP_UNUSED_ARG
(
unô
);

183 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ªquúed: %d\n", 
unô
));

184 
	}
}

191 
	$lök_ãrmö©ed
(
unô
)

193 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ãrmö©ed: %d\n", 
unô
));

194 i‡(
l˝_pha£
[
unô
] =
PHASE_DEAD
) {

197 i‡(
logged_ö
) {

198 
	`logout
();

200 
l˝_pha£
[
unô
] = 
PHASE_DEAD
;

201 
	`AUTHDEBUG
((
LOG_NOTICE
, "ConnectionÅerminated.\n"));

202 
	`µpLökTîmö©ed
(
unô
);

203 
	}
}

209 
	$lök_down
(
unô
)

211 
i
;

212 
¥Ÿít
 *
¥Ÿp
;

214 
	`AUTHDEBUG
((
LOG_INFO
, "lök_down: %d\n", 
unô
));

215 i‡(
did_authup
) {

217 
did_authup
 = 0;

219 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

220 i‡(!
¥Ÿp
->
íabÀd_Êag
) {

223 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
) {

224 (*
¥Ÿp
->
lowîdown
)(
unô
);

226 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
) {

227 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

230 
num_≈_›í
 = 0;

231 
num_≈_up
 = 0;

232 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

233 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

235 
	`µpLökDown
(
unô
);

236 
	}
}

243 
	$lök_e°ablished
(
unô
)

245 
auth
;

246 
i
;

247 
¥Ÿít
 *
¥Ÿp
;

248 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

249 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

250 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


251 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

254 
	`AUTHDEBUG
((
LOG_INFO
, "lök_e°ablished: %d\n", 
unô
));

258 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

259 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
lowîup
 !
NULL
) {

260 (*
¥Ÿp
->
lowîup
)(
unô
);

263 i‡(
µp_£âögs
.
auth_ªquúed
 && !(
go
->
√g_ch≠
 || go->
√g_u∑p
)) {

269 i‡(!
wo
->
√g_u∑p
 || !
	`nuŒ_logö
(
unô
)) {

270 
	`AUTHDEBUG
((
LOG_WARNING
, "peerÑefusedÅoáuthenticate\n"));

271 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

276 
l˝_pha£
[
unô
] = 
PHASE_AUTHENTICATE
;

277 
auth
 = 0;

278 #i‡
CHAP_SUPPORT


279 i‡(
go
->
√g_ch≠
) {

280 
	`Ch≠AuthPìr
(
unô
, 
µp_£âögs
.
our_«me
, 
go
->
ch≠_mdty≥
);

281 
auth
 |
CHAP_PEER
;

284 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


287 #i‡
PAP_SUPPORT


288 i‡(
go
->
√g_u∑p
) {

289 
	`u∑p_auth≥î
(
unô
);

290 
auth
 |
PAP_PEER
;

293 #i‡
CHAP_SUPPORT


294 i‡(
ho
->
√g_ch≠
) {

295 
	`Ch≠AuthWôhPìr
(
unô
, 
µp_£âögs
.
u£r
, 
ho
->
ch≠_mdty≥
);

296 
auth
 |
CHAP_WITHPEER
;

299 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


302 #i‡
PAP_SUPPORT


303 i‡(
ho
->
√g_u∑p
) {

304 i‡(
µp_£âögs
.
∑sswd
[0] == 0) {

305 
∑sswd_‰om_fûe
 = 1;

306 i‡(!
	`gë_∑p_∑sswd
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
)) {

307 
	`AUTHDEBUG
((
LOG_ERR
, "No secret found for PAPÜogin\n"));

310 
	`u∑p_authwôh≥î
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
);

311 
auth
 |
PAP_WITHPEER
;

314 
auth_≥ndög
[
unô
] = 
auth
;

316 i‡(!
auth
) {

317 
	`√tw‹k_pha£
(
unô
);

319 
	}
}

325 
	$auth_≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

327 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

329 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

333 
	`l˝_˛o£
(
unô
, "Authentication failed");

334 
	}
}

337 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


342 
	$auth_≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
, *
«me
, 
«mñí
)

344 
pbô
;

346 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

347 
¥Ÿocﬁ
) {

348 
PPP_CHAP
:

349 
pbô
 = 
CHAP_PEER
;

351 
PPP_PAP
:

352 
pbô
 = 
PAP_PEER
;

355 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

362 i‡(
«mñí
 > (
≥î_auth«me
) - 1) {

363 
«mñí
 = (
≥î_auth«me
) - 1;

365 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

366 
≥î_auth«me
[
«mñí
] = 0;

372 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

373 
	`√tw‹k_pha£
(
unô
);

375 
	}
}

381 
	$auth_wôh≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

383 
îrCode
 = 
PPPERR_AUTHFAIL
;

385 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

387 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

388 i‡(
∑sswd_‰om_fûe
) {

389 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

396 
	`µpIOCé
(
unô
, 
PPPCTLS_ERRCODE
, &
îrCode
);

403 
	}
}

409 
	$auth_wôh≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

411 
pbô
;

413 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

414 
¥Ÿocﬁ
) {

415 
PPP_CHAP
:

416 
pbô
 = 
CHAP_WITHPEER
;

418 
PPP_PAP
:

419 i‡(
∑sswd_‰om_fûe
) {

420 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

422 
pbô
 = 
PAP_WITHPEER
;

425 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

426 
pbô
 = 0;

433 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

434 
	`√tw‹k_pha£
(
unô
);

436 
	}
}

444 
	$≈_up
(
unô
, 
u16_t
 
¥Ÿo
)

446 
	`LWIP_UNUSED_ARG
(
unô
);

447 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

449 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

450 i‡(
num_≈_up
 == 0) {

451 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: maxc⁄√˘=%d idÀ_time_limô=%d\n",
µp_£âögs
.
maxc⁄√˘
,µp_£âögs.
idÀ_time_limô
));

455 i‡(
µp_£âögs
.
idÀ_time_limô
 > 0) {

456 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
);

463 i‡(
µp_£âögs
.
maxc⁄√˘
 > 0) {

464 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
µp_£âögs
.
maxc⁄√˘
);

467 ++
num_≈_up
;

468 
	}
}

474 
	$≈_down
(
unô
, 
u16_t
 
¥Ÿo
)

476 
	`LWIP_UNUSED_ARG
(
unô
);

477 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

479 
	`AUTHDEBUG
((
LOG_INFO
, "≈_down: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

480 i‡(--
num_≈_up
 =0 && 
µp_£âögs
.
idÀ_time_limô
 > 0) {

481 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

483 
	}
}

489 
	$≈_föished
(
unô
, 
u16_t
 
¥Ÿo
)

491 
	`LWIP_UNUSED_ARG
(
unô
);

492 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

494 
	`AUTHDEBUG
((
LOG_INFO
, "≈_föished: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

495 i‡(--
num_≈_›í
 <= 0) {

497 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

499 
	}
}

507 
	$auth_ª£t
(
unô
)

509 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

510 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

511 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

512 
u32_t
 
ªmŸe
;

514 
	`AUTHDEBUG
((
LOG_INFO
, "auth_ª£t: %d\n", 
unô
));

515 
ao
->
√g_u∑p
 = !
µp_£âögs
.
ªfu£_∑p
 && (µp_£âögs.
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
unô
, 
NULL
, NULL));

516 
ao
->
√g_ch≠
 = !
µp_£âögs
.
ªfu£_ch≠
 &&Öµ_£âögs.
∑sswd
[0] != 0 ;

518 i‡(
go
->
√g_u∑p
 && !
	`have_∑p_£¸ë
()) {

519 
go
->
√g_u∑p
 = 0;

521 i‡(
go
->
√g_ch≠
) {

522 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

523 i‡(!
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
)) {

524 
go
->
√g_ch≠
 = 0;

527 
	}
}

529 #i‡
PAP_SUPPORT


541 
	$check_∑sswd
–
unô
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, **
msg
, *
msgÀn
)

544 
	`LWIP_UNUSED_ARG
(
unô
);

545 
	`LWIP_UNUSED_ARG
(
au£r
);

546 
	`LWIP_UNUSED_ARG
(
u£æí
);

547 
	`LWIP_UNUSED_ARG
(
≠asswd
);

548 
	`LWIP_UNUSED_ARG
(
∑sswdÀn
);

549 
	`LWIP_UNUSED_ARG
(
msgÀn
);

550 *
msg
 = (*) 0;

551  
UPAP_AUTHACK
;

553 
ªt
 = 0;

554 
w‹dli°
 *
addrs
 = 
NULL
;

555 
∑sswd
[256], 
u£r
[256];

556 
£¸ë
[
MAXWORDLEN
];

557 
u_sh‹t
 
©ãm±s
 = 0;

562 
	`BCOPY
(
≠asswd
, 
∑sswd
, 
∑sswdÀn
);

563 
∑sswd
[
∑sswdÀn
] = '\0';

564 
	`BCOPY
(
au£r
, 
u£r
, 
u£æí
);

565 
u£r
[
u£æí
] = '\0';

566 *
msg
 = (*) 0;

569 
ªt
 = 
UPAP_AUTHACK
;

571 i‡(
ªt
 =
UPAP_AUTHNAK
) {

572 i‡(*
msg
 == (*) 0) {

573 *
msg
 = "Login incorrect";

575 *
msgÀn
 = 
	`°æí
(*
msg
);

581 i‡(
©ãm±s
++ >= 10) {

582 
	`AUTHDEBUG
((
LOG_WARNING
, "%d LOGIN FAILURES BY %s\n", 
©ãm±s
, 
u£r
));

585 i‡(
©ãm±s
 > 3) {

586 
	`sys_m¶ìp
((
©ãm±s
 - 3) * 5);

588 i‡(
addrs
 !
NULL
) {

589 
	`‰ì_w‹dli°
(
addrs
);

592 
©ãm±s
 = 0;

593 i‡(*
msg
 == (*) 0) {

594 *
msg
 = "Login ok";

596 *
msgÀn
 = 
	`°æí
(*
msg
);

597 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

600 
	`BZERO
(
∑sswd
, (passwd));

601 
	`BZERO
(
£¸ë
, (secret));

603  
ªt
;

605 
	}
}

614 
	$auth_ù_addr
(
unô
, 
u32_t
 
addr
)

616  
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

617 
	}
}

625 
	$bad_ù_adrs
(
u32_t
 
addr
)

627 
addr
 = 
	`¡ohl
(addr);

628  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


629 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

630 
	}
}

633 #i‡
CHAP_SUPPORT


639 
	$gë_£¸ë
–
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
ßve_addrs
)

642 
Àn
;

643 
w‹dli°
 *
addrs
;

645 
	`LWIP_UNUSED_ARG
(
unô
);

646 
	`LWIP_UNUSED_ARG
(
£rvî
);

647 
	`LWIP_UNUSED_ARG
(
ßve_addrs
);

649 
addrs
 = 
NULL
;

651 if(!
˛õ¡
 || !˛õ¡[0] || 
	`°rcmp
(˛õ¡, 
µp_£âögs
.
u£r
)) {

655 
Àn
 = 
	`°æí
(
µp_£âögs
.
∑sswd
);

656 i‡(
Àn
 > 
MAXSECRETLEN
) {

657 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

658 
Àn
 = 
MAXSECRETLEN
;

661 
	`BCOPY
(
µp_£âögs
.
∑sswd
, 
£¸ë
, 
Àn
);

662 *
£¸ë_Àn
 = 
Àn
;

666 
ªt
 = 0, 
Àn
;

667 
w‹dli°
 *
addrs
;

668 
£cbuf
[
MAXWORDLEN
];

670 
addrs
 = 
NULL
;

671 
£cbuf
[0] = 0;

674 i‡(
ªt
 < 0) {

678 i‡(
ßve_addrs
) {

679 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

682 
Àn
 = 
	`°æí
(
£cbuf
);

683 i‡(
Àn
 > 
MAXSECRETLEN
) {

684 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

685 
Àn
 = 
MAXSECRETLEN
;

688 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

689 
	`BZERO
(
£cbuf
, (secbuf));

690 *
£¸ë_Àn
 = 
Àn
;

694 
	}
}

703 
	$auth_check_›ti⁄s
()

705 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

706 
ˇn_auth
;

707 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

708 
u32_t
 
ªmŸe
;

711 i‡(
µp_£âögs
.
our_«me
[0] =0 ||Öµ_£âögs.
u£ho°«me
) {

712 
	`°r˝y
(
µp_£âögs
.
our_«me
,Öµ_£âögs.
ho°«me
);

715 i‡(
µp_£âögs
.
u£r
[0] == 0) {

716 
	`°r˝y
(
µp_£âögs
.
u£r
,Öµ_£âögs.
our_«me
);

720 i‡(
µp_£âögs
.
auth_ªquúed
 && !
wo
->
√g_ch≠
 && !wo->
√g_u∑p
) {

721 
wo
->
√g_ch≠
 = 1;

722 
wo
->
√g_u∑p
 = 1;

729 
ˇn_auth
 = 
wo
->
√g_u∑p
 && 
	`have_∑p_£¸ë
();

730 i‡(!
ˇn_auth
 && 
wo
->
√g_ch≠
) {

731 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

732 
ˇn_auth
 = 
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
);

735 i‡(
µp_£âögs
.
auth_ªquúed
 && !
ˇn_auth
) {

736 
	`µp_∑nic
("Noáuth secret");

738 
	}
}

749 
	$√tw‹k_pha£
(
unô
)

751 
i
;

752 
¥Ÿít
 *
¥Ÿp
;

753 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

758 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
Ë&& !
did_authup
) {

760 
did_authup
 = 1;

763 #i‡
CBCP_SUPPORT


767 i‡(
go
->
√g_cb˝
) {

768 
l˝_pha£
[
unô
] = 
PHASE_CALLBACK
;

769 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

774 
l˝_pha£
[
unô
] = 
PHASE_NETWORK
;

775 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

776 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

777 (*
¥Ÿp
->
›í
)(
unô
);

778 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
) {

779 ++
num_≈_›í
;

784 i‡(
num_≈_›í
 == 0) {

786 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

788 
	}
}

795 
	$check_idÀ
(*
¨g
)

797 
µp_idÀ
 
idÀ
;

798 
u_sh‹t
 
ôime
;

800 
	`LWIP_UNUSED_ARG
(
¨g
);

801 i‡(!
	`gë_idÀ_time
(0, &
idÀ
)) {

804 
ôime
 = 
	`LWIP_MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

805 i‡(
ôime
 >
µp_£âögs
.
idÀ_time_limô
) {

807 
	`AUTHDEBUG
((
LOG_INFO
, "Terminating connection dueÅoÜack ofáctivity.\n"));

808 
	`l˝_˛o£
(0, "Link inactive");

810 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
 - 
ôime
);

812 
	}
}

818 
	$c⁄√˘_time_expúed
(*
¨g
)

820 
	`LWIP_UNUSED_ARG
(
¨g
);

822 
	`AUTHDEBUG
((
LOG_INFO
, "ConnectÅimeÉxpired\n"));

823 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

824 
	}
}

837 
	$logö
(*
u£r
, *
∑sswd
, **
msg
, *
msgÀn
)

840  (
UPAP_AUTHNAK
);

841 
	}
}

848 
	$logout
()

850 
logged_ö
 = 0;

851 
	}
}

859 
	$nuŒ_logö
(
unô
)

861 
	`LWIP_UNUSED_ARG
(
unô
);

864 
	}
}

872 
	$gë_∑p_∑sswd
(
unô
, *
u£r
, *
∑sswd
)

874 
	`LWIP_UNUSED_ARG
(
unô
);

880 if(
u£r
) {

881 
	`°r˝y
(
u£r
, "none");

883 if(
∑sswd
) {

884 
	`°r˝y
(
∑sswd
, "none");

887 
	}
}

894 
	$have_∑p_£¸ë
()

898 
	}
}

907 
	$have_ch≠_£¸ë
(*
˛õ¡
, *
£rvî
, 
u32_t
 
ªmŸe
)

909 
	`LWIP_UNUSED_ARG
(
˛õ¡
);

910 
	`LWIP_UNUSED_ARG
(
£rvî
);

911 
	`LWIP_UNUSED_ARG
(
ªmŸe
);

914 
	}
}

921 
	$£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
)

923 i‡(
addªs£s
[
unô
] !
NULL
) {

924 
	`‰ì_w‹dli°
(
addªs£s
[
unô
]);

926 
addªs£s
[
unô
] = 
addrs
;

933 i‡(
addrs
 !
NULL
 &&áddrs->
√xt
 == NULL) {

934 *
p
 = 
addrs
->
w‹d
;

935 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

936 
u32_t
 
a
;

937 
ho°ít
 *
hp
;

939 i‡(
wo
->
hißddr
 =0 && *
p
 !'!' && *∞!'-' && 
	`°rchr
’, '/'Ë=
NULL
) {

940 
hp
 = 
	`gëho°by«me
(
p
);

941 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

942 
a
 = *(
u32_t
 *)
hp
->
h_addr
;

944 
a
 = 
	`öë_addr
(
p
);

946 i‡(
a
 !(
u32_t
) -1) {

947 
wo
->
hißddr
 = 
a
;

952 
	}
}

956 
	$ù_addr_check
(
u32_t
 
addr
, 
w‹dli°
 *
addrs
)

959 i‡(
	`bad_ù_adrs
(
addr
)) {

963 i‡(
addrs
 =
NULL
) {

964  !
µp_£âögs
.
auth_ªquúed
;

969 
	}
}

976 
	$‰ì_w‹dli°
(
w‹dli°
 *
wp
)

978 
w‹dli°
 *
√xt
;

980 
wp
 !
NULL
) {

981 
√xt
 = 
wp
->next;

982 
	`‰ì
(
wp
);

983 
wp
 = 
√xt
;

985 
	}
}

	@netif/ppp/auth.h

53 #i‚de‡
AUTH_H


54 
	#AUTH_H


	)

61 
lök_ªquúed
 ();

64 
lök_ãrmö©ed
 ();

67 
lök_down
 ();

70 
lök_e°ablished
 ();

73 
≈_up
 (, 
u16_t
);

76 
≈_down
 (, 
u16_t
);

79 
≈_föished
 (, 
u16_t
);

82 
auth_≥î_Áû
 (, 
u16_t
);

85 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

88 
auth_wôh≥î_Áû
 (, 
u16_t
);

91 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

94 
auth_check_›ti⁄s
 ();

97 
auth_ª£t
 ();

100 
check_∑sswd
 (, *, , *, , **, *);

103 
gë_£¸ë
 (, *, *, *, *, );

106 
auth_ù_addr
 (, 
u32_t
);

109 
bad_ù_adrs
 (
u32_t
);

	@netif/ppp/chap.c

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
CHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"magic.h
"

79 
	~"øndm.h
"

80 
	~"auth.h
"

81 
	~"md5.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

102 
Ch≠Inô
 ();

103 
Ch≠LowîUp
 ();

104 
Ch≠LowîDown
 ();

105 
Ch≠I≈ut
 (, 
u_ch¨
 *, );

106 
Ch≠PrŸocﬁReje˘
 ();

108 
Ch≠PrötPkt
 (
u_ch¨
 *, , (*) (*, *, ...), *);

111 
	`Ch≠ChÆÀngeTimeout
 (*);

112 
	`Ch≠Re•⁄£Timeout
 (*);

113 
	`Ch≠Re˚iveChÆÀnge
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

114 
	`Ch≠RechÆÀnge
 (*);

115 
	`Ch≠Re˚iveRe•⁄£
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

116 
	`Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

117 
	`Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

118 
	`Ch≠SídSètus
 (
ch≠_°©e
 *, );

119 
	`Ch≠SídChÆÀnge
 (
ch≠_°©e
 *);

120 
	`Ch≠SídRe•⁄£
 (
ch≠_°©e
 *);

121 
	`Ch≠GíChÆÀnge
 (
ch≠_°©e
 *);

127 
ch≠_°©e
 
ch≠
[
NUM_PPP
];

129 
¥Ÿít
 
ch≠_¥Ÿít
 = {

130 
PPP_CHAP
,

131 
Ch≠Inô
,

132 
Ch≠I≈ut
,

133 
Ch≠PrŸocﬁReje˘
,

134 
Ch≠LowîUp
,

135 
Ch≠LowîDown
,

136 
NULL
,

137 
NULL
,

139 
Ch≠PrötPkt
,

140 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL


149 
	}
};

160 
	$Ch≠AuthWôhPìr
(
unô
, *
our_«me
, 
dige°
)

162 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

164 
c°©e
->
ª•_«me
 = 
our_«me
;

165 
c°©e
->
ª•_ty≥
 = 
dige°
;

167 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
 ||

168 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

170 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_PENDING
;

179 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

180 
	}
}

187 
	$Ch≠AuthPìr
(
unô
, *
our_«me
, 
dige°
)

189 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

191 
c°©e
->
chÆ_«me
 = 
our_«me
;

192 
c°©e
->
chÆ_ty≥
 = 
dige°
;

194 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
 ||

195 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

197 
c°©e
->
£rvî°©e
 = 
CHAPSS_PENDING
;

201 
	`Ch≠GíChÆÀnge
(
c°©e
);

202 
	`Ch≠SídChÆÀnge
(
c°©e
);

203 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

204 
	}
}

214 
	$Ch≠Inô
(
unô
)

216 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

218 
	`BZERO
(
c°©e
, (*cstate));

219 
c°©e
->
unô
 = unit;

220 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

221 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

222 
c°©e
->
timeouâime
 = 
CHAP_DEFTIMEOUT
;

223 
c°©e
->
max_å™smôs
 = 
CHAP_DEFTRANSMITS
;

225 
	}
}

232 
	$Ch≠ChÆÀngeTimeout
(*
¨g
)

234 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

238 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL_CHAL
 &&

239 
c°©e
->
£rvî°©e
 !
CHAPSS_RECHALLENGE
) {

243 i‡(
c°©e
->
chÆ_å™smôs
 >c°©e->
max_å™smôs
) {

245 
	`CHAPDEBUG
((
LOG_ERR
, "Peer failedÅoÑespondÅo CHAP challenge\n"));

246 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

247 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

251 
	`Ch≠SídChÆÀnge
(
c°©e
);

252 
	}
}

259 
	$Ch≠Re•⁄£Timeout
(*
¨g
)

261 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

264 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

268 
	`Ch≠SídRe•⁄£
(
c°©e
);

269 
	}
}

276 
	$Ch≠RechÆÀnge
(*
¨g
)

278 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

281 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_OPEN
) {

285 
	`Ch≠GíChÆÀnge
(
c°©e
);

286 
	`Ch≠SídChÆÀnge
(
c°©e
);

287 
c°©e
->
£rvî°©e
 = 
CHAPSS_RECHALLENGE
;

288 
	}
}

297 
	$Ch≠LowîUp
(
unô
)

299 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

301 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
) {

302 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_CLOSED
;

303 } i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

304 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

307 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
) {

308 
c°©e
->
£rvî°©e
 = 
CHAPSS_CLOSED
;

309 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

310 
	`Ch≠GíChÆÀnge
(
c°©e
);

311 
	`Ch≠SídChÆÀnge
(
c°©e
);

312 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

314 
	}
}

323 
	$Ch≠LowîDown
(
unô
)

325 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

328 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL_CHAL
 ||

329 
c°©e
->
£rvî°©e
 =
CHAPSS_RECHALLENGE
) {

330 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

331 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN


332 && 
c°©e
->
chÆ_öãrvÆ
 != 0) {

333 
	`UNTIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
);

335 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

336 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

338 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

339 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

340 
	}
}

347 
	$Ch≠PrŸocﬁReje˘
(
unô
)

349 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

351 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL
 &&

352 
c°©e
->
£rvî°©e
 !
CHAPSS_CLOSED
) {

353 
	`auth_≥î_Áû
(
unô
, 
PPP_CHAP
);

355 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_INITIAL
 &&

356 
c°©e
->
˛õ¡°©e
 !
CHAPCS_CLOSED
) {

357 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_CHAP
);

359 
	`Ch≠LowîDown
(
unô
);

360 
	}
}

367 
	$Ch≠I≈ut
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
∑ckë_Àn
)

369 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

370 
u_ch¨
 *
öp
;

371 
u_ch¨
 
code
, 
id
;

372 
Àn
;

378 
öp
 = 
ö∑ckë
;

379 i‡(
∑ckë_Àn
 < 
CHAP_HEADERLEN
) {

380 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd short header.\n"));

383 
	`GETCHAR
(
code
, 
öp
);

384 
	`GETCHAR
(
id
, 
öp
);

385 
	`GETSHORT
(
Àn
, 
öp
);

386 i‡(
Àn
 < 
CHAP_HEADERLEN
) {

387 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd illegalÜength.\n"));

390 i‡(
Àn
 > 
∑ckë_Àn
) {

391 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd shortÖacket.\n"));

394 
Àn
 -
CHAP_HEADERLEN
;

399 
code
) {

400 
CHAP_CHALLENGE
:

401 
	`Ch≠Re˚iveChÆÀnge
(
c°©e
, 
öp
, 
id
, 
Àn
);

404 
CHAP_RESPONSE
:

405 
	`Ch≠Re˚iveRe•⁄£
(
c°©e
, 
öp
, 
id
, 
Àn
);

408 
CHAP_FAILURE
:

409 
	`Ch≠Re˚iveFaûuª
(
c°©e
, 
öp
, 
id
, 
Àn
);

412 
CHAP_SUCCESS
:

413 
	`Ch≠Re˚iveSuc˚ss
(
c°©e
, 
öp
, 
id
, 
Àn
);

417 
	`CHAPDEBUG
((
LOG_WARNING
, "Unknow¿CHAP codê(%dËª˚ived.\n", 
code
));

420 
	}
}

427 
	$Ch≠Re˚iveChÆÀnge
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

429 
rchÆÀnge_Àn
;

430 
u_ch¨
 *
rchÆÀnge
;

431 
£¸ë_Àn
;

432 
£¸ë
[
MAXSECRETLEN
];

433 
rho°«me
[256];

434 
MD5_CTX
 
mdC⁄ãxt
;

435 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

437 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: Rcvd id %d.\n", 
id
));

438 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_CLOSED
 ||

439 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

440 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge: in state %d\n",

441 
c°©e
->
˛õ¡°©e
));

445 i‡(
Àn
 < 2) {

446 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

450 
	`GETCHAR
(
rchÆÀnge_Àn
, 
öp
);

451 
Àn
 - (
u_ch¨
Ë+ 
rchÆÀnge_Àn
;

452 i‡(
Àn
 < 0) {

453 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

456 
rchÆÀnge
 = 
öp
;

457 
	`INCPTR
(
rchÆÀnge_Àn
, 
öp
);

459 i‡(
Àn
 >(
rho°«me
)) {

460 
Àn
 = (
rho°«me
) - 1;

462 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

463 
rho°«me
[
Àn
] = '\000';

465 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge:Ñe˚ivedÇamêfõld '%s'\n", 
rho°«me
));

468 i‡(
µp_£âögs
.
ªmŸe_«me
[0] !0 && (µp_£âögs.
ex∂icô_ªmŸe
 || 
rho°«me
[0] == 0)) {

469 
	`°∫˝y
(
rho°«me
, 
µp_£âögs
.
ªmŸe_«me
, (rhostname));

470 
rho°«me
[(rhostname) - 1] = 0;

471 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: usög '%s'á†ªmŸê«me\n", 
rho°«me
));

475 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, c°©e->
ª•_«me
, 
rho°«me
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

476 
£¸ë_Àn
 = 0;

477 
	`CHAPDEBUG
((
LOG_WARNING
, "NÿCHAP se¸ë found f‹áuthítiˇtög u†tÿ%s\n", 
rho°«me
));

481 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

482 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

485 
c°©e
->
ª•_id
 = 
id
;

486 
c°©e
->
ª•_å™smôs
 = 0;

489 
c°©e
->
ª•_ty≥
) {

491 
CHAP_DIGEST_MD5
:

492 
	`MD5Inô
(&
mdC⁄ãxt
);

493 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
ª•_id
, 1);

494 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

495 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
rchÆÀnge
, 
rchÆÀnge_Àn
);

496 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

497 
	`BCOPY
(
hash
, 
c°©e
->
ª•⁄£
, 
MD5_SIGNATURE_SIZE
);

498 
c°©e
->
ª•_Àngth
 = 
MD5_SIGNATURE_SIZE
;

501 #ifde‡
CHAPMS


502 
CHAP_MICROSOFT
:

503 
	`Ch≠MS
(
c°©e
, 
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
);

508 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
ª•_ty≥
));

512 
	`BZERO
(
£¸ë
, (secret));

513 
	`Ch≠SídRe•⁄£
(
c°©e
);

514 
	}
}

521 
	$Ch≠Re˚iveRe•⁄£
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

523 
u_ch¨
 *
ªmmd
, 
ªmmd_Àn
;

524 
£¸ë_Àn
, 
ﬁd_°©e
;

525 
code
;

526 
rho°«me
[256];

527 
MD5_CTX
 
mdC⁄ãxt
;

528 
£¸ë
[
MAXSECRETLEN
];

529 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

531 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£: Rcvd id %d.\n", 
id
));

533 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_CLOSED
 ||

534 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

535 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse: in state %d\n",

536 
c°©e
->
£rvî°©e
));

540 i‡(
id
 !
c°©e
->
chÆ_id
) {

549 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN
) {

550 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_SUCCESS
);

553 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_BADAUTH
) {

554 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_FAILURE
);

558 i‡(
Àn
 < 2) {

559 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

562 
	`GETCHAR
(
ªmmd_Àn
, 
öp
);

563 
ªmmd
 = 
öp
;

564 
	`INCPTR
(
ªmmd_Àn
, 
öp
);

566 
Àn
 - (
u_ch¨
Ë+ 
ªmmd_Àn
;

567 i‡(
Àn
 < 0) {

568 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

572 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

574 i‡(
Àn
 >(
rho°«me
)) {

575 
Àn
 = (
rho°«me
) - 1;

577 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

578 
rho°«me
[
Àn
] = '\000';

580 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£:Ñe˚ivedÇamêfõld: %s\n", 
rho°«me
));

586 
code
 = 
CHAP_FAILURE
;

587 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, 
rho°«me
, c°©e->
chÆ_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

589 
	`CHAPDEBUG
((
LOG_WARNING
, "No CHAP secret found foráuthenticating %s\n",

590 
rho°«me
));

593 
c°©e
->
chÆ_ty≥
) {

595 
CHAP_DIGEST_MD5
:

596 i‡(
ªmmd_Àn
 !
MD5_SIGNATURE_SIZE
) {

599 
	`MD5Inô
(&
mdC⁄ãxt
);

600 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
chÆ_id
, 1);

601 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

602 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
c°©e
->
chÆÀnge
, c°©e->
chÆ_Àn
);

603 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

606 i‡(
	`memcmp
 (
hash
, 
ªmmd
, 
MD5_SIGNATURE_SIZE
) == 0) {

607 
code
 = 
CHAP_SUCCESS
;

612 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
chÆ_ty≥
));

616 
	`BZERO
(
£¸ë
, (secret));

617 
	`Ch≠SídSètus
(
c°©e
, 
code
);

619 i‡(
code
 =
CHAP_SUCCESS
) {

620 
ﬁd_°©e
 = 
c°©e
->
£rvî°©e
;

621 
c°©e
->
£rvî°©e
 = 
CHAPSS_OPEN
;

622 i‡(
ﬁd_°©e
 =
CHAPSS_INITIAL_CHAL
) {

623 
	`auth_≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
, 
rho°«me
, 
Àn
);

625 i‡(
c°©e
->
chÆ_öãrvÆ
 != 0) {

626 
	`TIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
, c°©e->
chÆ_öãrvÆ
);

629 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPÖeeráuthentication failed\n"));

630 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

631 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

633 
	}
}

639 
	$Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

641 
	`LWIP_UNUSED_ARG
(
id
);

642 
	`LWIP_UNUSED_ARG
(
öp
);

644 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: Rcvd id %d.\n", 
id
));

646 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_OPEN
) {

651 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

653 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

657 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

662 i‡(
Àn
 > 0) {

663 
	`PRINTMSG
(
öp
, 
Àn
);

666 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_OPEN
;

668 
	`auth_wôh≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
);

669 
	}
}

676 
	$Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

678 
	`LWIP_UNUSED_ARG
(
id
);

679 
	`LWIP_UNUSED_ARG
(
öp
);

681 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: Rcvd id %d.\n", 
id
));

683 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

685 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

689 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

694 i‡(
Àn
 > 0) {

695 
	`PRINTMSG
(
öp
, 
Àn
);

698 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPáuthentication failed\n"));

699 
	`auth_wôh≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

700 
	}
}

707 
	$Ch≠SídChÆÀnge
(
ch≠_°©e
 *
c°©e
)

709 
u_ch¨
 *
ouç
;

710 
chÆ_Àn
, 
«me_Àn
;

711 
ouéí
;

713 
chÆ_Àn
 = 
c°©e
->chal_len;

714 
«me_Àn
 = 
	`°æí
(
c°©e
->
chÆ_«me
);

715 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
chÆ_Àn
 + 
«me_Àn
;

716 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

718 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

720 
	`PUTCHAR
(
CHAP_CHALLENGE
, 
ouç
);

721 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

722 
	`PUTSHORT
(
ouéí
, 
ouç
);

724 
	`PUTCHAR
(
chÆ_Àn
, 
ouç
);

725 
	`BCOPY
(
c°©e
->
chÆÀnge
, 
ouç
, 
chÆ_Àn
);

726 
	`INCPTR
(
chÆ_Àn
, 
ouç
);

728 
	`BCOPY
(
c°©e
->
chÆ_«me
, 
ouç
, 
«me_Àn
);

730 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

732 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídChÆÀnge: Síàid %d.\n", 
c°©e
->
chÆ_id
));

734 
	`TIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
, c°©e->
timeouâime
);

735 ++
c°©e
->
chÆ_å™smôs
;

736 
	}
}

743 
	$Ch≠SídSètus
(
ch≠_°©e
 *
c°©e
, 
code
)

745 
u_ch¨
 *
ouç
;

746 
ouéí
, 
msgÀn
;

747 
msg
[256];

749 i‡(
code
 =
CHAP_SUCCESS
) {

750 
	`°r˝y
(
msg
, "Welcome!");

752 
	`°r˝y
(
msg
, "I don'tÜike you. Go 'way.");

754 
msgÀn
 = 
	`°æí
(
msg
);

756 
ouéí
 = 
CHAP_HEADERLEN
 + 
msgÀn
;

757 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

759 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

761 
	`PUTCHAR
(
code
, 
ouç
);

762 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

763 
	`PUTSHORT
(
ouéí
, 
ouç
);

764 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

765 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

767 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídSètus: Síàcodê%d, id %d.\n", 
code
, 
c°©e
->
chÆ_id
));

768 
	}
}

778 
	$Ch≠GíChÆÀnge
(
ch≠_°©e
 *
c°©e
)

780 
chÆ_Àn
;

781 
u_ch¨
 *
±r
 = 
c°©e
->
chÆÀnge
;

782 
i
;

786 
chÆ_Àn
 = ()

787 ((((
	`magic
() >> 16) *

788 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) >> 16)

789 + 
MIN_CHALLENGE_LENGTH
);

790 
c°©e
->
chÆ_Àn
 = chal_len;

791 
c°©e
->
chÆ_id
 = ++c°©e->
id
;

792 
c°©e
->
chÆ_å™smôs
 = 0;

795 
i
 = 0; i < 
chÆ_Àn
; i++ ) {

796 *
±r
++ = (Ë(
	`magic
() & 0xff);

798 
	}
}

806 
	$Ch≠SídRe•⁄£
(
ch≠_°©e
 *
c°©e
)

808 
u_ch¨
 *
ouç
;

809 
ouéí
, 
md_Àn
, 
«me_Àn
;

811 
md_Àn
 = 
c°©e
->
ª•_Àngth
;

812 
«me_Àn
 = 
	`°æí
(
c°©e
->
ª•_«me
);

813 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
md_Àn
 + 
«me_Àn
;

814 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

816 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

818 
	`PUTCHAR
(
CHAP_RESPONSE
, 
ouç
);

819 
	`PUTCHAR
(
c°©e
->
ª•_id
, 
ouç
);

820 
	`PUTSHORT
(
ouéí
, 
ouç
);

822 
	`PUTCHAR
(
md_Àn
, 
ouç
);

823 
	`BCOPY
(
c°©e
->
ª•⁄£
, 
ouç
, 
md_Àn
);

824 
	`INCPTR
(
md_Àn
, 
ouç
);

826 
	`BCOPY
(
c°©e
->
ª•_«me
, 
ouç
, 
«me_Àn
);

829 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

831 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_RESPONSE
;

832 
	`TIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
, c°©e->
timeouâime
);

833 ++
c°©e
->
ª•_å™smôs
;

834 
	}
}

837 *
	gCh≠Codíames
[] = {

844 
Ch≠PrötPkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

846 
code
, 
id
, 
Àn
;

847 
˛í
, 
∆í
;

848 
u_ch¨
 
x
;

850 i‡(
∂í
 < 
CHAP_HEADERLEN
) {

853 
	`GETCHAR
(
code
, 
p
);

854 
	`GETCHAR
(
id
, 
p
);

855 
	`GETSHORT
(
Àn
, 
p
);

856 i‡(
Àn
 < 
CHAP_HEADERLEN
 ||Üí > 
∂í
) {

859 i‡(
code
 >1 && codê<(
Ch≠Codíames
) / (*)) {

860 
	`¥öãr
(
¨g
, " %s", 
Ch≠Codíames
[
code
-1]);

862 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

864 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

865 
Àn
 -
CHAP_HEADERLEN
;

866 
code
) {

867 
CHAP_CHALLENGE
:

868 
CHAP_RESPONSE
:

869 i‡(
Àn
 < 1) {

872 
˛í
 = 
p
[0];

873 i‡(
Àn
 < 
˛í
 + 1) {

876 ++
p
;

877 
∆í
 = 
Àn
 - 
˛í
 - 1;

878 
	`¥öãr
(
¨g
, " <");

879 ; 
˛í
 > 0; --clen) {

880 
	`GETCHAR
(
x
, 
p
);

881 
	`¥öãr
(
¨g
, "%.2x", 
x
);

883 
	`¥öãr
(
¨g
, ">,Çamê%.*Z", 
∆í
, 
p
);

885 
CHAP_FAILURE
:

886 
CHAP_SUCCESS
:

887 
	`¥öãr
(
¨g
, " %.*Z", 
Àn
, 
p
);

890 
˛í
 = 
Àn
; clen > 0; --clen) {

891 
	`GETCHAR
(
x
, 
p
);

892 
	`¥öãr
(
¨g
, " %.2x", 
x
);

896  
Àn
 + 
CHAP_HEADERLEN
;

897 
	}
}

	@netif/ppp/chap.h

68 #i‚de‡
CHAP_H


69 
	#CHAP_H


	)

76 
	#CHAP_HEADERLEN
 4

	)

82 
	#CHAP_DIGEST_MD5
 5

	)

83 
	#MD5_SIGNATURE_SIZE
 16

	)

84 
	#CHAP_MICROSOFT
 0x80

	)

85 
	#MS_CHAP_RESPONSE_LEN
 49

	)

87 
	#CHAP_CHALLENGE
 1

	)

88 
	#CHAP_RESPONSE
 2

	)

89 
	#CHAP_SUCCESS
 3

	)

90 
	#CHAP_FAILURE
 4

	)

95 
	#MIN_CHALLENGE_LENGTH
 32

	)

96 
	#MAX_CHALLENGE_LENGTH
 64

	)

97 
	#MAX_RESPONSE_LENGTH
 64

	)

102 
	#CHAPCS_INITIAL
 0

	)

103 
	#CHAPCS_CLOSED
 1

	)

104 
	#CHAPCS_PENDING
 2

	)

105 
	#CHAPCS_LISTEN
 3

	)

106 
	#CHAPCS_RESPONSE
 4

	)

107 
	#CHAPCS_OPEN
 5

	)

112 
	#CHAPSS_INITIAL
 0

	)

113 
	#CHAPSS_CLOSED
 1

	)

114 
	#CHAPSS_PENDING
 2

	)

115 
	#CHAPSS_INITIAL_CHAL
 3

	)

116 
	#CHAPSS_OPEN
 4

	)

117 
	#CHAPSS_RECHALLENGE
 5

	)

118 
	#CHAPSS_BADAUTH
 6

	)

128 
	sch≠_°©e
 {

129 
	munô
;

130 
	m˛õ¡°©e
;

131 
	m£rvî°©e
;

132 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

133 
u_ch¨
 
	mchÆ_Àn
;

134 
u_ch¨
 
	mchÆ_id
;

135 
u_ch¨
 
	mchÆ_ty≥
;

136 
u_ch¨
 
	mid
;

137 *
	mchÆ_«me
;

138 
	mchÆ_öãrvÆ
;

139 
	mtimeouâime
;

140 
	mmax_å™smôs
;

141 
	mchÆ_å™smôs
;

142 
	mª•_å™smôs
;

143 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

144 
u_ch¨
 
	mª•_Àngth
;

145 
u_ch¨
 
	mª•_id
;

146 
u_ch¨
 
	mª•_ty≥
;

147 *
	mª•_«me
;

148 } 
	tch≠_°©e
;

154 
ch≠_°©e
 
ch≠
[];

156 
¥Ÿít
 
ch≠_¥Ÿít
;

163 
Ch≠AuthWôhPìr
 (, *, );

164 
Ch≠AuthPìr
 (, *, );

	@netif/ppp/chpms.c

67 
	#USE_CRYPT


	)

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
MSCHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"md4.h
"

79 #i‚de‡
USE_CRYPT


80 
	~"des.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

95 
u_ch¨
 
	mLANM™Re•
[24];

96 
u_ch¨
 
	mNTRe•
[24];

97 
u_ch¨
 
	mU£NT
;

98 } 
	tMS_Ch≠Re•⁄£
;

109 
£tkey
(const *);

110 
í¸y±
(*, );

112 
DesEn¸y±
 (
u_ch¨
 *, u_char *, u_char *);

113 
MakeKey
 (
u_ch¨
 *, u_char *);

115 #ifde‡
USE_CRYPT


116 
Ex∑nd
 (
u_ch¨
 *, u_char *);

117 
Cﬁœp£
 (
u_ch¨
 *, u_char *);

120 
ChÆÀngeRe•⁄£
(

121 
u_ch¨
 *
chÆÀnge
,

122 
u_ch¨
 *
pwHash
,

123 
u_ch¨
 *
ª•⁄£


125 
Ch≠MS_NT
(

126 *
rchÆÀnge
,

127 
rchÆÀnge_Àn
,

128 *
£¸ë
,

129 
£¸ë_Àn
,

130 
MS_Ch≠Re•⁄£
 *
ª•⁄£


132 
u_ch¨
 
Gë7Bôs
(

133 
u_ch¨
 *
öput
,

134 
°¨tBô


142 
	$Ch≠MS
–
ch≠_°©e
 *
c°©e
, *
rchÆÀnge
, 
rchÆÀnge_Àn
, *
£¸ë
, 
£¸ë_Àn
)

144 
MS_Ch≠Re•⁄£
 
ª•⁄£
;

145 #ifde‡
MSLANMAN


146 
ms_œnm™
;

150 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠MS: se¸ë i†'%.*s'\n", 
£¸ë_Àn
, 
£¸ë
));

152 
	`BZERO
(&
ª•⁄£
, (response));

155 
	`Ch≠MS_NT
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

157 #ifde‡
MSLANMAN


158 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

161 
ª•⁄£
.
U£NT
 = !
ms_œnm™
;

163 
ª•⁄£
.
U£NT
 = 1;

166 
	`BCOPY
(&
ª•⁄£
, 
c°©e
->ª•⁄£, 
MS_CHAP_RESPONSE_LEN
);

167 
c°©e
->
ª•_Àngth
 = 
MS_CHAP_RESPONSE_LEN
;

168 
	}
}

175 
	$ChÆÀngeRe•⁄£
–
u_ch¨
 *
chÆÀnge
,

176 
u_ch¨
 *
pwHash
,

177 
u_ch¨
 *
ª•⁄£
 )

179 
ZPassw‹dHash
[21];

181 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

182 
	`BCOPY
(
pwHash
, 
ZPassw‹dHash
, 16);

185 
	`log_∑ckë
(
ZPassw‹dHash
, (ZPassw‹dHash), "ChÆÀngeRe•⁄£ - ZPassw‹dHash", 
LOG_DEBUG
);

188 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 0, 
ª•⁄£
 + 0);

189 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 7, 
ª•⁄£
 + 8);

190 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 14, 
ª•⁄£
 + 16);

193 
	`log_∑ckë
(
ª•⁄£
, 24, "ChÆÀngeRe•⁄£ -Ñe•⁄£", 
LOG_DEBUG
);

195 
	}
}

198 #ifde‡
USE_CRYPT


200 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

201 
u_ch¨
 *
key
,

202 
u_ch¨
 *
cùhî
 )

204 
u_ch¨
 
des_key
[8];

205 
u_ch¨
 
¸y±_key
[66];

206 
u_ch¨
 
des_öput
[66];

208 
	`MakeKey
(
key
, 
des_key
);

210 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

211 
	`£tkey
(
¸y±_key
);

214 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

215 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

218 
	`Ex∑nd
(
˛ór
, 
des_öput
);

219 
	`í¸y±
(
des_öput
, 0);

220 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

223 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

224 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

226 
	}
}

231 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

232 
u_ch¨
 *
key
,

233 
u_ch¨
 *
cùhî
 )

235 
des_cblock
 
des_key
;

236 
des_key_scheduÀ
 
key_scheduÀ
;

238 
	`MakeKey
(
key
, 
des_key
);

240 
	`des_£t_key
(&
des_key
, 
key_scheduÀ
);

243 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

244 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

247 
	`des_ecb_í¸y±
((
des_cblock
 *)
˛ór
, (des_cblock *)
cùhî
, 
key_scheduÀ
, 1);

250 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

251 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

253 
	}
}

258 
u_ch¨


259 
	$Gë7Bôs
–
u_ch¨
 *
öput
, 
°¨tBô
)

261 
w‹d
;

263 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

264 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

266 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

268  
w‹d
 & 0xFE;

269 
	}
}

271 #ifde‡
USE_CRYPT


278 
	$Ex∑nd
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

280 
j
, 
c
;

281 
i
;

283 
i
 = 0; i < 64; 
ö
++){

284 
c
 = *
ö
;

285 
j
 = 7; j >= 0; j--) {

286 *
out
++ = (
c
 >> 
j
) & 01;

288 
i
 += 8;

290 
	}
}

295 
	$Cﬁœp£
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

297 
j
;

298 
i
;

299 
c
;

301 
i
 = 0; i < 64; i +8, 
out
++) {

302 
c
 = 0;

303 
j
 = 7; j >0; j--, 
ö
++) {

304 
c
 |*
ö
 << 
j
;

306 *
out
 = 
c
 & 0xff;

308 
	}
}

312 
	$MakeKey
–
u_ch¨
 *
key
,

313 
u_ch¨
 *
des_key
 )

315 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

316 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

317 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

318 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

319 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

320 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

321 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

322 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

324 #i‚de‡
USE_CRYPT


325 
	`des_£t_odd_∑rôy
((
des_cblock
 *)
des_key
);

329 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",

330 
key
[0], key[1], key[2], key[3], key[4], key[5], key[6]));

331 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

332 
des_key
[0], des_key[1], des_key[2], des_key[3], des_key[4], des_key[5], des_key[6], des_key[7]));

334 
	}
}

337 
	$Ch≠MS_NT
–*
rchÆÀnge
,

338 
rchÆÀnge_Àn
,

339 *
£¸ë
,

340 
£¸ë_Àn
,

341 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

343 
i
;

344 
MD°ru˘
 
md4C⁄ãxt
;

345 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

346 
low_byã_fú°
 = -1;

350 
	`BZERO
(
unicodePassw‹d
, (unicodePassword));

351 
i
 = 0; i < 
£¸ë_Àn
; i++) {

352 
unicodePassw‹d
[
i
 * 2] = (
u_ch¨
)
£¸ë
[i];

354 
	`MDbegö
(&
md4C⁄ãxt
);

355 
	`MDupd©e
(&
md4C⁄ãxt
, 
unicodePassw‹d
, 
£¸ë_Àn
 * 2 * 8);

357 i‡(
low_byã_fú°
 == -1) {

358 
low_byã_fú°
 = (
	`ht⁄s
(()1) != 1);

360 i‡(
low_byã_fú°
 == 0) {

361 
	`MDªvî£
((
u_l⁄g
 *)&
md4C⁄ãxt
);

364 
	`MDupd©e
(&
md4C⁄ãxt
, 
NULL
, 0);

366 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, (*)
md4C⁄ãxt
.
buf„r
, 
ª•⁄£
->
NTRe•
);

367 
	}
}

369 #ifde‡
MSLANMAN


370 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

373 
	$Ch≠MS_LANM™
–*
rchÆÀnge
,

374 
rchÆÀnge_Àn
,

375 *
£¸ë
,

376 
£¸ë_Àn
,

377 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

379 
i
;

380 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

381 
u_ch¨
 
Passw‹dHash
[16];

384 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

385 
i
 = 0; i < 
£¸ë_Àn
; i++) {

386 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

388 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 0, 
Passw‹dHash
 + 0 );

389 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 7, 
Passw‹dHash
 + 8 );

390 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
ª•⁄£
->
LANM™Re•
);

391 
	}
}

	@netif/ppp/chpms.h

57 #i‚de‡
CHPMS_H


58 
	#CHPMS_H


	)

60 
	#MAX_NT_PASSWORD
 256

	)

62 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@netif/ppp/fsm.c

58 
	~"lwù/›t.h
"

60 #i‡
PPP_SUPPORT


62 
	~"µp.h
"

63 
	~"µpdebug.h
"

65 
	~"fsm.h
"

72 #i‡
PPP_DEBUG


74 c⁄° *
	gµ≥º_°ªº
[] = {

97 
fsm_timeout
 (*);

98 
fsm_rc⁄‰eq
 (
fsm
 *, 
u_ch¨
, u_char *, );

99 
fsm_rc⁄Áck
 (
fsm
 *, , 
u_ch¨
 *, );

100 
fsm_rc⁄‚akªj
 (
fsm
 *, , , 
u_ch¨
 *, );

101 
fsm_πîmªq
 (
fsm
 *, , 
u_ch¨
 *, );

102 
fsm_πîmack
 (
fsm
 *);

103 
fsm_rcodîej
 (
fsm
 *, 
u_ch¨
 *, );

104 
fsm_sc⁄‰eq
 (
fsm
 *, );

106 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

117 
	g≥î_mru
[
NUM_PPP
];

130 
	$fsm_öô
(
fsm
 *
f
)

132 
f
->
°©e
 = 
LS_INITIAL
;

133 
f
->
Êags
 = 0;

134 
f
->
id
 = 0;

135 
f
->
timeouâime
 = 
FSM_DEFTIMEOUT
;

136 
f
->
maxc⁄‰eqå™smôs
 = 
FSM_DEFMAXCONFREQS
;

137 
f
->
maxãrmå™smôs
 = 
FSM_DEFMAXTERMREQS
;

138 
f
->
max«klo›s
 = 
FSM_DEFMAXNAKLOOPS
;

139 
f
->
ãrm_ªas⁄_Àn
 = 0;

140 
	}
}

147 
	$fsm_lowîup
(
fsm
 *
f
)

149 
ﬁdSèã
 = 
f
->
°©e
;

151 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

153  
f
->
°©e
 ) {

154 
LS_INITIAL
:

155 
f
->
°©e
 = 
LS_CLOSED
;

158 
LS_STARTING
:

159 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

160 
f
->
°©e
 = 
LS_STOPPED
;

163 
	`fsm_sc⁄‰eq
(
f
, 0);

164 
f
->
°©e
 = 
LS_REQSENT
;

169 
	`FSMDEBUG
((
LOG_INFO
, "%s: UpÉvent in state %d (%s)!\n",

170 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

173 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerup state %d (%s) -> %d (%s)\n",

174 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

175 
	}
}

184 
	$fsm_lowîdown
(
fsm
 *
f
)

186 
ﬁdSèã
 = 
f
->
°©e
;

188 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

190  
f
->
°©e
 ) {

191 
LS_CLOSED
:

192 
f
->
°©e
 = 
LS_INITIAL
;

195 
LS_STOPPED
:

196 
f
->
°©e
 = 
LS_STARTING
;

197 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

198 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

202 
LS_CLOSING
:

203 
f
->
°©e
 = 
LS_INITIAL
;

204 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

207 
LS_STOPPING
:

208 
LS_REQSENT
:

209 
LS_ACKRCVD
:

210 
LS_ACKSENT
:

211 
f
->
°©e
 = 
LS_STARTING
;

212 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

215 
LS_OPENED
:

216 if–
f
->
ˇŒbacks
->
down
 ) {

217 (*
f
->
ˇŒbacks
->
down
)(f);

219 
f
->
°©e
 = 
LS_STARTING
;

223 
	`FSMDEBUG
((
LOG_INFO
, "%s: DownÉvent in state %d (%s)!\n",

224 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

227 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerdown state %d (%s) -> %d (%s)\n",

228 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

229 
	}
}

236 
	$fsm_›í
(
fsm
 *
f
)

238 
ﬁdSèã
 = 
f
->
°©e
;

240 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

242  
f
->
°©e
 ) {

243 
LS_INITIAL
:

244 
f
->
°©e
 = 
LS_STARTING
;

245 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

246 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

250 
LS_CLOSED
:

251 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

252 
f
->
°©e
 = 
LS_STOPPED
;

255 
	`fsm_sc⁄‰eq
(
f
, 0);

256 
f
->
°©e
 = 
LS_REQSENT
;

260 
LS_CLOSING
:

261 
f
->
°©e
 = 
LS_STOPPING
;

263 
LS_STOPPED
:

264 
LS_OPENED
:

265 if–
f
->
Êags
 & 
OPT_RESTART
 ) {

266 
	`fsm_lowîdown
(
f
);

267 
	`fsm_lowîup
(
f
);

272 
	`FSMDEBUG
((
LOG_INFO
, "%s: open state %d (%s) -> %d (%s)\n",

273 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

274 
	}
}

284 
	$fsm_˛o£
(
fsm
 *
f
, *
ªas⁄
)

286 
ﬁdSèã
 = 
f
->
°©e
;

288 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

290 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

291 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
? 0: 
	`°æí
(reason));

292  
f
->
°©e
 ) {

293 
LS_STARTING
:

294 
f
->
°©e
 = 
LS_INITIAL
;

296 
LS_STOPPED
:

297 
f
->
°©e
 = 
LS_CLOSED
;

299 
LS_STOPPING
:

300 
f
->
°©e
 = 
LS_CLOSING
;

303 
LS_REQSENT
:

304 
LS_ACKRCVD
:

305 
LS_ACKSENT
:

306 
LS_OPENED
:

307 if–
f
->
°©e
 !
LS_OPENED
 ) {

308 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

309 } if–
f
->
ˇŒbacks
->
down
 ) {

310 (*
f
->
ˇŒbacks
->
down
)(f);

313 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

314 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

315 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

316 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

317 --
f
->
ªå™smôs
;

319 
f
->
°©e
 = 
LS_CLOSING
;

323 
	`FSMDEBUG
((
LOG_INFO
, "%s: closeÑeason=%s state %d (%s) -> %d (%s)\n",

324 
	`PROTO_NAME
(
f
), 
ªas⁄
, 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

325 
	}
}

334 
	$fsm_sd©a
–
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, u_ch¨ *
d©a
, 
d©Æí
)

336 
u_ch¨
 *
ouç
;

337 
ouéí
;

340 
ouç
 = 
ouçackë_buf
[
f
->
unô
];

341 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
) {

342 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

344 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
) {

345 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

347 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

348 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

349 
	`PUTCHAR
(
code
, 
ouç
);

350 
	`PUTCHAR
(
id
, 
ouç
);

351 
	`PUTSHORT
(
ouéí
, 
ouç
);

352 
	`µpWrôe
(
f
->
unô
, 
ouçackë_buf
[f->unô], 
ouéí
 + 
PPP_HDRLEN
);

353 
	`FSMDEBUG
((
LOG_INFO
, "fsm_sdata(%s): Sent code %d,%d,%d.\n",

354 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
ouéí
));

355 
	}
}

362 
	$fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
)

364 
u_ch¨
 *
öp
 = 
ö∑ckë
;

365 
u_ch¨
 
code
, 
id
;

366 
Àn
;

372 i‡(
l
 < 
HEADERLEN
) {

373 
	`FSMDEBUG
((
LOG_WARNING
, "fsm_input(%x): Rcvd short header.\n",

374 
f
->
¥Ÿocﬁ
));

377 
	`GETCHAR
(
code
, 
öp
);

378 
	`GETCHAR
(
id
, 
öp
);

379 
	`GETSHORT
(
Àn
, 
öp
);

380 i‡(
Àn
 < 
HEADERLEN
) {

381 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd illegalÜength.\n",

382 
f
->
¥Ÿocﬁ
));

385 i‡(
Àn
 > 
l
) {

386 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd shortÖacket.\n",

387 
f
->
¥Ÿocﬁ
));

390 
Àn
 -
HEADERLEN
;

392 if–
f
->
°©e
 =
LS_INITIAL
 || f->°©ê=
LS_STARTING
 ) {

393 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): RcvdÖacket in state %d (%s).\n",

394 
f
->
¥Ÿocﬁ
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

397 
	`FSMDEBUG
((
LOG_INFO
, "fsm_öput(%s):%d,%d,%d\n", 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
l
));

401 
code
) {

402 
CONFREQ
:

403 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

406 
CONFACK
:

407 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

410 
CONFNAK
:

411 
CONFREJ
:

412 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

415 
TERMREQ
:

416 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

419 
TERMACK
:

420 
	`fsm_πîmack
(
f
);

423 
CODEREJ
:

424 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

428 if–!
f
->
ˇŒbacks
->
extcode
 ||

429 !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) ) {

430 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

434 
	}
}

443 
	$fsm_¥Ÿªje˘
(
fsm
 *
f
)

445  
f
->
°©e
 ) {

446 
LS_CLOSING
:

447 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

449 
LS_CLOSED
:

450 
f
->
°©e
 = 
LS_CLOSED
;

451 if–
f
->
ˇŒbacks
->
föished
 ) {

452 (*
f
->
ˇŒbacks
->
föished
)(f);

456 
LS_STOPPING
:

457 
LS_REQSENT
:

458 
LS_ACKRCVD
:

459 
LS_ACKSENT
:

460 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

462 
LS_STOPPED
:

463 
f
->
°©e
 = 
LS_STOPPED
;

464 if–
f
->
ˇŒbacks
->
föished
 ) {

465 (*
f
->
ˇŒbacks
->
föished
)(f);

469 
LS_OPENED
:

470 if–
f
->
ˇŒbacks
->
down
 ) {

471 (*
f
->
ˇŒbacks
->
down
)(f);

474 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

475 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

476 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

477 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

478 --
f
->
ªå™smôs
;

480 
f
->
°©e
 = 
LS_STOPPING
;

484 
	`FSMDEBUG
((
LOG_INFO
, "%s: Protocol-rejectÉvent in state %d (%s)!\n",

485 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

487 
	}
}

501 
	$fsm_timeout
(*
¨g
)

503 
fsm
 *
f
 = (fsm *Ë
¨g
;

505 
f
->
°©e
) {

506 
LS_CLOSING
:

507 
LS_STOPPING
:

508 if–
f
->
ªå™smôs
 <= 0 ) {

509 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Terminate-Request state=%d (%s)\n",

510 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

514 
f
->
°©e
 = (f->°©ê=
LS_CLOSING
)? 
LS_CLOSED
: 
LS_STOPPED
;

515 if–
f
->
ˇŒbacks
->
föished
 ) {

516 (*
f
->
ˇŒbacks
->
föished
)(f);

519 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Terminate-Requests state=%d (%s)\n",

520 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

522 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

523 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

524 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

525 --
f
->
ªå™smôs
;

529 
LS_REQSENT
:

530 
LS_ACKRCVD
:

531 
LS_ACKSENT
:

532 i‡(
f
->
ªå™smôs
 <= 0) {

533 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Config-Requests state=%d (%s)\n",

534 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

535 
f
->
°©e
 = 
LS_STOPPED
;

536 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 ) {

537 (*
f
->
ˇŒbacks
->
föished
)(f);

540 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Config-Request state=%d (%s)\n",

541 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

543 i‡(
f
->
ˇŒbacks
->
ªå™smô
) {

544 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

546 
	`fsm_sc⁄‰eq
(
f
, 1);

547 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

548 
f
->
°©e
 = 
LS_REQSENT
;

554 
	`FSMDEBUG
((
LOG_INFO
, "%s: TimeoutÉvent in state %d (%s)!\n",

555 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

557 
	}
}

564 
	$fsm_rc⁄‰eq
(
fsm
 *
f
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

566 
code
, 
ªje˘_if_dißgªe
;

568 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n",

569 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

570  
f
->
°©e
 ) {

571 
LS_CLOSED
:

573 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

575 
LS_CLOSING
:

576 
LS_STOPPING
:

579 
LS_OPENED
:

581 if–
f
->
ˇŒbacks
->
down
 ) {

582 (*
f
->
ˇŒbacks
->
down
)(f);

584 
	`fsm_sc⁄‰eq
(
f
, 0);

587 
LS_STOPPED
:

589 
	`fsm_sc⁄‰eq
(
f
, 0);

590 
f
->
°©e
 = 
LS_REQSENT
;

598 i‡(
f
->
ˇŒbacks
->
ªqci
) {

599 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

600 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

601 } i‡(
Àn
) {

602 
code
 = 
CONFREJ
;

604 
code
 = 
CONFACK
;

608 
	`fsm_sd©a
(
f
, (
u_ch¨
)
code
, 
id
, 
öp
, 
Àn
);

610 i‡(
code
 =
CONFACK
) {

611 i‡(
f
->
°©e
 =
LS_ACKRCVD
) {

612 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

613 
f
->
°©e
 = 
LS_OPENED
;

614 i‡(
f
->
ˇŒbacks
->
up
) {

615 (*
f
->
ˇŒbacks
->
up
)(f);

618 
f
->
°©e
 = 
LS_ACKSENT
;

620 
f
->
«klo›s
 = 0;

623 i‡(
f
->
°©e
 !
LS_ACKRCVD
) {

624 
f
->
°©e
 = 
LS_REQSENT
;

626 if–
code
 =
CONFNAK
 ) {

627 ++
f
->
«klo›s
;

630 
	}
}

637 
	$fsm_rc⁄Áck
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

639 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",

640 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

642 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

645 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
): (len == 0)) ) {

647 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad Ack (length %d)\n",

648 
	`PROTO_NAME
(
f
), 
Àn
));

651 
f
->
£í_ack
 = 1;

653 
f
->
°©e
) {

654 
LS_CLOSED
:

655 
LS_STOPPED
:

656 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

659 
LS_REQSENT
:

660 
f
->
°©e
 = 
LS_ACKRCVD
;

661 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

664 
LS_ACKRCVD
:

666 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

667 
	`fsm_sc⁄‰eq
(
f
, 0);

668 
f
->
°©e
 = 
LS_REQSENT
;

671 
LS_ACKSENT
:

672 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

673 
f
->
°©e
 = 
LS_OPENED
;

674 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

675 i‡(
f
->
ˇŒbacks
->
up
) {

676 (*
f
->
ˇŒbacks
->
up
)(f);

680 
LS_OPENED
:

682 i‡(
f
->
ˇŒbacks
->
down
) {

683 (*
f
->
ˇŒbacks
->
down
)(f);

685 
	`fsm_sc⁄‰eq
(
f
, 0);

686 
f
->
°©e
 = 
LS_REQSENT
;

689 
	}
}

696 
	$fsm_rc⁄‚akªj
(
fsm
 *
f
, 
code
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

698 (*
¥oc
Ë(
fsm
 *, 
u_ch¨
 *, );

699 
ªt
;

701 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",

702 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

704 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

707 
¥oc
 = (
code
 =
CONFNAK
)? 
f
->
ˇŒbacks
->
«kci
: f->ˇŒbacks->
ªjci
;

708 i‡(!
¥oc
 || !((
ªt
 = 
	`¥oc
(
f
, 
öp
, 
Àn
)))) {

710 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad %s (length %d)\n",

711 
	`PROTO_NAME
(
f
), (
code
==
CONFNAK
? "Nak": "ªje˘"), 
Àn
));

714 
f
->
£í_ack
 = 1;

716 
f
->
°©e
) {

717 
LS_CLOSED
:

718 
LS_STOPPED
:

719 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

722 
LS_REQSENT
:

723 
LS_ACKSENT
:

725 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

726 i‡(
ªt
 < 0) {

727 
f
->
°©e
 = 
LS_STOPPED
;

729 
	`fsm_sc⁄‰eq
(
f
, 0);

733 
LS_ACKRCVD
:

735 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

736 
	`fsm_sc⁄‰eq
(
f
, 0);

737 
f
->
°©e
 = 
LS_REQSENT
;

740 
LS_OPENED
:

742 i‡(
f
->
ˇŒbacks
->
down
) {

743 (*
f
->
ˇŒbacks
->
down
)(f);

745 
	`fsm_sc⁄‰eq
(
f
, 0);

746 
f
->
°©e
 = 
LS_REQSENT
;

749 
	}
}

756 
	$fsm_πîmªq
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
p
, 
Àn
)

758 
	`LWIP_UNUSED_ARG
(
p
);

760 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",

761 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

763 
f
->
°©e
) {

764 
LS_ACKRCVD
:

765 
LS_ACKSENT
:

766 
f
->
°©e
 = 
LS_REQSENT
;

769 
LS_OPENED
:

770 i‡(
Àn
 > 0) {

771 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖì∏(%x)\n", 
	`PROTO_NAME
(
f
), 
p
));

773 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖìr\n", 
	`PROTO_NAME
(
f
)));

775 i‡(
f
->
ˇŒbacks
->
down
) {

776 (*
f
->
ˇŒbacks
->
down
)(f);

778 
f
->
ªå™smôs
 = 0;

779 
f
->
°©e
 = 
LS_STOPPING
;

780 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

784 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

785 
	}
}

792 
	$fsm_πîmack
(
fsm
 *
f
)

794 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermack(%s): state=%d (%s)\n",

795 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

797 
f
->
°©e
) {

798 
LS_CLOSING
:

799 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

800 
f
->
°©e
 = 
LS_CLOSED
;

801 if–
f
->
ˇŒbacks
->
föished
 ) {

802 (*
f
->
ˇŒbacks
->
föished
)(f);

806 
LS_STOPPING
:

807 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

808 
f
->
°©e
 = 
LS_STOPPED
;

809 if–
f
->
ˇŒbacks
->
föished
 ) {

810 (*
f
->
ˇŒbacks
->
föished
)(f);

814 
LS_ACKRCVD
:

815 
f
->
°©e
 = 
LS_REQSENT
;

818 
LS_OPENED
:

819 i‡(
f
->
ˇŒbacks
->
down
) {

820 (*
f
->
ˇŒbacks
->
down
)(f);

822 
	`fsm_sc⁄‰eq
(
f
, 0);

825 
	}
}

832 
	$fsm_rcodîej
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

834 
u_ch¨
 
code
, 
id
;

836 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej(%s): state=%d (%s)\n",

837 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

839 i‡(
Àn
 < 
HEADERLEN
) {

840 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej: Rcvd short Code-RejectÖacket!\n"));

843 
	`GETCHAR
(
code
, 
öp
);

844 
	`GETCHAR
(
id
, 
öp
);

845 
	`FSMDEBUG
((
LOG_WARNING
, "%s: Rcvd Code-Reject for code %d, id %d\n",

846 
	`PROTO_NAME
(
f
), 
code
, 
id
));

848 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

849 
f
->
°©e
 = 
LS_REQSENT
;

851 
	}
}

858 
	$fsm_sc⁄‰eq
(
fsm
 *
f
, 
ªå™smô
)

860 
u_ch¨
 *
ouç
;

861 
cûí
;

863 if–
f
->
°©e
 !
LS_REQSENT
 && f->°©ê!
LS_ACKRCVD
 && f->°©ê!
LS_ACKSENT
 ) {

865 if–
f
->
ˇŒbacks
->
ª£tci
 ) {

866 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

868 
f
->
«klo›s
 = 0;

871 if–!
ªå™smô
 ) {

873 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

874 
f
->
ªqid
 = ++f->
id
;

877 
f
->
£í_ack
 = 0;

882 
ouç
 = 
ouçackë_buf
[
f
->
unô
] + 
PPP_HDRLEN
 + 
HEADERLEN
;

883 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ) {

884 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

885 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
 ) {

886 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

888 i‡(
f
->
ˇŒbacks
->
addci
) {

889 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

892 
cûí
 = 0;

896 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

899 --
f
->
ªå™smôs
;

900 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

902 
	`FSMDEBUG
((
LOG_INFO
, "%s: sending Configure-Request, id %d\n",

903 
	`PROTO_NAME
(
f
), f->
ªqid
));

904 
	}
}

	@netif/ppp/fsm.h

54 #i‚de‡
FSM_H


55 
	#FSM_H


	)

63 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#CONFREQ
 1

	)

70 
	#CONFACK
 2

	)

71 
	#CONFNAK
 3

	)

72 
	#CONFREJ
 4

	)

73 
	#TERMREQ
 5

	)

74 
	#TERMACK
 6

	)

75 
	#CODEREJ
 7

	)

80 
	#LS_INITIAL
 0

	)

81 
	#LS_STARTING
 1

	)

82 
	#LS_CLOSED
 2

	)

83 
	#LS_STOPPED
 3

	)

84 
	#LS_CLOSING
 4

	)

85 
	#LS_STOPPING
 5

	)

86 
	#LS_REQSENT
 6

	)

87 
	#LS_ACKRCVD
 7

	)

88 
	#LS_ACKSENT
 8

	)

89 
	#LS_OPENED
 9

	)

94 
	#OPT_PASSIVE
 1

	)

95 
	#OPT_RESTART
 2

	)

96 
	#OPT_SILENT
 4

	)

105 
	sfsm
 {

106 
	munô
;

107 
u_sh‹t
 
	m¥Ÿocﬁ
;

108 
	m°©e
;

109 
	mÊags
;

110 
u_ch¨
 
	mid
;

111 
u_ch¨
 
	mªqid
;

112 
u_ch¨
 
	m£í_ack
;

113 
	mtimeouâime
;

114 
	mmaxc⁄‰eqå™smôs
;

115 
	mªå™smôs
;

116 
	mmaxãrmå™smôs
;

117 
	m«klo›s
;

118 
	mmax«klo›s
;

119 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

120 * 
	mãrm_ªas⁄
;

121 
	mãrm_ªas⁄_Àn
;

122 } 
	tfsm
;

125 
	sfsm_ˇŒbacks
 {

126 (*
	mª£tci
)(
	mfsm
*);

127 (*
	mcûí
)(
	mfsm
*);

128 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

129 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

130 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

131 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

132 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

133 (*
	mup
)(
	mfsm
*);

134 (*
	mdown
)(
	mfsm
*);

135 (*
	m°¨tög
)(
	mfsm
*);

136 (*
	mföished
)(
	mfsm
*);

137 (*
	m¥Ÿªje˘
)();

138 (*
	mªå™smô
)(
	mfsm
*);

139 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

140 *
	m¥Ÿo_«me
;

141 } 
	tfsm_ˇŒbacks
;

150 
≥î_mru
[];

160 
fsm_öô
 (
fsm
*);

161 
fsm_lowîup
 (
fsm
*);

162 
fsm_lowîdown
 (
fsm
*);

163 
fsm_›í
 (
fsm
*);

164 
fsm_˛o£
 (
fsm
*, *);

165 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

166 
fsm_¥Ÿªje˘
 (
fsm
*);

167 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

	@netif/ppp/ipcp.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"µpdebug.h
"

59 
	~"auth.h
"

60 
	~"fsm.h
"

61 
	~"vj.h
"

62 
	~"ù˝.h
"

64 
	~<°rög.h
>

74 
	#CILEN_VOID
 2

	)

75 
	#CILEN_COMPRESS
 4

	)

76 
	#CILEN_VJ
 6

	)

77 
	#CILEN_ADDR
 6

	)

78 
	#CILEN_ADDRS
 10

	)

88 
ù˝_ª£tci
 (
fsm
 *);

89 
ù˝_cûí
 (
fsm
 *);

90 
ù˝_addci
 (
fsm
 *, 
u_ch¨
 *, *);

91 
ù˝_ackci
 (
fsm
 *, 
u_ch¨
 *, );

92 
ù˝_«kci
 (
fsm
 *, 
u_ch¨
 *, );

93 
ù˝_ªjci
 (
fsm
 *, 
u_ch¨
 *, );

94 
ù˝_ªqci
 (
fsm
 *, 
u_ch¨
 *, *, );

95 
ù˝_up
 (
fsm
 *);

96 
ù˝_down
 (
fsm
 *);

98 
ù˝_s¸ùt
 (
fsm
 *, *);

100 
ù˝_föished
 (
fsm
 *);

105 
ù˝_öô
 ();

106 
ù˝_›í
 ();

107 
ù˝_˛o£
 (, *);

108 
ù˝_lowîup
 ();

109 
ù˝_lowîdown
 ();

110 
ù˝_öput
 (, 
u_ch¨
 *, );

111 
ù˝_¥Ÿªj
 ();

113 
ù˝_˛ór_addrs
 ();

115 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

116 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

124 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

125 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

126 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

127 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

129 
fsm
 
	gù˝_fsm
[
NUM_PPP
];

131 
¥Ÿít
 
	gù˝_¥Ÿít
 = {

132 
PPP_IPCP
,

133 
ù˝_öô
,

134 
ù˝_öput
,

135 
ù˝_¥Ÿªj
,

136 
ù˝_lowîup
,

137 
ù˝_lowîdown
,

138 
ù˝_›í
,

139 
ù˝_˛o£
,

141 
ù˝_¥öçkt
,

142 
NULL
,

147 
ù_check_›ti⁄s
,

148 
NULL
,

149 
ù_a˘ive_pkt


159 
	gcis_ª˚ived
[
NUM_PPP
];

160 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

162 
fsm_ˇŒbacks
 
	gù˝_ˇŒbacks
 = {

163 
ù˝_ª£tci
,

164 
ù˝_cûí
,

165 
ù˝_addci
,

166 
ù˝_ackci
,

167 
ù˝_«kci
,

168 
ù˝_ªjci
,

169 
ù˝_ªqci
,

170 
ù˝_up
,

171 
ù˝_down
,

172 
NULL
,

173 
ù˝_föished
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

192 
	$_öë_¡ﬂ
(
u32_t
 
n
)

194 
ö_addr
 
ü
;

195 
ü
.
s_addr
 = 
n
;

196  
	`öë_¡ﬂ
(
ü
);

197 
	}
}

199 
	#öë_¡ﬂ
 
_öë_¡ﬂ


	)

205 
	$ù˝_öô
(
unô
)

207 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

208 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

209 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

211 
f
->
unô
 = unit;

212 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

213 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

214 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

216 
	`mem£t
(
wo
, 0, (*wo));

217 
	`mem£t
(
ao
, 0, (*ao));

219 
wo
->
√g_addr
 = 1;

220 
wo
->
ouøddr
 = 0;

221 #i‡
VJ_SUPPORT


222 
wo
->
√g_vj
 = 1;

224 
wo
->
√g_vj
 = 0;

226 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

227 
wo
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

228 
wo
->
cÊag
 = 0;

229 
wo
->
deÁu…_rouã
 = 1;

231 
ao
->
√g_addr
 = 1;

232 #i‡
VJ_SUPPORT


233 
ao
->
√g_vj
 = 1;

235 
ao
->
√g_vj
 = 0;

237 
ao
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

238 
ao
->
cÊag
 = 1;

239 
ao
->
deÁu…_rouã
 = 1;

240 
	}
}

247 
	$ù˝_›í
(
unô
)

249 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

250 
	}
}

257 
	$ù˝_˛o£
(
unô
, *
ªas⁄
)

259 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

260 
	}
}

267 
	$ù˝_lowîup
(
unô
)

269 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

270 
	}
}

277 
	$ù˝_lowîdown
(
unô
)

279 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

280 
	}
}

287 
	$ù˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

289 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

290 
	}
}

299 
	$ù˝_¥Ÿªj
(
unô
)

301 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

302 
	}
}

309 
	$ù˝_ª£tci
(
fsm
 *
f
)

311 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

313 
wo
->
ªq_addr
 = wo->
√g_addr
 && 
ù˝_Ælow›ti⁄s
[
f
->
unô
].neg_addr;

314 i‡(
wo
->
ouøddr
 == 0) {

315 
wo
->
ac˚±_loˇl
 = 1;

317 i‡(
wo
->
hißddr
 == 0) {

318 
wo
->
ac˚±_ªmŸe
 = 1;

321 
wo
->
ªq_dns1
 = 
µp_£âögs
.
u£≥îdns
;

322 
wo
->
ªq_dns2
 = 
µp_£âögs
.
u£≥îdns
;

323 
ù˝_gŸ›ti⁄s
[
f
->
unô
] = *
wo
;

324 
cis_ª˚ived
[
f
->
unô
] = 0;

325 
	}
}

332 
	$ù˝_cûí
(
fsm
 *
f
)

334 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

335 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

336 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

338 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

339 
	#LENCIADDR
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_ADDRS
 : 
CILEN_ADDR
Ë: 0)

	)

340 
	#LENCIDNS
(
√g
Ë“eg ? (
CILEN_ADDR
Ë: 0)

	)

346 i‡(
wo
->
√g_addr
 && !
go
->√g_add∏&& !go->
ﬁd_addrs
) {

348 
go
->
√g_addr
 = 1;

349 
go
->
ﬁd_addrs
 = 1;

351 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

353 i‡(
cis_ª˚ived
[
f
->
unô
] == 0) {

355 
go
->
√g_vj
 = 1;

358 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

359 
go
->
√g_vj
 = 1;

360 
go
->
ﬁd_vj
 = 1;

361 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

366  (
	`LENCIADDR
(
go
->
√g_addr
, go->
ﬁd_addrs
) +

367 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

368 
	`LENCIDNS
(
go
->
ªq_dns1
) +

369 
	`LENCIDNS
(
go
->
ªq_dns2
));

370 
	}
}

377 
	$ù˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

379 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

380 
Àn
 = *
À≈
;

382 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

383 i‡(
√g
) { \

384 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

385 i‡(
Àn
 >
vjÀn
) { \

386 
	`PUTCHAR
(
›t
, 
u˝
); \

387 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

388 
	`PUTSHORT
(
vÆ
, 
u˝
); \

389 i‡(!
ﬁd
) { \

390 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

391 
	`PUTCHAR
(
cÊag
, 
u˝
); \

393 
Àn
 -
vjÀn
; \

395 
√g
 = 0; \

397 }

	)

399 
	#ADDCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

400 i‡(
√g
) { \

401 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

402 i‡(
Àn
 >
addæí
) { \

403 
u32_t
 
l
; \

404 
	`PUTCHAR
(
›t
, 
u˝
); \

405 
	`PUTCHAR
(
addæí
, 
u˝
); \

406 
l
 = 
	`¡ohl
(
vÆ1
); \

407 
	`PUTLONG
(
l
, 
u˝
); \

408 i‡(
ﬁd
) { \

409 
l
 = 
	`¡ohl
(
vÆ2
); \

410 
	`PUTLONG
(
l
, 
u˝
); \

412 
Àn
 -
addæí
; \

414 
√g
 = 0; \

416 }

	)

418 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

419 i‡(
√g
) { \

420 i‡(
Àn
 >
CILEN_ADDR
) { \

421 
u32_t
 
l
; \

422 
	`PUTCHAR
(
›t
, 
u˝
); \

423 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

424 
l
 = 
	`¡ohl
(
addr
); \

425 
	`PUTLONG
(
l
, 
u˝
); \

426 
Àn
 -
CILEN_ADDR
; \

428 
√g
 = 0; \

430 }

	)

432 
	`ADDCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

433 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

435 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

436 
go
->
max¶Ÿödex
, go->
cÊag
);

438 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

440 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

442 *
À≈
 -
Àn
;

443 
	}
}

454 
	$ù˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

456 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

457 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

458 
u32_t
 
cû⁄g
;

459 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

467 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

468 i‡(
√g
) { \

469 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

470 i‡((
Àn
 -
vjÀn
) < 0) { \

471 
bad
; \

473 
	`GETCHAR
(
côy≥
, 
p
); \

474 
	`GETCHAR
(
cûí
, 
p
); \

475 i‡(
cûí
 !
vjÀn
 || \

476 
côy≥
 !
›t
) { \

477 
bad
; \

479 
	`GETSHORT
(
cish‹t
, 
p
); \

480 i‡(
cish‹t
 !
vÆ
) { \

481 
bad
; \

483 i‡(!
ﬁd
) { \

484 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

485 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) { \

486 
bad
; \

488 
	`GETCHAR
(
cicÊag
, 
p
); \

489 i‡(
cicÊag
 !
cÊag
) { \

490 
bad
; \

493 }

	)

495 
	#ACKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

496 i‡(
√g
) { \

497 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

498 
u32_t
 
l
; \

499 i‡((
Àn
 -
addæí
) < 0) { \

500 
bad
; \

502 
	`GETCHAR
(
côy≥
, 
p
); \

503 
	`GETCHAR
(
cûí
, 
p
); \

504 i‡(
cûí
 !
addæí
 || \

505 
côy≥
 !
›t
) { \

506 
bad
; \

508 
	`GETLONG
(
l
, 
p
); \

509 
cû⁄g
 = 
	`ht⁄l
(
l
); \

510 i‡(
vÆ1
 !
cû⁄g
) { \

511 
bad
; \

513 i‡(
ﬁd
) { \

514 
	`GETLONG
(
l
, 
p
); \

515 
cû⁄g
 = 
	`ht⁄l
(
l
); \

516 i‡(
vÆ2
 !
cû⁄g
) { \

517 
bad
; \

520 }

	)

522 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

523 i‡(
√g
) { \

524 
u32_t
 
l
; \

525 i‡((
Àn
 -
CILEN_ADDR
) < 0) { \

526 
bad
; \

528 
	`GETCHAR
(
côy≥
, 
p
); \

529 
	`GETCHAR
(
cûí
, 
p
); \

530 i‡(
cûí
 !
CILEN_ADDR
 || \

531 
côy≥
 !
›t
) { \

532 
bad
; \

534 
	`GETLONG
(
l
, 
p
); \

535 
cû⁄g
 = 
	`ht⁄l
(
l
); \

536 i‡(
addr
 !
cû⁄g
) { \

537 
bad
; \

539 }

	)

541 
	`ACKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

542 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

544 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

545 
go
->
max¶Ÿödex
, go->
cÊag
);

547 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

549 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

554 i‡(
Àn
 != 0) {

555 
bad
;

559 
bad
:

560 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_ackci:Ñeceived bad Ack!\n"));

562 
	}
}

574 
	$ù˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

576 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

577 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

578 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

579 
u_sh‹t
 
cish‹t
;

580 
u32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

581 
ù˝_›ti⁄s
 
no
;

582 
ù˝_›ti⁄s
 
åy
;

584 
	`BZERO
(&
no
, (no));

585 
åy
 = *
go
;

592 
	#NAKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
code
) \

593 i‡(
go
->
√g
 && \

594 
Àn
 >(
cûí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
)) && \

595 
p
[1] =
cûí
 && \

596 
p
[0] =
›t
) { \

597 
Àn
 -
cûí
; \

598 
	`INCPTR
(2, 
p
); \

599 
	`GETLONG
(
l
, 
p
); \

600 
cüddr1
 = 
	`ht⁄l
(
l
); \

601 i‡(
ﬁd
) { \

602 
	`GETLONG
(
l
, 
p
); \

603 
cüddr2
 = 
	`ht⁄l
(
l
); \

604 
no
.
ﬁd_addrs
 = 1; \

606 
cüddr2
 = 0; \

608 
no
.
√g
 = 1; \

609 
code
 \

610 }

	)

612 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

613 i‡(
go
->
√g
 && \

614 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

615 
Àn
 >
cûí
 && \

616 
p
[0] =
›t
) { \

617 
Àn
 -
cûí
; \

618 
	`INCPTR
(2, 
p
); \

619 
	`GETSHORT
(
cish‹t
, 
p
); \

620 
no
.
√g
 = 1; \

621 
code
 \

622 }

	)

624 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

625 i‡(
go
->
√g
 && \

626 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

627 
Àn
 >
cûí
 && \

628 
p
[0] =
›t
) { \

629 
Àn
 -
cûí
; \

630 
	`INCPTR
(2, 
p
); \

631 
	`GETLONG
(
l
, 
p
); \

632 
cidnßddr
 = 
	`ht⁄l
(
l
); \

633 
no
.
√g
 = 1; \

634 
code
 \

635 }

	)

641 
	`NAKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
, go->old_addrs,

642 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

643 
åy
.
ouøddr
 = 
cüddr1
;

644 
	`IPCPDEBUG
((
LOG_INFO
, "local IPáddress %s\n",

645 
	`öë_¡ﬂ
(
cüddr1
)));

647 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

648 
åy
.
hißddr
 = 
cüddr2
;

649 
	`IPCPDEBUG
((
LOG_INFO
, "remote IPáddress %s\n",

650 
	`öë_¡ﬂ
(
cüddr2
)));

660 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

661 i‡(
cûí
 =
CILEN_VJ
) {

662 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

663 
	`GETCHAR
(
cicÊag
, 
p
);

664 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

665 
åy
.
ﬁd_vj
 = 0;

666 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
) {

667 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

669 i‡(!
cicÊag
) {

670 
åy
.
cÊag
 = 0;

673 
åy
.
√g_vj
 = 0;

676 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

677 
åy
.
ﬁd_vj
 = 1;

678 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

680 
åy
.
√g_vj
 = 0;

685 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

686 
åy
.
dnßddr
[0] = 
cidnßddr
;

687 
	`IPCPDEBUG
((
LOG_INFO
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

690 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

691 
åy
.
dnßddr
[1] = 
cidnßddr
;

692 
	`IPCPDEBUG
((
LOG_INFO
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

701 
Àn
 > 
CILEN_VOID
) {

702 
	`GETCHAR
(
côy≥
, 
p
);

703 
	`GETCHAR
(
cûí
, 
p
);

704 if–(
Àn
 -
cûí
) < 0 ) {

705 
bad
;

707 
√xt
 = 
p
 + 
cûí
 - 2;

709 
côy≥
) {

710 
CI_COMPRESSTYPE
:

711 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

712 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

713 
bad
;

715 
no
.
√g_vj
 = 1;

717 
CI_ADDRS
:

718 i‡((
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

719 || 
cûí
 !
CILEN_ADDRS
) {

720 
bad
;

722 
åy
.
√g_addr
 = 1;

723 
åy
.
ﬁd_addrs
 = 1;

724 
	`GETLONG
(
l
, 
p
);

725 
cüddr1
 = 
	`ht⁄l
(
l
);

726 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

727 
åy
.
ouøddr
 = 
cüddr1
;

729 
	`GETLONG
(
l
, 
p
);

730 
cüddr2
 = 
	`ht⁄l
(
l
);

731 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
) {

732 
åy
.
hißddr
 = 
cüddr2
;

734 
no
.
ﬁd_addrs
 = 1;

736 
CI_ADDR
:

737 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
) {

738 
bad
;

740 
åy
.
ﬁd_addrs
 = 0;

741 
	`GETLONG
(
l
, 
p
);

742 
cüddr1
 = 
	`ht⁄l
(
l
);

743 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

744 
åy
.
ouøddr
 = 
cüddr1
;

746 i‡(
åy
.
ouøddr
 != 0) {

747 
åy
.
√g_addr
 = 1;

749 
no
.
√g_addr
 = 1;

752 
p
 = 
√xt
;

756 i‡(
Àn
 != 0) {

757 
bad
;

763 i‡(
f
->
°©e
 !
LS_OPENED
) {

764 *
go
 = 
åy
;

769 
bad
:

770 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_nakci:Ñeceived bad Nak!\n"));

772 
	}
}

779 
	$ù˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

781 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

782 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

783 
u_sh‹t
 
cish‹t
;

784 
u32_t
 
cû⁄g
;

785 
ù˝_›ti⁄s
 
åy
;

787 
åy
 = *
go
;

793 
	#REJCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

794 i‡(
go
->
√g
 && \

795 
Àn
 >(
cûí
 = 
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
) && \

796 
p
[1] =
cûí
 && \

797 
p
[0] =
›t
) { \

798 
u32_t
 
l
; \

799 
Àn
 -
cûí
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
l
, 
p
); \

802 
cû⁄g
 = 
	`ht⁄l
(
l
); \

804 i‡(
cû⁄g
 !
vÆ1
) { \

805 
bad
; \

807 i‡(
ﬁd
) { \

808 
	`GETLONG
(
l
, 
p
); \

809 
cû⁄g
 = 
	`ht⁄l
(
l
); \

811 i‡(
cû⁄g
 !
vÆ2
) { \

812 
bad
; \

815 
åy
.
√g
 = 0; \

816 }

	)

818 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

819 i‡(
go
->
√g
 && \

820 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

821 
Àn
 >
p
[1] && \

822 
p
[0] =
›t
) { \

823 
Àn
 -
p
[1]; \

824 
	`INCPTR
(2, 
p
); \

825 
	`GETSHORT
(
cish‹t
, 
p
); \

827 i‡(
cish‹t
 !
vÆ
) { \

828 
bad
; \

830 i‡(!
ﬁd
) { \

831 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

832 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) { \

833 
bad
; \

835 
	`GETCHAR
(
ciÊag
, 
p
); \

836 i‡(
ciÊag
 !
cÊag
) { \

837 
bad
; \

840 
åy
.
√g
 = 0; \

841 }

	)

843 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

844 i‡(
go
->
√g
 && \

845 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

846 
Àn
 >
cûí
 && \

847 
p
[0] =
›t
) { \

848 
u32_t
 
l
; \

849 
Àn
 -
cûí
; \

850 
	`INCPTR
(2, 
p
); \

851 
	`GETLONG
(
l
, 
p
); \

852 
cû⁄g
 = 
	`ht⁄l
(
l
); \

854 i‡(
cû⁄g
 !
dnßddr
) { \

855 
bad
; \

857 
åy
.
√g
 = 0; \

858 }

	)

860 
	`REJCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
,

861 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

863 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

864 
go
->
max¶Ÿödex
, go->
cÊag
);

866 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

868 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

873 i‡(
Àn
 != 0) {

874 
bad
;

879 i‡(
f
->
°©e
 !
LS_OPENED
) {

880 *
go
 = 
åy
;

884 
bad
:

885 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_rejci:Ñeceived bad Reject!\n"));

887 
	}
}

898 
	$ù˝_ªqci
(
fsm
 *
f
, 
u_ch¨
 *
öp
 ,*
Àn
 ,
ªje˘_if_dißgªe
)

900 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

901 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

902 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

903 #ifde‡
OLD_CI_ADDRS


904 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

906 
u_ch¨
 *
cù
, *
√xt
;

907 
u_sh‹t
 
cûí
, 
côy≥
;

908 
u_sh‹t
 
cish‹t
;

909 
u32_t
 
é
, 
cüddr1
;

910 #ifde‡
OLD_CI_ADDRS


911 
u32_t
 
cüddr2
;

913 
rc
 = 
CONFACK
;

914 
‹c
;

915 
u_ch¨
 *
p
;

916 
u_ch¨
 *
u˝
 = 
öp
;

917 
l
 = *
Àn
;

918 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

919 
d
;

921 
cis_ª˚ived
[
f
->
unô
] = 1;

926 
	`BZERO
(
ho
, (*ho));

931 
√xt
 = 
öp
;

932 
l
) {

933 
‹c
 = 
CONFACK
;

934 
cù
 = 
p
 = 
√xt
;

935 i‡(
l
 < 2 ||

936 
p
[1] < 2 ||

937 
p
[1] > 
l
) {

938 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: bad CIÜength!\n"));

939 
‹c
 = 
CONFREJ
;

940 
cûí
 = 
l
;

941 
l
 = 0;

942 
ídswôch
;

944 
	`GETCHAR
(
côy≥
, 
p
);

945 
	`GETCHAR
(
cûí
, 
p
);

946 
l
 -
cûí
;

947 
√xt
 +
cûí
;

949 
côy≥
) {

950 #ifde‡
OLD_CI_ADDRS


951 
CI_ADDRS
:

952 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci:Ñeceived ADDRS\n"));

953 i‡(!
ao
->
√g_addr
 ||

954 
cûí
 !
CILEN_ADDRS
) {

955 
‹c
 = 
CONFREJ
;

965 
	`GETLONG
(
é
, 
p
);

966 
cüddr1
 = 
	`ht⁄l
(
é
);

967 
	`IPCPDEBUG
((
LOG_INFO
, "hi†add∏%s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

968 i‡(
cüddr1
 !
wo
->
hißddr


969 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

970 
‹c
 = 
CONFNAK
;

971 i‡(!
ªje˘_if_dißgªe
) {

972 
	`DECPTR
((
u32_t
), 
p
);

973 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

974 
	`PUTLONG
(
é
, 
p
);

976 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

980 
‹c
 = 
CONFREJ
;

981 
wo
->
ªq_addr
 = 0;

989 
	`GETLONG
(
é
, 
p
);

990 
cüddr2
 = 
	`ht⁄l
(
é
);

991 
	`IPCPDEBUG
((
LOG_INFO
, "ou∏add∏%s\n", 
	`öë_¡ﬂ
(
cüddr2
)));

992 i‡(
cüddr2
 !
wo
->
ouøddr
) {

993 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

994 
‹c
 = 
CONFNAK
;

995 i‡(!
ªje˘_if_dißgªe
) {

996 
	`DECPTR
((
u32_t
), 
p
);

997 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

998 
	`PUTLONG
(
é
, 
p
);

1001 
go
->
ouøddr
 = 
cüddr2
;

1005 
ho
->
√g_addr
 = 1;

1006 
ho
->
ﬁd_addrs
 = 1;

1007 
ho
->
hißddr
 = 
cüddr1
;

1008 
ho
->
ouøddr
 = 
cüddr2
;

1012 
CI_ADDR
:

1013 i‡(!
ao
->
√g_addr
) {

1014 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDRÇotállowed\n"));

1015 
‹c
 = 
CONFREJ
;

1017 } i‡(
cûí
 !
CILEN_ADDR
) {

1018 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDR badÜen\n"));

1019 
‹c
 = 
CONFREJ
;

1029 
	`GETLONG
(
é
, 
p
);

1030 
cüddr1
 = 
	`ht⁄l
(
é
);

1031 i‡(
cüddr1
 !
wo
->
hißddr


1032 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1033 
‹c
 = 
CONFNAK
;

1034 i‡(!
ªje˘_if_dißgªe
) {

1035 
	`DECPTR
((
u32_t
), 
p
);

1036 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1037 
	`PUTLONG
(
é
, 
p
);

1039 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nak ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1040 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1044 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1045 
‹c
 = 
CONFREJ
;

1046 
wo
->
ªq_addr
 = 0;

1050 
ho
->
√g_addr
 = 1;

1051 
ho
->
hißddr
 = 
cüddr1
;

1052 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1055 
CI_MS_DNS1
:

1056 
CI_MS_DNS2
:

1058 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1061 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1062 
cûí
 !
CILEN_ADDR
) {

1063 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög DNS%d Reque°\n", 
d
+1));

1064 
‹c
 = 
CONFREJ
;

1067 
	`GETLONG
(
é
, 
p
);

1068 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1069 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Naking DNS%d Request %d\n",

1070 
d
+1, 
	`öë_¡ﬂ
(
é
)));

1071 
	`DECPTR
((
u32_t
), 
p
);

1072 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1073 
	`PUTLONG
(
é
, 
p
);

1074 
‹c
 = 
CONFNAK
;

1076 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived DNS%d Reque°\n", 
d
+1));

1079 
CI_MS_WINS1
:

1080 
CI_MS_WINS2
:

1082 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1083 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived WINS%d Reque°\n", 
d
+1));

1086 i‡(
ao
->
wößddr
[
d
] == 0 ||

1087 
cûí
 !
CILEN_ADDR
) {

1088 
‹c
 = 
CONFREJ
;

1091 
	`GETLONG
(
é
, 
p
);

1092 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1093 
	`DECPTR
((
u32_t
), 
p
);

1094 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1095 
	`PUTLONG
(
é
, 
p
);

1096 
‹c
 = 
CONFNAK
;

1100 
CI_COMPRESSTYPE
:

1101 i‡(!
ao
->
√g_vj
) {

1102 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Rejecting COMPRESSTYPEÇotállowed\n"));

1103 
‹c
 = 
CONFREJ
;

1105 } i‡(
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
) {

1106 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPEÜí=%d\n", 
cûí
));

1107 
‹c
 = 
CONFREJ
;

1110 
	`GETSHORT
(
cish‹t
, 
p
);

1112 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1113 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1114 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPE %d\n", 
cish‹t
));

1115 
‹c
 = 
CONFREJ
;

1119 
ho
->
√g_vj
 = 1;

1120 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1121 i‡(
cûí
 =
CILEN_VJ
) {

1122 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1123 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1124 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ max slŸ %d\n", 
max¶Ÿödex
));

1125 
‹c
 = 
CONFNAK
;

1126 i‡(!
ªje˘_if_dißgªe
) {

1127 
	`DECPTR
(1, 
p
);

1128 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1131 
	`GETCHAR
(
cÊag
, 
p
);

1132 i‡(
cÊag
 && !
ao
->cflag) {

1133 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ cÊag %d\n", 
cÊag
));

1134 
‹c
 = 
CONFNAK
;

1135 i‡(!
ªje˘_if_dißgªe
) {

1136 
	`DECPTR
(1, 
p
);

1137 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1140 
ho
->
max¶Ÿödex
 = maxslotindex;

1141 
ho
->
cÊag
 = cflag;

1143 
ho
->
ﬁd_vj
 = 1;

1144 
ho
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

1145 
ho
->
cÊag
 = 1;

1147 
	`IPCPDEBUG
((
LOG_INFO
,

1149 
ho
->
vj_¥Ÿocﬁ
, ho->
ﬁd_vj
, ho->
max¶Ÿödex
, ho->
cÊag
));

1153 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög unknow¿CIÅy≥ %d\n", 
côy≥
));

1154 
‹c
 = 
CONFREJ
;

1158 
ídswôch
:

1159 i‡(
‹c
 =
CONFACK
 &&

1160 
rc
 !
CONFACK
) {

1164 i‡(
‹c
 =
CONFNAK
) {

1165 i‡(
ªje˘_if_dißgªe
) {

1166 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RejectingÅoo manyÇaks\n"));

1167 
‹c
 = 
CONFREJ
;

1169 i‡(
rc
 =
CONFREJ
) {

1172 i‡(
rc
 =
CONFACK
) {

1173 
rc
 = 
CONFNAK
;

1174 
u˝
 = 
öp
;

1179 i‡(
‹c
 =
CONFREJ
 &&

1180 
rc
 !
CONFREJ
) {

1181 
rc
 = 
CONFREJ
;

1182 
u˝
 = 
öp
;

1186 i‡(
u˝
 !
cù
) {

1187 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1191 
	`INCPTR
(
cûí
, 
u˝
);

1201 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 &&

1202 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
) {

1203 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RequestingÖeeráddress\n"));

1204 i‡(
rc
 =
CONFACK
) {

1205 
rc
 = 
CONFNAK
;

1206 
u˝
 = 
öp
;

1207 
wo
->
ªq_addr
 = 0;

1209 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1210 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1211 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1212 
	`PUTLONG
(
é
, 
u˝
);

1215 *
Àn
 = ()(
u˝
 - 
öp
);

1216 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñëu∫ög C⁄figuª-%s\n", 
	`CODENAME
(
rc
)));

1217  (
rc
);

1218 
	}
}

1227 
	$ù_check_›ti⁄s
(
u_l⁄g
 
loˇlAddr
)

1229 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1235 i‡(
wo
->
ouøddr
 =0 && !
µp_£âögs
.
dißbÀ_deÁu…ù
) {

1236 
wo
->
ac˚±_loˇl
 = 1;

1237 
wo
->
ouøddr
 = 
	`ht⁄l
(
loˇlAddr
);

1239 
	}
}

1249 
	$ù˝_up
(
fsm
 *
f
)

1251 
u32_t
 
mask
;

1252 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1253 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1254 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1256 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1257 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: up\n"));

1262 i‡(!
ho
->
√g_addr
) {

1263 
ho
->
hißddr
 = 
wo
->hisaddr;

1266 i‡(
ho
->
hißddr
 == 0) {

1267 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÑemote IPáddress\n"));

1268 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote IPáddress");

1271 i‡(
go
->
ouøddr
 == 0) {

1272 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÜocal IPáddress\n"));

1273 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1277 i‡(
µp_£âögs
.
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1284 i‡(!
	`auth_ù_addr
(
f
->
unô
, 
ho
->
hißddr
)) {

1285 
	`IPCPDEBUG
((
LOG_ERR
, "Peer isÇotáuthorizedÅo useÑemoteáddress %s\n",

1286 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1287 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1292 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1297 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1299 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
, go->
dnßddr
[0], go->dnsaddr[1])) {

1300 
	`IPCPDEBUG
((
LOG_WARNING
, "sifaddr failed\n"));

1301 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1306 i‡(!
	`sifup
(
f
->
unô
)) {

1307 
	`IPCPDEBUG
((
LOG_WARNING
, "sifup failed\n"));

1308 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1312 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1315 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
) {

1316 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
)) {

1317 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1321 
	`IPCPDEBUG
((
LOG_NOTICE
, "loˇ» IPáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
ouøddr
)));

1322 
	`IPCPDEBUG
((
LOG_NOTICE
, "ªmŸêIPáddªs†%s\n", 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1323 i‡(
go
->
dnßddr
[0]) {

1324 
	`IPCPDEBUG
((
LOG_NOTICE
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[0])));

1326 i‡(
go
->
dnßddr
[1]) {

1327 
	`IPCPDEBUG
((
LOG_NOTICE
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[1])));

1329 
	}
}

1339 
	$ù˝_down
(
fsm
 *
f
)

1341 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: down\n"));

1342 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1343 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1345 
	`sifdown
(
f
->
unô
);

1346 
	`ù˝_˛ór_addrs
(
f
->
unô
);

1347 
	}
}

1354 
	$ù˝_˛ór_addrs
(
unô
)

1356 
u32_t
 
ouøddr
, 
hißddr
;

1358 
ouøddr
 = 
ù˝_gŸ›ti⁄s
[
unô
].ouraddr;

1359 
hißddr
 = 
ù˝_his›ti⁄s
[
unô
].hisaddr;

1360 i‡(
deÁu…_rouã_£t
[
unô
]) {

1361 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

1362 
deÁu…_rouã_£t
[
unô
] = 0;

1364 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

1365 
	}
}

1372 
	$ù˝_föished
(
fsm
 *
f
)

1374 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

1375 
	}
}

1379 
ù˝_¥öçkt
(
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1381 
	`LWIP_UNUSED_ARG
(
p
);

1382 
	`LWIP_UNUSED_ARG
(
∂í
);

1383 
	`LWIP_UNUSED_ARG
(
¥öãr
);

1384 
	`LWIP_UNUSED_ARG
(
¨g
);

1386 
	}
}

1393 
	#IP_HDRLEN
 20

	)

1394 
	#IP_OFFMASK
 0x1fff

	)

1395 
	#IPPROTO_TCP
 6

	)

1396 
	#TCP_HDRLEN
 20

	)

1397 
	#TH_FIN
 0x01

	)

1404 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

1405 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

1406 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

1407 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

1408 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1409 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1412 
	$ù_a˘ive_pkt
(
u_ch¨
 *
pkt
, 
Àn
)

1414 
u_ch¨
 *
t˝
;

1415 
hÀn
;

1417 
Àn
 -
PPP_HDRLEN
;

1418 
pkt
 +
PPP_HDRLEN
;

1419 i‡(
Àn
 < 
IP_HDRLEN
) {

1422 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0) {

1425 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
) {

1428 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

1429 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
) {

1432 
t˝
 = 
pkt
 + 
hÀn
;

1433 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4) {

1437 
	}
}

	@netif/ppp/ipcp.h

54 #i‚de‡
IPCP_H


55 
	#IPCP_H


	)

63 
	#CI_ADDRS
 1

	)

64 
	#CI_COMPRESSTYPE
 2

	)

65 
	#CI_ADDR
 3

	)

67 
	#CI_MS_WINS1
 128

	)

68 
	#CI_MS_DNS1
 129

	)

69 
	#CI_MS_WINS2
 130

	)

70 
	#CI_MS_DNS2
 131

	)

72 
	#IPCP_VJMODE_OLD
 1

	)

73 
	#IPCP_VJMODE_RFC1172
 2

	)

74 
	#IPCP_VJMODE_RFC1332
 3

	)

77 
	#IPCP_VJ_COMP
 0x002d

	)

78 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

86 
	sù˝_›ti⁄s
 {

87 
u_öt
 
	m√g_addr
 : 1;

88 
u_öt
 
	mﬁd_addrs
 : 1;

89 
u_öt
 
	mªq_addr
 : 1;

90 
u_öt
 
	mdeÁu…_rouã
 : 1;

91 
u_öt
 
	m¥oxy_¨p
 : 1;

92 
u_öt
 
	m√g_vj
 : 1;

93 
u_öt
 
	mﬁd_vj
 : 1;

94 
u_öt
 
	mac˚±_loˇl
 : 1;

95 
u_öt
 
	mac˚±_ªmŸe
 : 1;

96 
u_öt
 
	mªq_dns1
 : 1;

97 
u_öt
 
	mªq_dns2
 : 1;

98 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

99 
u_ch¨
 
	mmax¶Ÿödex
;

100 
u_ch¨
 
	mcÊag
;

101 
u32_t
 
	mouøddr
, 
	mhißddr
;

102 
u32_t
 
	mdnßddr
[2];

103 
u32_t
 
	mwößddr
[2];

104 } 
	tù˝_›ti⁄s
;

111 
fsm
 
ù˝_fsm
[];

112 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

113 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

114 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

115 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

117 
¥Ÿít
 
ù˝_¥Ÿít
;

	@netif/ppp/lcp.c

54 
	~"lwù/›t.h
"

56 #i‡
PPP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"fsm.h
"

62 
	~"ch≠.h
"

63 
	~"magic.h
"

64 
	~"auth.h
"

65 
	~"l˝.h
"

67 
	~<°rög.h
>

69 #i‡
PPPOE_SUPPORT


70 
	~"√tif/µp_€.h
"

72 
	#PPPOE_MAXMTU
 
PPP_MAXMRU


	)

82 
	#CILEN_VOID
 2

	)

83 
	#CILEN_CHAR
 3

	)

84 
	#CILEN_SHORT
 4

	)

85 
	#CILEN_CHAP
 5

	)

86 
	#CILEN_LONG
 6

	)

87 
	#CILEN_LQR
 8

	)

88 
	#CILEN_CBCP
 3

	)

97 
l˝_ª£tci
 (
fsm
*);

98 
l˝_cûí
 (
fsm
*);

99 
l˝_addci
 (
fsm
*, 
u_ch¨
*, *);

100 
l˝_ackci
 (
fsm
*, 
u_ch¨
*, );

101 
l˝_«kci
 (
fsm
*, 
u_ch¨
*, );

102 
l˝_ªjci
 (
fsm
*, 
u_ch¨
*, );

103 
l˝_ªqci
 (
fsm
*, 
u_ch¨
*, *, );

104 
l˝_up
 (
fsm
*);

105 
l˝_down
 (
fsm
*);

106 
l˝_°¨tög
 (
fsm
*);

107 
l˝_föished
 (
fsm
*);

108 
l˝_extcode
 (
fsm
*, , 
u_ch¨
, u_char*, );

110 
l˝_ΩrŸªj
 (
fsm
*, 
u_ch¨
*, );

115 
l˝_echo_lowîup
 ();

116 
l˝_echo_lowîdown
 ();

117 
L˝EchoTimeout
 (*);

118 
l˝_ª˚ived_echo_ª∂y
 (
fsm
*, , 
u_ch¨
*, );

119 
L˝SídEchoReque°
 (
fsm
*);

120 
L˝LökFaûuª
 (
fsm
*);

121 
L˝EchoCheck
 (
fsm
*);

127 
l˝_öput
 (, 
u_ch¨
 *, );

128 
l˝_¥Ÿªj
 ();

130 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : (xË=
CONFNAK
 ? "NAK" : "REJ")

	)

137 
LökPha£
 
	gl˝_pha£
[
NUM_PPP
];

138 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

139 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

140 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

141 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

142 
ext_accm
 
	gxmô_accm
[
NUM_PPP
];

149 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

150 
u_öt
 
	gl˝_echo_öãrvÆ
 = 
LCP_ECHOINTERVAL
;

151 
u_öt
 
	gl˝_echo_Áûs
 = 
LCP_MAXECHOFAILS
;

152 
u32_t
 
	gl˝_echos_≥ndög
 = 0;

153 
u32_t
 
	gl˝_echo_numbî
 = 0;

154 
u32_t
 
	gl˝_echo_timî_ru¬ög
 = 0;

156 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

158 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

159 
l˝_ª£tci
,

160 
l˝_cûí
,

161 
l˝_addci
,

162 
l˝_ackci
,

163 
l˝_«kci
,

164 
l˝_ªjci
,

165 
l˝_ªqci
,

166 
l˝_up
,

167 
l˝_down
,

168 
l˝_°¨tög
,

169 
l˝_föished
,

170 
NULL
,

171 
NULL
,

172 
l˝_extcode
,

176 
¥Ÿít
 
	gl˝_¥Ÿít
 = {

177 
PPP_LCP
,

178 
l˝_öô
,

179 
l˝_öput
,

180 
l˝_¥Ÿªj
,

181 
l˝_lowîup
,

182 
l˝_lowîdown
,

183 
l˝_›í
,

184 
l˝_˛o£
,

186 
l˝_¥öçkt
,

187 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL


198 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

209 
	$l˝_öô
(
unô
)

211 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

212 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

213 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

215 
f
->
unô
 = unit;

216 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

217 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

219 
	`fsm_öô
(
f
);

221 
wo
->
∑ssive
 = 0;

222 
wo
->
sûít
 = 0;

223 
wo
->
ª°¨t
 = 0;

224 
wo
->
√g_mru
 = 1;

225 
wo
->
mru
 = 
PPP_DEFMRU
;

226 
wo
->
√g_asyncm≠
 = 1;

227 
wo
->
asyncm≠
 = 0x00000000l;

228 
wo
->
√g_ch≠
 = 0;

229 
wo
->
√g_u∑p
 = 0;

230 
wo
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

231 
wo
->
√g_magi˙umbî
 = 1;

232 
wo
->
√g_pcom¥essi⁄
 = 1;

233 
wo
->
√g_accom¥essi⁄
 = 1;

234 
wo
->
√g_lqr
 = 0;

235 
wo
->
√g_cb˝
 = 0;

237 
ao
->
√g_mru
 = 1;

238 
ao
->
mru
 = 
PPP_MAXMRU
;

239 
ao
->
√g_asyncm≠
 = 1;

240 
ao
->
asyncm≠
 = 0x00000000l;

241 
ao
->
√g_ch≠
 = (
CHAP_SUPPORT
 != 0);

242 
ao
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

243 
ao
->
√g_u∑p
 = (
PAP_SUPPORT
 != 0);

244 
ao
->
√g_magi˙umbî
 = 1;

245 
ao
->
√g_pcom¥essi⁄
 = 1;

246 
ao
->
√g_accom¥essi⁄
 = 1;

247 
ao
->
√g_lqr
 = 0;

248 
ao
->
√g_cb˝
 = (
CBCP_SUPPORT
 != 0);

254 
	`mem£t
(
xmô_accm
[
unô
], 0, (xmit_accm[0]));

255 
xmô_accm
[
unô
][15] = 0x60;

256 
xmô_accm
[
unô
][0] = (
u_ch¨
)((
ao
->
asyncm≠
 & 0xFF));

257 
xmô_accm
[
unô
][1] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 8) & 0xFF);

258 
xmô_accm
[
unô
][2] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 16) & 0xFF);

259 
xmô_accm
[
unô
][3] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 24) & 0xFF);

260 
	`LCPDEBUG
((
LOG_INFO
, "lcp_init: xmit_accm=%X %X %X %X\n",

261 
xmô_accm
[
unô
][0],

262 
xmô_accm
[
unô
][1],

263 
xmô_accm
[
unô
][2],

264 
xmô_accm
[
unô
][3]));

266 
l˝_pha£
[
unô
] = 
PHASE_INITIALIZE
;

267 
	}
}

274 
	$l˝_›í
(
unô
)

276 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

277 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

279 
f
->
Êags
 = 0;

280 i‡(
wo
->
∑ssive
) {

281 
f
->
Êags
 |
OPT_PASSIVE
;

283 i‡(
wo
->
sûít
) {

284 
f
->
Êags
 |
OPT_SILENT
;

286 
	`fsm_›í
(
f
);

288 
l˝_pha£
[
unô
] = 
PHASE_ESTABLISH
;

289 
	}
}

296 
	$l˝_˛o£
(
unô
, *
ªas⁄
)

298 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

300 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

301 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

303 i‡(
f
->
°©e
 =
LS_STOPPED
 && f->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
)) {

310 
f
->
°©e
 = 
LS_CLOSED
;

311 
	`l˝_föished
(
f
);

313 
	`fsm_˛o£
(&
l˝_fsm
[
unô
], 
ªas⁄
);

315 
	}
}

322 
	$l˝_lowîup
(
unô
)

324 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

331 
	`µp_£t_xaccm
(
unô
, &
xmô_accm
[unit]);

332 
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

333 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, 0x00000000l,

334 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
);

335 
≥î_mru
[
unô
] = 
PPP_MRU
;

336 
l˝_Ælow›ti⁄s
[
unô
].
asyncm≠
 = (
u_l⁄g
)
xmô_accm
[unit][0]

337 | ((
u_l⁄g
)
xmô_accm
[
unô
][1] << 8)

338 | ((
u_l⁄g
)
xmô_accm
[
unô
][2] << 16)

339 | ((
u_l⁄g
)
xmô_accm
[
unô
][3] << 24);

340 
	`LCPDEBUG
((
LOG_INFO
, "lcp_lowerup:ásyncmap=%X %X %X %X\n",

341 
xmô_accm
[
unô
][3],

342 
xmô_accm
[
unô
][2],

343 
xmô_accm
[
unô
][1],

344 
xmô_accm
[
unô
][0]));

346 
	`fsm_lowîup
(&
l˝_fsm
[
unô
]);

347 
	}
}

354 
	$l˝_lowîdown
(
unô
)

356 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

357 
	}
}

363 
	$l˝_•rŸªj
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

370 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
, 
p
, 
Àn
);

371 
	}
}

382 
	$l˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

384 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

386 
	`fsm_öput
(
f
, 
p
, 
Àn
);

387 
	}
}

394 
	$l˝_extcode
(
fsm
 *
f
, 
code
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

396 
u_ch¨
 *
magp
;

398  
code
 ){

399 
PROTREJ
:

400 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

403 
ECHOREQ
:

404 i‡(
f
->
°©e
 !
LS_OPENED
) {

407 
	`LCPDEBUG
((
LOG_INFO
, "l˝: Echo-Reque°, Rcvd id %d\n", 
id
));

408 
magp
 = 
öp
;

409 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

410 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

413 
ECHOREP
:

414 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

417 
DISCREQ
:

424 
	}
}

433 
	$l˝_ΩrŸªj
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

435 
i
;

436 
¥Ÿít
 *
¥Ÿp
;

437 
u_sh‹t
 
¥Ÿ
;

439 i‡(
Àn
 <  (
u_sh‹t
)) {

440 
	`LCPDEBUG
((
LOG_INFO
, "lcp_rprotrej: Rcvd short Protocol-RejectÖacket!\n"));

444 
	`GETSHORT
(
¥Ÿ
, 
öp
);

446 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ΩrŸªj: Rcvd PrŸocﬁ-Reje˘Öackë f‹ %x!\n", 
¥Ÿ
));

452 if–
f
->
°©e
 !
LS_OPENED
 ) {

453 
	`LCPDEBUG
((
LOG_INFO
, "PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d\n", 
f
->
°©e
));

460 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

461 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

462 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

467 
	`LCPDEBUG
((
LOG_WARNING
, "PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x\n", 
¥Ÿ
));

468 
	}
}

475 
	$l˝_¥Ÿªj
(
unô
)

477 
	`LWIP_UNUSED_ARG
(
unô
);

481 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_protrej: Received Protocol-Reject for LCP!\n"));

482 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

483 
	}
}

490 
	$l˝_ª£tci
(
fsm
 *
f
)

492 
l˝_w™t›ti⁄s
[
f
->
unô
].
magi˙umbî
 = 
	`magic
();

493 
l˝_w™t›ti⁄s
[
f
->
unô
].
numlo›s
 = 0;

494 
l˝_gŸ›ti⁄s
[
f
->
unô
] = 
l˝_w™t›ti⁄s
[f->unit];

495 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

496 
	`auth_ª£t
(
f
->
unô
);

497 
	}
}

503 
	$l˝_cûí
(
fsm
 *
f
)

505 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

507 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

508 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

509 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

510 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

511 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

512 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

517  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) +

518 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) +

519 
	`LENCICHAP
(
go
->
√g_ch≠
) +

520 
	`LENCISHORT
(!
go
->
√g_ch≠
 && go->
√g_u∑p
) +

521 
	`LENCILQR
(
go
->
√g_lqr
) +

522 
	`LENCICBCP
(
go
->
√g_cb˝
) +

523 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

524 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

525 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
));

526 
	}
}

533 
	$l˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

535 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

536 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

538 
	#ADDCIVOID
(
›t
, 
√g
) \

539 i‡(
√g
) { \

540 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: o±=%d\n", 
›t
)); \

541 
	`PUTCHAR
(
›t
, 
u˝
); \

542 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

543 }

	)

544 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

545 i‡(
√g
) { \

546 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: INT o±=%d %X\n", 
›t
, 
vÆ
)); \

547 
	`PUTCHAR
(
›t
, 
u˝
); \

548 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

549 
	`PUTSHORT
(
vÆ
, 
u˝
); \

550 }

	)

551 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

552 i‡(
√g
) { \

553 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAP o±=%d %X\n", 
›t
, 
vÆ
)); \

554 
	`PUTCHAR
(
›t
, 
u˝
); \

555 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

556 
	`PUTSHORT
(
vÆ
, 
u˝
); \

557 
	`PUTCHAR
(
dige°
, 
u˝
); \

558 }

	)

559 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

560 i‡(
√g
) { \

561 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: L o±=%d %lX\n", 
›t
, 
vÆ
)); \

562 
	`PUTCHAR
(
›t
, 
u˝
); \

563 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

564 
	`PUTLONG
(
vÆ
, 
u˝
); \

565 }

	)

566 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

567 i‡(
√g
) { \

568 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: LQR o±=%d %lX\n", 
›t
, 
vÆ
)); \

569 
	`PUTCHAR
(
›t
, 
u˝
); \

570 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

571 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

572 
	`PUTLONG
(
vÆ
, 
u˝
); \

573 }

	)

574 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

575 i‡(
√g
) { \

576 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAR o±=%d %X '%z'\n", 
›t
, 
vÆ
, val)); \

577 
	`PUTCHAR
(
›t
, 
u˝
); \

578 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

579 
	`PUTCHAR
(
vÆ
, 
u˝
); \

580 }

	)

582 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

583 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

584 
	`ADDCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

585 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

586 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

587 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

588 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

589 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

590 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

592 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

594 
	`LCPDEBUG
((
LOG_ERR
, "Bug inÜcp_addci: wrongÜength\n"));

596 
	}
}

608 
	$l˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

610 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

611 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

612 
u_sh‹t
 
cish‹t
;

613 
u32_t
 
cû⁄g
;

620 
	#ACKCIVOID
(
›t
, 
√g
) \

621 i‡(
√g
) { \

622 i‡((
Àn
 -
CILEN_VOID
) < 0) \

623 
bad
; \

624 
	`GETCHAR
(
côy≥
, 
p
); \

625 
	`GETCHAR
(
cûí
, 
p
); \

626 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

627 
bad
; \

628 }

	)

629 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

630 i‡(
√g
) { \

631 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

632 
bad
; \

633 
	`GETCHAR
(
côy≥
, 
p
); \

634 
	`GETCHAR
(
cûí
, 
p
); \

635 i‡(
cûí
 !
CILEN_SHORT
 || 
côy≥
 !
›t
) \

636 
bad
; \

637 
	`GETSHORT
(
cish‹t
, 
p
); \

638 i‡(
cish‹t
 !
vÆ
) \

639 
bad
; \

640 }

	)

641 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

642 i‡(
√g
) { \

643 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

644 
bad
; \

645 
	`GETCHAR
(
côy≥
, 
p
); \

646 
	`GETCHAR
(
cûí
, 
p
); \

647 i‡(
cûí
 !
CILEN_CHAR
 || 
côy≥
 !
›t
) \

648 
bad
; \

649 
	`GETCHAR
(
cich¨
, 
p
); \

650 i‡(
cich¨
 !
vÆ
) \

651 
bad
; \

652 }

	)

653 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

654 i‡(
√g
) { \

655 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

656 
bad
; \

657 
	`GETCHAR
(
côy≥
, 
p
); \

658 
	`GETCHAR
(
cûí
, 
p
); \

659 i‡(
cûí
 !
CILEN_CHAP
 || 
côy≥
 !
›t
) \

660 
bad
; \

661 
	`GETSHORT
(
cish‹t
, 
p
); \

662 i‡(
cish‹t
 !
vÆ
) \

663 
bad
; \

664 
	`GETCHAR
(
cich¨
, 
p
); \

665 i‡(
cich¨
 !
dige°
) \

666 
bad
; \

667 }

	)

668 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

669 i‡(
√g
) { \

670 i‡((
Àn
 -
CILEN_LONG
) < 0) \

671 
bad
; \

672 
	`GETCHAR
(
côy≥
, 
p
); \

673 
	`GETCHAR
(
cûí
, 
p
); \

674 i‡(
cûí
 !
CILEN_LONG
 || 
côy≥
 !
›t
) \

675 
bad
; \

676 
	`GETLONG
(
cû⁄g
, 
p
); \

677 i‡(
cû⁄g
 !
vÆ
) \

678 
bad
; \

679 }

	)

680 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

681 i‡(
√g
) { \

682 i‡((
Àn
 -
CILEN_LQR
) < 0) \

683 
bad
; \

684 
	`GETCHAR
(
côy≥
, 
p
); \

685 
	`GETCHAR
(
cûí
, 
p
); \

686 i‡(
cûí
 !
CILEN_LQR
 || 
côy≥
 !
›t
) \

687 
bad
; \

688 
	`GETSHORT
(
cish‹t
, 
p
); \

689 i‡(
cish‹t
 !
PPP_LQR
) \

690 
bad
; \

691 
	`GETLONG
(
cû⁄g
, 
p
); \

692 i‡(
cû⁄g
 !
vÆ
) \

693 
bad
; \

694 }

	)

696 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

697 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

698 
	`ACKCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

699 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

700 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

701 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

702 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

703 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

704 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

709 i‡(
Àn
 != 0) {

710 
bad
;

712 
	`LCPDEBUG
((
LOG_INFO
, "lcp_acki: Ack\n"));

714 
bad
:

715 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_acki:Ñeceived bad Ack!\n"));

717 
	}
}

730 
	$l˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

732 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

733 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

734 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

735 
u_sh‹t
 
cish‹t
;

736 
u32_t
 
cû⁄g
;

737 
l˝_›ti⁄s
 
no
;

738 
l˝_›ti⁄s
 
åy
;

739 
lo›ed_back
 = 0;

740 
cûí
;

742 
	`BZERO
(&
no
, (no));

743 
åy
 = *
go
;

750 
	#NAKCIVOID
(
›t
, 
√g
, 
code
) \

751 i‡(
go
->
√g
 && \

752 
Àn
 >
CILEN_VOID
 && \

753 
p
[1] =
CILEN_VOID
 && \

754 
p
[0] =
›t
) { \

755 
Àn
 -
CILEN_VOID
; \

756 
	`INCPTR
(
CILEN_VOID
, 
p
); \

757 
no
.
√g
 = 1; \

758 
code
 \

759 }

	)

760 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

761 i‡(
go
->
√g
 && \

762 
Àn
 >
CILEN_CHAP
 && \

763 
p
[1] =
CILEN_CHAP
 && \

764 
p
[0] =
›t
) { \

765 
Àn
 -
CILEN_CHAP
; \

766 
	`INCPTR
(2, 
p
); \

767 
	`GETSHORT
(
cish‹t
, 
p
); \

768 
	`GETCHAR
(
cich¨
, 
p
); \

769 
no
.
√g
 = 1; \

770 
code
 \

771 }

	)

772 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

773 i‡(
go
->
√g
 && \

774 
Àn
 >
CILEN_CHAR
 && \

775 
p
[1] =
CILEN_CHAR
 && \

776 
p
[0] =
›t
) { \

777 
Àn
 -
CILEN_CHAR
; \

778 
	`INCPTR
(2, 
p
); \

779 
	`GETCHAR
(
cich¨
, 
p
); \

780 
no
.
√g
 = 1; \

781 
code
 \

782 }

	)

783 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

784 i‡(
go
->
√g
 && \

785 
Àn
 >
CILEN_SHORT
 && \

786 
p
[1] =
CILEN_SHORT
 && \

787 
p
[0] =
›t
) { \

788 
Àn
 -
CILEN_SHORT
; \

789 
	`INCPTR
(2, 
p
); \

790 
	`GETSHORT
(
cish‹t
, 
p
); \

791 
no
.
√g
 = 1; \

792 
code
 \

793 }

	)

794 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

795 i‡(
go
->
√g
 && \

796 
Àn
 >
CILEN_LONG
 && \

797 
p
[1] =
CILEN_LONG
 && \

798 
p
[0] =
›t
) { \

799 
Àn
 -
CILEN_LONG
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
cû⁄g
, 
p
); \

802 
no
.
√g
 = 1; \

803 
code
 \

804 }

	)

805 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

806 i‡(
go
->
√g
 && \

807 
Àn
 >
CILEN_LQR
 && \

808 
p
[1] =
CILEN_LQR
 && \

809 
p
[0] =
›t
) { \

810 
Àn
 -
CILEN_LQR
; \

811 
	`INCPTR
(2, 
p
); \

812 
	`GETSHORT
(
cish‹t
, 
p
); \

813 
	`GETLONG
(
cû⁄g
, 
p
); \

814 
no
.
√g
 = 1; \

815 
code
 \

816 }

	)

825 i‡(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) {

826 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

827 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à< 
PPP_DEFMRU
) {

828 
åy
.
mru
 = 
cish‹t
;

836 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) {

837 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

838 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

847 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
)

848 && 
Àn
 >
CILEN_SHORT


849 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

850 
cûí
 = 
p
[1];

851 
Àn
 -
cûí
;

852 
no
.
√g_ch≠
 = 
go
->neg_chap;

853 
no
.
√g_u∑p
 = 
go
->neg_upap;

854 
	`INCPTR
(2, 
p
);

855 
	`GETSHORT
(
cish‹t
, 
p
);

856 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

862 i‡(!
go
->
√g_ch≠
) {

863 
bad
;

865 
åy
.
√g_ch≠
 = 0;

867 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

868 
	`GETCHAR
(
cich¨
, 
p
);

869 i‡(
go
->
√g_ch≠
) {

875 i‡(
cich¨
 !
go
->
ch≠_mdty≥
) {

876 
åy
.
√g_ch≠
 = 0;

882 
åy
.
√g_u∑p
 = 0;

890 i‡(
go
->
√g_ch≠
) {

891 
åy
.
√g_ch≠
 = 0;

893 
åy
.
√g_u∑p
 = 0;

895 
p
 +
cûí
 - 
CILEN_SHORT
;

904 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

905 i‡(
cish‹t
 !
PPP_LQR
) {

906 
åy
.
√g_lqr
 = 0;

908 
åy
.
lqr_≥riod
 = 
cû⁄g
;

915 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

916 
åy
.
√g_cb˝
 = 0;

922 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

923 
åy
.
magi˙umbî
 = 
	`magic
();

924 
lo›ed_back
 = 1;

932 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
,

933 
åy
.
√g_pcom¥essi⁄
 = 0;

935 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
,

936 
åy
.
√g_accom¥essi⁄
 = 0;

955 
Àn
 > 
CILEN_VOID
) {

956 
	`GETCHAR
(
côy≥
, 
p
);

957 
	`GETCHAR
(
cûí
, 
p
);

958 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0) {

959 
bad
;

961 
√xt
 = 
p
 + 
cûí
 - 2;

963 
côy≥
) {

964 
CI_MRU
:

965 i‡((
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
)

966 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
) {

967 
bad
;

969 
	`GETSHORT
(
cish‹t
, 
p
);

970 i‡(
cish‹t
 < 
PPP_DEFMRU
) {

971 
åy
.
mru
 = 
cish‹t
;

974 
CI_ASYNCMAP
:

975 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl)

976 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
) {

977 
bad
;

980 
CI_AUTHTYPE
:

981 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap) {

982 
bad
;

985 
CI_MAGICNUMBER
:

986 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

987 
cûí
 !
CILEN_LONG
) {

988 
bad
;

991 
CI_PCOMPRESSION
:

992 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

993 || 
cûí
 !
CILEN_VOID
) {

994 
bad
;

997 
CI_ACCOMPRESSION
:

998 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

999 || 
cûí
 !
CILEN_VOID
) {

1000 
bad
;

1003 
CI_QUALITY
:

1004 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
) {

1005 
bad
;

1009 
p
 = 
√xt
;

1013 i‡(
Àn
 != 0) {

1014 
bad
;

1020 i‡(
f
->
°©e
 !
LS_OPENED
) {

1021 i‡(
lo›ed_back
) {

1022 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1023 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜine isÜooped back.\n"));

1024 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1027 
åy
.
numlo›s
 = 0;

1029 *
go
 = 
åy
;

1034 
bad
:

1035 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_nakci:Ñeceived bad Nak!\n"));

1037 
	}
}

1050 
	$l˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

1052 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1053 
u_ch¨
 
cich¨
;

1054 
u_sh‹t
 
cish‹t
;

1055 
u32_t
 
cû⁄g
;

1056 
l˝_›ti⁄s
 
åy
;

1058 
åy
 = *
go
;

1065 
	#REJCIVOID
(
›t
, 
√g
) \

1066 i‡(
go
->
√g
 && \

1067 
Àn
 >
CILEN_VOID
 && \

1068 
p
[1] =
CILEN_VOID
 && \

1069 
p
[0] =
›t
) { \

1070 
Àn
 -
CILEN_VOID
; \

1071 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1072 
åy
.
√g
 = 0; \

1073 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªjci: void o± %dÑeje˘ed\n", 
›t
)); \

1074 }

	)

1075 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1076 i‡(
go
->
√g
 && \

1077 
Àn
 >
CILEN_SHORT
 && \

1078 
p
[1] =
CILEN_SHORT
 && \

1079 
p
[0] =
›t
) { \

1080 
Àn
 -
CILEN_SHORT
; \

1081 
	`INCPTR
(2, 
p
); \

1082 
	`GETSHORT
(
cish‹t
, 
p
); \

1084 i‡(
cish‹t
 !
vÆ
) { \

1085 
bad
; \

1087 
åy
.
√g
 = 0; \

1088 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: sh‹à›à%dÑeje˘ed\n", 
›t
)); \

1089 }

	)

1090 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

1091 i‡(
go
->
√g
 && \

1092 
Àn
 >
CILEN_CHAP
 && \

1093 
p
[1] =
CILEN_CHAP
 && \

1094 
p
[0] =
›t
) { \

1095 
Àn
 -
CILEN_CHAP
; \

1096 
	`INCPTR
(2, 
p
); \

1097 
	`GETSHORT
(
cish‹t
, 
p
); \

1098 
	`GETCHAR
(
cich¨
, 
p
); \

1100 i‡(
cish‹t
 !
vÆ
 || 
cich¨
 !
dige°
) { \

1101 
bad
; \

1103 
åy
.
√g
 = 0; \

1104 
åy
.
√g_u∑p
 = 0; \

1105 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: ch≠ o± %dÑeje˘ed\n", 
›t
)); \

1106 }

	)

1107 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1108 i‡(
go
->
√g
 && \

1109 
Àn
 >
CILEN_LONG
 && \

1110 
p
[1] =
CILEN_LONG
 && \

1111 
p
[0] =
›t
) { \

1112 
Àn
 -
CILEN_LONG
; \

1113 
	`INCPTR
(2, 
p
); \

1114 
	`GETLONG
(
cû⁄g
, 
p
); \

1116 i‡(
cû⁄g
 !
vÆ
) { \

1117 
bad
; \

1119 
åy
.
√g
 = 0; \

1120 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci:Ü⁄g o± %dÑeje˘ed\n", 
›t
)); \

1121 }

	)

1122 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1123 i‡(
go
->
√g
 && \

1124 
Àn
 >
CILEN_LQR
 && \

1125 
p
[1] =
CILEN_LQR
 && \

1126 
p
[0] =
›t
) { \

1127 
Àn
 -
CILEN_LQR
; \

1128 
	`INCPTR
(2, 
p
); \

1129 
	`GETSHORT
(
cish‹t
, 
p
); \

1130 
	`GETLONG
(
cû⁄g
, 
p
); \

1132 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) { \

1133 
bad
; \

1135 
åy
.
√g
 = 0; \

1136 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: LQR o± %dÑeje˘ed\n", 
›t
)); \

1137 }

	)

1138 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1139 i‡(
go
->
√g
 && \

1140 
Àn
 >
CILEN_CBCP
 && \

1141 
p
[1] =
CILEN_CBCP
 && \

1142 
p
[0] =
›t
) { \

1143 
Àn
 -
CILEN_CBCP
; \

1144 
	`INCPTR
(2, 
p
); \

1145 
	`GETCHAR
(
cich¨
, 
p
); \

1147 i‡(
cich¨
 !
vÆ
) { \

1148 
bad
; \

1150 
åy
.
√g
 = 0; \

1151 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: CÆlback o± %dÑeje˘ed\n", 
›t
)); \

1152 }

	)

1154 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1155 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1156 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
PPP_CHAP
, 
go
->
ch≠_mdty≥
);

1157 i‡(!
go
->
√g_ch≠
) {

1158 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1160 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1161 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1162 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1163 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1164 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1169 i‡(
Àn
 != 0) {

1170 
bad
;

1175 i‡(
f
->
°©e
 !
LS_OPENED
) {

1176 *
go
 = 
åy
;

1180 
bad
:

1181 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_rejci:Ñeceived bad Reject!\n"));

1183 
	}
}

1194 
	$l˝_ªqci
(
fsm
 *
f
,

1195 
u_ch¨
 *
öp
,

1196 *
À≈
,

1197 
ªje˘_if_dißgªe
)

1199 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1200 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1201 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1202 
u_ch¨
 *
cù
, *
√xt
;

1203 
cûí
, 
côy≥
, 
cich¨
;

1204 
u_sh‹t
 
cish‹t
;

1205 
u32_t
 
cû⁄g
;

1206 
rc
 = 
CONFACK
;

1207 
‹c
;

1208 
u_ch¨
 *
p
;

1209 
u_ch¨
 *
ªjp
;

1210 
u_ch¨
 *
«kp
;

1211 
l
 = *
À≈
;

1212 #i‡
TRACELCP
 > 0

1213 
åa˚Buf
[80];

1214 
åa˚Ndx
 = 0;

1220 
	`BZERO
(
ho
, (*ho));

1225 
√xt
 = 
öp
;

1226 
«kp
 = 
«k_buf„r
;

1227 
ªjp
 = 
öp
;

1228 
l
) {

1229 
‹c
 = 
CONFACK
;

1230 
cù
 = 
p
 = 
√xt
;

1231 i‡(
l
 < 2 ||

1232 
p
[1] < 2 ||

1233 
p
[1] > 
l
) {

1234 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: bad CIÜength!\n"));

1235 
‹c
 = 
CONFREJ
;

1236 
cûí
 = 
l
;

1237 
l
 = 0;

1238 
côy≥
 = 0;

1239 
ídswôch
;

1241 
	`GETCHAR
(
côy≥
, 
p
);

1242 
	`GETCHAR
(
cûí
, 
p
);

1243 
l
 -
cûí
;

1244 
√xt
 +
cûí
;

1246 
côy≥
) {

1247 
CI_MRU
:

1248 i‡(!
ao
->
√g_mru
) {

1249 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU -Çotállowed\n"));

1250 
‹c
 = 
CONFREJ
;

1252 } i‡(
cûí
 !
CILEN_SHORT
) {

1253 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU - badÜength\n"));

1254 
‹c
 = 
CONFREJ
;

1257 
	`GETSHORT
(
cish‹t
, 
p
);

1264 i‡(
cish‹t
 < 
PPP_MINMRU
) {

1265 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak - MRUÅoo small\n"));

1266 
‹c
 = 
CONFNAK
;

1267 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1268 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1269 
	`PUTSHORT
(
PPP_MINMRU
, 
«kp
);

1272 
ho
->
√g_mru
 = 1;

1273 
ho
->
mru
 = 
cish‹t
;

1274 #i‡
TRACELCP
 > 0

1275 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MRU %d", 
cish‹t
);

1276 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1280 
CI_ASYNCMAP
:

1281 i‡(!
ao
->
√g_asyncm≠
) {

1282 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAPÇotállowed\n"));

1283 
‹c
 = 
CONFREJ
;

1285 } i‡(
cûí
 !
CILEN_LONG
) {

1286 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAP badÜength\n"));

1287 
‹c
 = 
CONFREJ
;

1290 
	`GETLONG
(
cû⁄g
, 
p
);

1296 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1297 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak ASYNCMAP %lX missing %lX\n",

1298 
cû⁄g
, 
ao
->
asyncm≠
));

1299 
‹c
 = 
CONFNAK
;

1300 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1301 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1302 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1305 
ho
->
√g_asyncm≠
 = 1;

1306 
ho
->
asyncm≠
 = 
cû⁄g
;

1307 #i‡
TRACELCP
 > 0

1308 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " ASYNCMAP=%lX", 
cû⁄g
);

1309 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1313 
CI_AUTHTYPE
:

1314 i‡(
cûí
 < 
CILEN_SHORT
) {

1315 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPE missingárg\n"));

1316 
‹c
 = 
CONFREJ
;

1318 } i‡(!(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
)) {

1322 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPEÇotállowed\n"));

1323 
‹c
 = 
CONFREJ
;

1326 
	`GETSHORT
(
cish‹t
, 
p
);

1339 i‡(
cish‹t
 =
PPP_PAP
) {

1340 i‡(
ho
->
√g_ch≠
) {

1341 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAPálreadyáccepted\n"));

1342 
‹c
 = 
CONFREJ
;

1344 } i‡(
cûí
 !
CILEN_SHORT
) {

1345 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAP badÜen\n"));

1346 
‹c
 = 
CONFREJ
;

1349 i‡(!
ao
->
√g_u∑p
) {

1350 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE PAPÇotállowed\n"));

1351 
‹c
 = 
CONFNAK
;

1352 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1353 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1354 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1355 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1358 
ho
->
√g_u∑p
 = 1;

1359 #i‡
TRACELCP
 > 0

1360 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " PAP (%X)", 
cish‹t
);

1361 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1365 i‡(
cish‹t
 =
PPP_CHAP
) {

1366 i‡(
ho
->
√g_u∑p
) {

1367 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAPáccepted PAP\n"));

1368 
‹c
 = 
CONFREJ
;

1370 } i‡(
cûí
 !
CILEN_CHAP
) {

1371 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAP badÜen\n"));

1372 
‹c
 = 
CONFREJ
;

1375 i‡(!
ao
->
√g_ch≠
) {

1376 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE CHAPÇotállowed\n"));

1377 
‹c
 = 
CONFNAK
;

1378 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1379 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1380 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1383 
	`GETCHAR
(
cich¨
, 
p
);

1384 i‡(
cich¨
 !
CHAP_DIGEST_MD5


1385 #ifde‡
CHAPMS


1386 && 
cich¨
 !
CHAP_MICROSOFT


1389 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE CHAP dige°=%d\n", 
cich¨
));

1390 
‹c
 = 
CONFNAK
;

1391 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1392 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1393 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1394 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1397 #i‡
TRACELCP
 > 0

1398 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " CHAP %X,%d", 
cish‹t
, 
cich¨
);

1399 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1401 
ho
->
ch≠_mdty≥
 = 
cich¨
;

1402 
ho
->
√g_ch≠
 = 1;

1411 
‹c
 = 
CONFNAK
;

1412 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1413 i‡(
ao
->
√g_ch≠
) {

1414 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq CHAP\n", 
cish‹t
));

1415 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1416 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1417 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1419 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq PAP\n", 
cish‹t
));

1420 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1421 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1425 
CI_QUALITY
:

1426 
	`GETSHORT
(
cish‹t
, 
p
);

1427 
	`GETLONG
(
cû⁄g
, 
p
);

1428 #i‡
TRACELCP
 > 0

1429 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " QUALITY (%x %x)", 
cish‹t
, (Ë
cû⁄g
);

1430 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1433 i‡(!
ao
->
√g_lqr
 ||

1434 
cûí
 !
CILEN_LQR
) {

1435 
‹c
 = 
CONFREJ
;

1443 i‡(
cish‹t
 !
PPP_LQR
) {

1444 
‹c
 = 
CONFNAK
;

1445 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1446 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1447 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1448 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1453 
CI_MAGICNUMBER
:

1454 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1455 
cûí
 !
CILEN_LONG
) {

1456 
‹c
 = 
CONFREJ
;

1459 
	`GETLONG
(
cû⁄g
, 
p
);

1460 #i‡
TRACELCP
 > 0

1461 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MAGICNUMBER (%lX)", 
cû⁄g
);

1462 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1468 i‡(
go
->
√g_magi˙umbî
 &&

1469 
cû⁄g
 =
go
->
magi˙umbî
) {

1470 
cû⁄g
 = 
	`magic
();

1471 
‹c
 = 
CONFNAK
;

1472 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1473 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1474 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1477 
ho
->
√g_magi˙umbî
 = 1;

1478 
ho
->
magi˙umbî
 = 
cû⁄g
;

1482 
CI_PCOMPRESSION
:

1483 #i‡
TRACELCP
 > 0

1484 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " PCOMPRESSION");

1485 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1487 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1488 
cûí
 !
CILEN_VOID
) {

1489 
‹c
 = 
CONFREJ
;

1492 
ho
->
√g_pcom¥essi⁄
 = 1;

1495 
CI_ACCOMPRESSION
:

1496 #i‡
TRACELCP
 > 0

1497 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " ACCOMPRESSION");

1498 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1500 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1501 
cûí
 !
CILEN_VOID
) {

1502 
‹c
 = 
CONFREJ
;

1505 
ho
->
√g_accom¥essi⁄
 = 1;

1508 
CI_MRRU
:

1509 #i‡
TRACELCP
 > 0

1510 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_MRRU");

1511 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1513 
‹c
 = 
CONFREJ
;

1516 
CI_SSNHF
:

1517 #i‡
TRACELCP
 > 0

1518 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_SSNHF");

1519 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1521 
‹c
 = 
CONFREJ
;

1524 
CI_EPDISC
:

1525 #i‡
TRACELCP
 > 0

1526 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_EPDISC");

1527 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1529 
‹c
 = 
CONFREJ
;

1533 #i‡
TRACELCP


1534 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " unknow¿%d", 
côy≥
);

1535 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1537 
‹c
 = 
CONFREJ
;

1541 
ídswôch
:

1542 #i‡
TRACELCP


1543 i‡(
åa˚Ndx
 >= 80 - 32) {

1544 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñcvd%s\n", 
åa˚Buf
));

1545 
åa˚Ndx
 = 0;

1548 i‡(
‹c
 =
CONFACK
 &&

1549 
rc
 !
CONFACK
) {

1553 i‡(
‹c
 =
CONFNAK
) {

1554 i‡(
ªje˘_if_dißgªe


1555 && 
côy≥
 !
CI_MAGICNUMBER
) {

1556 
‹c
 = 
CONFREJ
;

1558 i‡(
rc
 =
CONFREJ
) {

1561 
rc
 = 
CONFNAK
;

1564 i‡(
‹c
 =
CONFREJ
) {

1565 
rc
 = 
CONFREJ
;

1566 i‡(
cù
 !
ªjp
) {

1567 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1569 
	`INCPTR
(
cûí
, 
ªjp
);

1580 
rc
) {

1581 
CONFACK
:

1582 *
À≈
 = ()(
√xt
 - 
öp
);

1584 
CONFNAK
:

1588 *
À≈
 = ()(
«kp
 - 
«k_buf„r
);

1589 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1591 
CONFREJ
:

1592 *
À≈
 = ()(
ªjp
 - 
öp
);

1596 #i‡
TRACELCP
 > 0

1597 i‡(
åa˚Ndx
 > 0) {

1598 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci: %s\n", 
åa˚Buf
));

1601 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñëu∫ög CONF%s.\n", 
	`CODENAME
(
rc
)));

1602  (
rc
);

1603 
	}
}

1610 
	$l˝_up
(
fsm
 *
f
)

1612 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1613 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1614 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1615 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1617 i‡(!
go
->
√g_magi˙umbî
) {

1618 
go
->
magi˙umbî
 = 0;

1620 i‡(!
ho
->
√g_magi˙umbî
) {

1621 
ho
->
magi˙umbî
 = 0;

1630 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
	`LWIP_MIN
(
ao
->
mru
, (
ho
->
√g_mru
? ho->mru: 
PPP_MRU
)),

1631 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffffl),

1632 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1638 
	`µp_ªcv_c⁄fig
(
f
->
unô
, (
go
->
√g_mru
? 
	`LWIP_MAX
(
wo
->
mru
, go->mru): 
PPP_MRU
),

1639 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1640 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1642 i‡(
ho
->
√g_mru
) {

1643 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1646 
	`l˝_echo_lowîup
(
f
->
unô
);

1648 
	`lök_e°ablished
(
f
->
unô
);

1649 
	}
}

1658 
	$l˝_down
(
fsm
 *
f
)

1660 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1662 
	`l˝_echo_lowîdown
(
f
->
unô
);

1664 
	`lök_down
(
f
->
unô
);

1666 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

1667 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1668 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1669 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1670 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1671 
	}
}

1678 
	$l˝_°¨tög
(
fsm
 *
f
)

1680 
	`lök_ªquúed
(
f
->
unô
);

1681 
	}
}

1688 
	$l˝_föished
(
fsm
 *
f
)

1690 
	`lök_ãrmö©ed
(
f
->
unô
);

1691 
	}
}

1700 
¥öt_°rög
–*
p
, 
Àn
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1702 
c
;

1704 
	`¥öãr
(
¨g
, "\"");

1705 ; 
Àn
 > 0; --len) {

1706 
c
 = *
p
++;

1707 i‡(' ' <
c
 && c <= '~') {

1708 i‡(
c
 == '\\' || c == '"') {

1709 
	`¥öãr
(
¨g
, "\\");

1711 
	`¥öãr
(
¨g
, "%c", 
c
);

1713 
c
) {

1715 
	`¥öãr
(
¨g
, "\\n");

1718 
	`¥öãr
(
¨g
, "\\r");

1721 
	`¥öãr
(
¨g
, "\\t");

1724 
	`¥öãr
(
¨g
, "\\%.3o", 
c
);

1728 
	`¥öãr
(
¨g
, "\"");

1729 
	}
}

1735 *
	gl˝_codíames
[] = {

1742 
l˝_¥öçkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1744 
code
, 
id
, 
Àn
, 
ﬁí
;

1745 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1746 
u_sh‹t
 
cish‹t
;

1747 
u32_t
 
cû⁄g
;

1749 i‡(
∂í
 < 
HEADERLEN
) {

1752 
p°¨t
 = 
p
;

1753 
	`GETCHAR
(
code
, 
p
);

1754 
	`GETCHAR
(
id
, 
p
);

1755 
	`GETSHORT
(
Àn
, 
p
);

1756 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
) {

1760 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*)) {

1761 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

1763 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1765 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1766 
Àn
 -
HEADERLEN
;

1767 
code
) {

1768 
CONFREQ
:

1769 
CONFACK
:

1770 
CONFNAK
:

1771 
CONFREJ
:

1773 
Àn
 >= 2) {

1774 
	`GETCHAR
(
code
, 
p
);

1775 
	`GETCHAR
(
ﬁí
, 
p
);

1776 
p
 -= 2;

1777 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1780 
	`¥öãr
(
¨g
, " <");

1781 
Àn
 -
ﬁí
;

1782 
›ãnd
 = 
p
 + 
ﬁí
;

1783 
code
) {

1784 
CI_MRU
:

1785 i‡(
ﬁí
 =
CILEN_SHORT
) {

1786 
p
 += 2;

1787 
	`GETSHORT
(
cish‹t
, 
p
);

1788 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

1791 
CI_ASYNCMAP
:

1792 i‡(
ﬁí
 =
CILEN_LONG
) {

1793 
p
 += 2;

1794 
	`GETLONG
(
cû⁄g
, 
p
);

1795 
	`¥öãr
(
¨g
, "asyncm≠ 0x%lx", 
cû⁄g
);

1798 
CI_AUTHTYPE
:

1799 i‡(
ﬁí
 >
CILEN_SHORT
) {

1800 
p
 += 2;

1801 
	`¥öãr
(
¨g
, "auth ");

1802 
	`GETSHORT
(
cish‹t
, 
p
);

1803 
cish‹t
) {

1804 
PPP_PAP
:

1805 
	`¥öãr
(
¨g
, "pap");

1807 
PPP_CHAP
:

1808 
	`¥öãr
(
¨g
, "chap");

1811 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1815 
CI_QUALITY
:

1816 i‡(
ﬁí
 >
CILEN_SHORT
) {

1817 
p
 += 2;

1818 
	`¥öãr
(
¨g
, "quality ");

1819 
	`GETSHORT
(
cish‹t
, 
p
);

1820 
cish‹t
) {

1821 
PPP_LQR
:

1822 
	`¥öãr
(
¨g
, "lqr");

1825 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1829 
CI_CALLBACK
:

1830 i‡(
ﬁí
 >
CILEN_CHAR
) {

1831 
p
 += 2;

1832 
	`¥öãr
(
¨g
, "callback ");

1833 
	`GETSHORT
(
cish‹t
, 
p
);

1834 
cish‹t
) {

1835 
CBCP_OPT
:

1836 
	`¥öãr
(
¨g
, "CBCP");

1839 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1843 
CI_MAGICNUMBER
:

1844 i‡(
ﬁí
 =
CILEN_LONG
) {

1845 
p
 += 2;

1846 
	`GETLONG
(
cû⁄g
, 
p
);

1847 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

1850 
CI_PCOMPRESSION
:

1851 i‡(
ﬁí
 =
CILEN_VOID
) {

1852 
p
 += 2;

1853 
	`¥öãr
(
¨g
, "pcomp");

1856 
CI_ACCOMPRESSION
:

1857 i‡(
ﬁí
 =
CILEN_VOID
) {

1858 
p
 += 2;

1859 
	`¥öãr
(
¨g
, "accomp");

1863 
p
 < 
›ãnd
) {

1864 
	`GETCHAR
(
code
, 
p
);

1865 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1867 
	`¥öãr
(
¨g
, ">");

1871 
TERMACK
:

1872 
TERMREQ
:

1873 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1874 
	`¥öãr
(
¨g
, " ");

1875 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1876 
p
 +
Àn
;

1877 
Àn
 = 0;

1881 
ECHOREQ
:

1882 
ECHOREP
:

1883 
DISCREQ
:

1884 i‡(
Àn
 >= 4) {

1885 
	`GETLONG
(
cû⁄g
, 
p
);

1886 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

1887 
p
 += 4;

1888 
Àn
 -= 4;

1894 ; 
Àn
 > 0; --len) {

1895 
	`GETCHAR
(
code
, 
p
);

1896 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1899  ()(
p
 - 
p°¨t
);

1900 
	}
}

1907 
	$L˝LökFaûuª
 (
fsm
 *
f
)

1909 i‡(
f
->
°©e
 =
LS_OPENED
) {

1910 
	`LCPDEBUG
((
LOG_INFO
, "Nÿª•⁄£Åÿ%dÉcho-ªque°s\n", 
l˝_echos_≥ndög
));

1911 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜinkáppearsÅo be disconnected.\n"));

1912 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

1914 
	}
}

1920 
	$L˝EchoCheck
 (
fsm
 *
f
)

1922 
	`L˝SídEchoReque°
 (
f
);

1927 
	`LWIP_ASSERT
("l˝_echo_timî_ru¬ög =0", 
l˝_echo_timî_ru¬ög
 == 0);

1929 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

1930 
l˝_echo_timî_ru¬ög
 = 1;

1931 
	}
}

1937 
	$L˝EchoTimeout
 (*
¨g
)

1939 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

1940 
l˝_echo_timî_ru¬ög
 = 0;

1941 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

1943 
	}
}

1949 
	$l˝_ª˚ived_echo_ª∂y
 (
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

1951 
u32_t
 
magic
;

1953 
	`LWIP_UNUSED_ARG
(
id
);

1956 i‡(
Àn
 < 4) {

1957 
	`LCPDEBUG
((
LOG_WARNING
, "l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d\n", 
Àn
));

1960 
	`GETLONG
(
magic
, 
öp
);

1961 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî
 && 
magic
 =l˝_gŸ›ti⁄s[f->unô].
magi˙umbî
) {

1962 
	`LCPDEBUG
((
LOG_WARNING
, "appearÅo haveÑeceived our ownÉcho-reply!\n"));

1967 
l˝_echos_≥ndög
 = 0;

1968 
	}
}

1974 
	$L˝SídEchoReque°
 (
fsm
 *
f
)

1976 
u32_t
 
l˝_magic
;

1977 
u_ch¨
 
pkt
[4], *
pkç
;

1982 i‡(
l˝_echo_Áûs
 != 0) {

1983 i‡(
l˝_echos_≥ndög
++ >
l˝_echo_Áûs
) {

1984 
	`L˝LökFaûuª
(
f
);

1985 
l˝_echos_≥ndög
 = 0;

1992 i‡(
f
->
°©e
 =
LS_OPENED
) {

1993 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

1994 
pkç
 = 
pkt
;

1995 
	`PUTLONG
(
l˝_magic
, 
pkç
);

1996 
	`fsm_sd©a
(
f
, 
ECHOREQ
, (
u_ch¨
)(
l˝_echo_numbî
++ & 0xFF), 
pkt
, ()(
pkç
 -Ökt));

1998 
	}
}

2005 
	$l˝_echo_lowîup
 (
unô
)

2007 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2010 
l˝_echos_≥ndög
 = 0;

2011 
l˝_echo_numbî
 = 0;

2012 
l˝_echo_timî_ru¬ög
 = 0;

2015 i‡(
l˝_echo_öãrvÆ
 != 0) {

2016 
	`L˝EchoCheck
 (
f
);

2018 
	}
}

2025 
	$l˝_echo_lowîdown
 (
unô
)

2027 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2029 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2030 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2031 
l˝_echo_timî_ru¬ög
 = 0;

2033 
	}
}

	@netif/ppp/lcp.h

54 #i‚de‡
LCP_H


55 
	#LCP_H


	)

63 
	#CI_MRU
 1

	)

64 
	#CI_ASYNCMAP
 2

	)

65 
	#CI_AUTHTYPE
 3

	)

66 
	#CI_QUALITY
 4

	)

67 
	#CI_MAGICNUMBER
 5

	)

68 
	#CI_PCOMPRESSION
 7

	)

69 
	#CI_ACCOMPRESSION
 8

	)

70 
	#CI_CALLBACK
 13

	)

71 
	#CI_MRRU
 17

	)

72 
	#CI_SSNHF
 18

	)

73 
	#CI_EPDISC
 19

	)

78 
	#PROTREJ
 8

	)

79 
	#ECHOREQ
 9

	)

80 
	#ECHOREP
 10

	)

81 
	#DISCREQ
 11

	)

82 
	#CBCP_OPT
 6

	)

92 
	sl˝_›ti⁄s
 {

93 
u_öt
 
	m∑ssive
 : 1;

94 
u_öt
 
	msûít
 : 1;

95 
u_öt
 
	mª°¨t
 : 1;

96 
u_öt
 
	m√g_mru
 : 1;

97 
u_öt
 
	m√g_asyncm≠
 : 1;

98 
u_öt
 
	m√g_u∑p
 : 1;

99 
u_öt
 
	m√g_ch≠
 : 1;

100 
u_öt
 
	m√g_magi˙umbî
 : 1;

101 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

102 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

103 
u_öt
 
	m√g_lqr
 : 1;

104 
u_öt
 
	m√g_cb˝
 : 1;

105 #ifde‡
PPP_MULTILINK


106 
u_öt
 
	m√g_mºu
 : 1;

107 
u_öt
 
	m√g_s¢hf
 : 1;

108 
u_öt
 
	m√g_ídpoöt
 : 1;

110 
u_sh‹t
 
	mmru
;

111 #ifde‡
PPP_MULTILINK


112 
u_sh‹t
 
	mmºu
;

114 
u_ch¨
 
	mch≠_mdty≥
;

115 
u32_t
 
	masyncm≠
;

116 
u32_t
 
	mmagi˙umbî
;

117 
	mnumlo›s
;

118 
u32_t
 
	mlqr_≥riod
;

119 #ifde‡
PPP_MULTILINK


120 
ïdisc
 
	mídpoöt
;

122 } 
	tl˝_›ti⁄s
;

128 
	mPHASE_DEAD
 = 0,

129 
	mPHASE_INITIALIZE
,

130 
	mPHASE_ESTABLISH
,

131 
	mPHASE_AUTHENTICATE
,

132 
	mPHASE_CALLBACK
,

133 
	mPHASE_NETWORK
,

134 
	mPHASE_TERMINATE


135 } 
	tLökPha£
;

142 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

143 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

144 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

145 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

146 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

147 
ext_accm
 
xmô_accm
[];

154 
l˝_öô
 ();

155 
l˝_›í
 ();

156 
l˝_˛o£
 (, *);

157 
l˝_lowîup
 ();

158 
l˝_lowîdown
();

159 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

161 
¥Ÿít
 
l˝_¥Ÿít
;

165 
	#DEFLOOPBACKFAIL
 10

	)

	@netif/ppp/magic.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"øndm.h
"

58 
	~"magic.h
"

69 
	$magicInô
()

72 
	}
}

77 
u32_t
 
	$magic
()

79  
	`avR™dom
();

80 
	}
}

	@netif/ppp/magic.h

54 #i‚de‡
MAGIC_H


55 
	#MAGIC_H


	)

62 
magicInô
();

65 
u32_t
 
magic
();

	@netif/ppp/md5.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 #i‡
CHAP_SUPPORT
 || 
MD5_SUPPORT


40 
	~"µp.h
"

41 
	~"µpdebug.h
"

43 
	~"md5.h
"

57 
Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
);

59 
	gPADDING
[64] = {

71 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

72 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

73 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

74 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

77 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

81 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

82 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

83 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

84 (
a
Ë+(
b
); \

85 }

	)

86 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

87 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

88 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

89 (
a
Ë+(
b
); \

90 }

	)

91 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

92 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

93 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

94 (
a
Ë+(
b
); \

95 }

	)

96 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

97 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

98 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

99 (
a
Ë+(
b
); \

100 }

	)

102 #ifde‡
__STDC__


103 
	#UL
(
x
Ëx##
UL


	)

105 #ifde‡
WIN32


106 
	#UL
(
x
Ëx##
UL


	)

108 
	#UL
(
x
Ë
	)
x

116 
	$MD5Inô
 (
MD5_CTX
 *
mdC⁄ãxt
)

118 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
u32_t
)0;

121 
mdC⁄ãxt
->
buf
[0] = (
u32_t
)0x67452301UL;

122 
mdC⁄ãxt
->
buf
[1] = (
u32_t
)0xefcdab89UL;

123 
mdC⁄ãxt
->
buf
[2] = (
u32_t
)0x98badcfeUL;

124 
mdC⁄ãxt
->
buf
[3] = (
u32_t
)0x10325476UL;

125 
	}
}

132 
	$MD5Upd©e
(
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
)

134 
u32_t
 
ö
[16];

135 
mdi
;

136 
i
, 
ii
;

139 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%.*H\n", 
öLí
, 
	`MIN
(öLí, 20Ë* 2, 
öBuf
);

140 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%s\n", 
öLí
, 
öBuf
);

144 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

147 i‡((
mdC⁄ãxt
->
i
[0] + ((
u32_t
)
öLí
 << 3)) < mdContext->i[0]) {

148 
mdC⁄ãxt
->
i
[1]++;

150 
mdC⁄ãxt
->
i
[0] +((
u32_t
)
öLí
 << 3);

151 
mdC⁄ãxt
->
i
[1] +((
u32_t
)
öLí
 >> 29);

153 
öLí
--) {

155 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

158 i‡(
mdi
 == 0x40) {

159 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4) {

160 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

161 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

162 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

163 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

165 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

166 
mdi
 = 0;

169 
	}
}

175 
	$MD5FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
)

177 
u32_t
 
ö
[16];

178 
mdi
;

179 
i
, 
ii
;

180 
∑dLí
;

183 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

184 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

187 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

190 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

191 
	`MD5Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

194 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4) {

195 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

196 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

197 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

198 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

200 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

203 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

204 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

205 
mdC⁄ãxt
->
dige°
[
ii
+1] =

206 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

207 
mdC⁄ãxt
->
dige°
[
ii
+2] =

208 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

209 
mdC⁄ãxt
->
dige°
[
ii
+3] =

210 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

212 
	`SMEMCPY
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

213 
	}
}

218 
	$Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
)

220 
u32_t
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

223 
	#S11
 7

	)

224 
	#S12
 12

	)

225 
	#S13
 17

	)

226 
	#S14
 22

	)

227 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

228 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

229 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

230 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

231 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

232 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

233 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

234 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

235 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

236 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

237 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

238 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

239 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

240 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

241 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

242 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

245 
	#S21
 5

	)

246 
	#S22
 9

	)

247 
	#S23
 14

	)

248 
	#S24
 20

	)

249 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

250 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

251 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

252 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

253 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

254 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

255 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

256 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

257 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

258 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

259 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

260 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

261 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

262 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

263 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

264 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

267 
	#S31
 4

	)

268 
	#S32
 11

	)

269 
	#S33
 16

	)

270 
	#S34
 23

	)

271 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

272 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

273 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

274 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

275 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

276 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

277 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

278 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

279 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

280 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

281 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

282 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

283 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

284 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

285 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

286 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

289 
	#S41
 6

	)

290 
	#S42
 10

	)

291 
	#S43
 15

	)

292 
	#S44
 21

	)

293 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

294 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

295 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

296 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

297 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

298 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

299 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

300 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

301 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

302 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

303 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

304 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

305 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

306 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

307 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

308 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

310 
buf
[0] +
a
;

311 
buf
[1] +
b
;

312 
buf
[2] +
c
;

313 
buf
[3] +
d
;

314 
	}
}

	@netif/ppp/md5.h

40 #i‚de‡
MD5_H


41 
	#MD5_H


	)

45 
u32_t
 
	mi
[2];

46 
u32_t
 
	mbuf
[4];

47 
	mö
[64];

48 
	mdige°
[16];

49 } 
	tMD5_CTX
;

51 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

52 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

53 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@netif/ppp/pap.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 #i‡
PAP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"auth.h
"

62 
	~"∑p.h
"

70 
u∑p_öô
 ();

71 
u∑p_lowîup
 ();

72 
u∑p_lowîdown
 ();

73 
u∑p_öput
 (, 
u_ch¨
 *, );

74 
u∑p_¥Ÿªj
 ();

76 
u∑p_timeout
 (*);

77 
u∑p_ªqtimeout
(*);

78 
u∑p_øuthªq
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

79 
u∑p_øuthack
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

80 
u∑p_øuth«k
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

81 
u∑p_ßuthªq
 (
u∑p_°©e
 *);

82 
u∑p_§e•
 (
u∑p_°©e
 *, 
u_ch¨
, u_char, *, );

88 
¥Ÿít
 
	g∑p_¥Ÿít
 = {

89 
PPP_PAP
,

90 
u∑p_öô
,

91 
u∑p_öput
,

92 
u∑p_¥Ÿªj
,

93 
u∑p_lowîup
,

94 
u∑p_lowîdown
,

95 
NULL
,

96 
NULL
,

98 
u∑p_¥öçkt
,

99 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL


110 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

121 
	$u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
)

123 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

126 
u
->
us_u£r
 = 
lu£r
;

127 
u
->
us_u£æí
 = 
	`°æí
(
lu£r
);

128 
u
->
us_∑sswd
 = 
Õassw‹d
;

129 
u
->
us_∑sswdÀn
 = 
	`°æí
(
Õassw‹d
);

130 
	}
}

139 
	$u∑p_authwôh≥î
(
unô
, *
u£r
, *
∑ssw‹d
)

141 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

143 
	`UPAPDEBUG
((
LOG_INFO
, "upap_authwithpeer: %d user=%sÖassword=%s s=%d\n",

144 
unô
, 
u£r
, 
∑ssw‹d
, 
u
->
us_˛õ¡°©e
));

146 
	`u∑p_£éogö∑sswd
(
unô
, 
u£r
, 
∑ssw‹d
);

148 
u
->
us_å™smôs
 = 0;

151 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

152 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

153 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

157 
	`u∑p_ßuthªq
(
u
);

158 
	}
}

167 
	$u∑p_auth≥î
(
unô
)

169 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

172 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

173 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

174 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

178 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

179 i‡(
u
->
us_ªqtimeout
 > 0) {

180 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

182 
	}
}

193 
	$u∑p_öô
(
unô
)

195 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

197 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_öô: %d\n", 
unô
));

198 
u
->
us_unô
 = 
unô
;

199 
u
->
us_u£r
 = 
NULL
;

200 
u
->
us_u£æí
 = 0;

201 
u
->
us_∑sswd
 = 
NULL
;

202 
u
->
us_∑sswdÀn
 = 0;

203 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

204 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

205 
u
->
us_id
 = 0;

206 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

207 
u
->
us_maxå™smôs
 = 10;

208 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

209 
	}
}

215 
	$u∑p_timeout
(*
¨g
)

217 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

219 
	`UPAPDEBUG
((
LOG_INFO
, "upap_timeout: %dÅimeout %dÉxpired s=%d\n",

220 
u
->
us_unô
, u->
us_timeouâime
, u->
us_˛õ¡°©e
));

222 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

226 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

228 
	`UPAPDEBUG
((
LOG_ERR
, "NoÑesponseÅo PAPáuthenticate-requests\n"));

229 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

230 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

234 
	`u∑p_ßuthªq
(
u
);

235 
	}
}

242 
	$u∑p_ªqtimeout
(*
¨g
)

244 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

246 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
) {

250 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

251 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

252 
	}
}

261 
	$u∑p_lowîup
(
unô
)

263 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

265 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîup: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

267 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
) {

268 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

269 } i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

270 
	`u∑p_ßuthªq
(
u
);

273 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
) {

274 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

275 } i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

276 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

277 i‡(
u
->
us_ªqtimeout
 > 0) {

278 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

281 
	}
}

290 
	$u∑p_lowîdown
(
unô
)

292 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

294 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîdown: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

296 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

297 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

299 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0) {

300 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

303 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

304 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

305 
	}
}

314 
	$u∑p_¥Ÿªj
(
unô
)

316 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

318 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

319 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed dueÅoÖrotocol-reject\n"));

320 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

322 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

323 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication ofÖeer failed (protocol-reject)\n"));

324 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

326 
	`u∑p_lowîdown
(
unô
);

327 
	}
}

334 
	$u∑p_öput
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
l
)

336 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

337 
u_ch¨
 *
öp
;

338 
u_ch¨
 
code
, 
id
;

339 
Àn
;

345 
öp
 = 
ö∑ckë
;

346 i‡(
l
 < 
UPAP_HEADERLEN
) {

347 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd short header.\n"));

350 
	`GETCHAR
(
code
, 
öp
);

351 
	`GETCHAR
(
id
, 
öp
);

352 
	`GETSHORT
(
Àn
, 
öp
);

353 i‡(
Àn
 < 
UPAP_HEADERLEN
) {

354 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd illegalÜength.\n"));

357 i‡(
Àn
 > 
l
) {

358 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd shortÖacket.\n"));

361 
Àn
 -
UPAP_HEADERLEN
;

366 
code
) {

367 
UPAP_AUTHREQ
:

368 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

371 
UPAP_AUTHACK
:

372 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

375 
UPAP_AUTHNAK
:

376 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

382 
	}
}

389 
	$u∑p_øuthªq
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

391 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

392 *
ru£r
, *
Ωasswd
;

393 
ªtcode
;

394 *
msg
;

395 
msgÀn
;

397 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth: Rcvd id %d.\n", 
id
));

399 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
) {

407 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

408 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

411 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

412 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

419 i‡(
Àn
 <  (
u_ch¨
)) {

420 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

423 
	`GETCHAR
(
ru£æí
, 
öp
);

424 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

425 i‡(
Àn
 < 0) {

426 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

429 
ru£r
 = (*Ë
öp
;

430 
	`INCPTR
(
ru£æí
, 
öp
);

431 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

432 i‡(
Àn
 < 
ΩasswdÀn
) {

433 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

436 
Ωasswd
 = (*Ë
öp
;

441 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
, 
ΩasswdÀn
, &
msg
, &
msgÀn
);

442 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

444 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

446 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

447 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

448 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 
ru£r
, 
ru£æí
);

450 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

451 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

454 i‡(
u
->
us_ªqtimeout
 > 0) {

455 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

457 
	}
}

464 
	$u∑p_øuthack
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

466 
u_ch¨
 
msgÀn
;

467 *
msg
;

469 
	`LWIP_UNUSED_ARG
(
id
);

471 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuthack: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

473 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

480 i‡(
Àn
 <  (
u_ch¨
)) {

481 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

484 
	`GETCHAR
(
msgÀn
, 
öp
);

485 
Àn
 - (
u_ch¨
);

486 i‡(
Àn
 < 
msgÀn
) {

487 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

490 
msg
 = (*Ë
öp
;

491 
	`PRINTMSG
(
msg
, 
msgÀn
);

493 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

495 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
);

496 
	}
}

503 
	$u∑p_øuth«k
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

505 
u_ch¨
 
msgÀn
;

506 *
msg
;

508 
	`LWIP_UNUSED_ARG
(
id
);

510 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth«k: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

512 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

519 i‡(
Àn
 <  (
u_ch¨
)) {

520 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

522 
	`GETCHAR
(
msgÀn
, 
öp
);

523 if(
msgÀn
 > 0) {

524 
Àn
 - (
u_ch¨
);

525 i‡(
Àn
 < 
msgÀn
) {

526 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

529 
msg
 = (*Ë
öp
;

530 
	`PRINTMSG
(
msg
, 
msgÀn
);

534 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

536 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed\n"));

537 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

538 
	}
}

545 
	$u∑p_ßuthªq
(
u∑p_°©e
 *
u
)

547 
u_ch¨
 *
ouç
;

548 
ouéí
;

550 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
)

551 + 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

552 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

554 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

556 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

557 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

558 
	`PUTSHORT
(
ouéí
, 
ouç
);

559 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

560 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

561 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

562 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

563 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

565 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

567 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_ßuth: Síàid %d\n", 
u
->
us_id
));

569 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

570 ++
u
->
us_å™smôs
;

571 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

572 
	}
}

579 
	$u∑p_§e•
(
u∑p_°©e
 *
u
, 
u_ch¨
 
code
, u_ch¨ 
id
, *
msg
, 
msgÀn
)

581 
u_ch¨
 *
ouç
;

582 
ouéí
;

584 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

585 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

586 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

588 
	`PUTCHAR
(
code
, 
ouç
);

589 
	`PUTCHAR
(
id
, 
ouç
);

590 
	`PUTSHORT
(
ouéí
, 
ouç
);

591 
	`PUTCHAR
(
msgÀn
, 
ouç
);

592 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

593 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

595 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_§e•: Síàcodê%d, id %d s=%d\n", 
code
, 
id
, 
u
->
us_˛õ¡°©e
));

596 
	}
}

602 
u∑p_¥öçkt
(

603 
u_ch¨
 *
p
,

604 
∂í
,

605 (*
¥öãr
) (*, *, ...),

606 *
¨g


609 
	`LWIP_UNUSED_ARG
(
p
);

610 
	`LWIP_UNUSED_ARG
(
∂í
);

611 
	`LWIP_UNUSED_ARG
(
¥öãr
);

612 
	`LWIP_UNUSED_ARG
(
¨g
);

614 
	}
}

	@netif/ppp/pap.h

52 #i‚de‡
PAP_H


53 
	#PAP_H


	)

55 #i‡
PAP_SUPPORT


63 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#UPAP_AUTHREQ
 1

	)

70 
	#UPAP_AUTHACK
 2

	)

71 
	#UPAP_AUTHNAK
 3

	)

76 
	#UPAPCS_INITIAL
 0

	)

77 
	#UPAPCS_CLOSED
 1

	)

78 
	#UPAPCS_PENDING
 2

	)

79 
	#UPAPCS_AUTHREQ
 3

	)

80 
	#UPAPCS_OPEN
 4

	)

81 
	#UPAPCS_BADAUTH
 5

	)

86 
	#UPAPSS_INITIAL
 0

	)

87 
	#UPAPSS_CLOSED
 1

	)

88 
	#UPAPSS_PENDING
 2

	)

89 
	#UPAPSS_LISTEN
 3

	)

90 
	#UPAPSS_OPEN
 4

	)

91 
	#UPAPSS_BADAUTH
 5

	)

101 
	su∑p_°©e
 {

102 
	mus_unô
;

103 c⁄° *
	mus_u£r
;

104 
	mus_u£æí
;

105 c⁄° *
	mus_∑sswd
;

106 
	mus_∑sswdÀn
;

107 
	mus_˛õ¡°©e
;

108 
	mus_£rvî°©e
;

109 
u_ch¨
 
	mus_id
;

110 
	mus_timeouâime
;

111 
	mus_å™smôs
;

112 
	mus_maxå™smôs
;

113 
	mus_ªqtimeout
;

114 } 
	tu∑p_°©e
;

121 
u∑p_°©e
 
u∑p
[];

123 
u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
);

124 
u∑p_authwôh≥î
 (, *, *);

125 
u∑p_auth≥î
 ();

127 
¥Ÿít
 
∑p_¥Ÿít
;

	@netif/ppp/ppp.c

82 
	~"lwù/›t.h
"

84 #i‡
PPP_SUPPORT


86 
	~"lwù/ù.h
"

88 
	~"µp.h
"

89 
	~"µpdebug.h
"

91 
	~"øndm.h
"

92 
	~"fsm.h
"

93 #i‡
PAP_SUPPORT


94 
	~"∑p.h
"

96 #i‡
CHAP_SUPPORT


97 
	~"ch≠.h
"

99 
	~"ù˝.h
"

100 
	~"l˝.h
"

101 
	~"magic.h
"

102 
	~"auth.h
"

103 #i‡
VJ_SUPPORT


104 
	~"vj.h
"

106 #i‡
PPPOE_SUPPORT


107 
	~"√tif/µp_€.h
"

110 
	~<°rög.h
>

119 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

120 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

121 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

126 
	mPDIDLE
 = 0,

127 
	mPDSTART
,

128 
	mPDADDRESS
,

129 
	mPDCONTROL
,

130 
	mPDPROTOCOL1
,

131 
	mPDPROTOCOL2
,

132 
	mPDDATA


133 } 
	tPPPDevSèãs
;

135 
	#ESCAPE_P
(
accm
, 
c
Ë(◊ccm)[(cË>> 3] & 
µpACCMMask
[¯& 0x07])

	)

143 
	sPPPC⁄åﬁ_s
 {

144 
	m›íFœg
;

145 #i‡
PPPOE_SUPPORT


146 
√tif
 *
	mëhif
;

147 
µp€_so·c
 *
	mµp€_sc
;

149 
	mif_up
;

150 
	mîrCode
;

151 #i‡
PPPOS_SUPPORT


152 
sio_fd_t
 
	mfd
;

153 
	mkûl_lök
;

154 
	msig_hup
;

155 
pbuf
 *
	möHód
, *
	möTaû
;

156 
PPPDevSèãs
 
	möSèã
;

157 
	möEsˇ≥d
;

158 
u16_t
 
	möPrŸocﬁ
;

159 
u16_t
 
	möFCS
;

161 
	mmtu
;

162 
	mpcomp
;

163 
	maccomp
;

164 
u_l⁄g
 
	mœ°XMô
;

165 
ext_accm
 
	möACCM
;

166 
ext_accm
 
	moutACCM
;

167 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


168 
	mvjE«bÀd
;

169 
vjcom¥ess
 
	mvjComp
;

172 
√tif
 
	m√tif
;

174 
µp_addrs
 
	maddrs
;

176 (*
	mlökSètusCB
)(*
	m˘x
, 
	mîrCode
, *
	m¨g
);

177 *
	mlökSètusCtx
;

179 } 
	tPPPC⁄åﬁ
;

186 
	s≈io˘l
 {

187 
	m¥Ÿocﬁ
;

188 
NPmode
 
	mmode
;

196 #i‡
PPPOS_SUPPORT


197 
µpMaö
(*
pd
);

198 
µpDr›
(
PPPC⁄åﬁ
 *
pc
);

199 
µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
);

206 
u_l⁄g
 
	gsub√tMask
;

208 
PPPC⁄åﬁ
 
	gµpC⁄åﬁ
[
NUM_PPP
];

215 
¥Ÿít
 *
	gµp_¥Ÿocﬁs
[] = {

216 &
l˝_¥Ÿít
,

217 #i‡
PAP_SUPPORT


218 &
∑p_¥Ÿít
,

220 #i‡
CHAP_SUPPORT


221 &
ch≠_¥Ÿít
,

223 #i‡
CBCP_SUPPORT


224 &
cb˝_¥Ÿít
,

226 &
ù˝_¥Ÿít
,

227 #i‡
CCP_SUPPORT


228 &
c˝_¥Ÿít
,

230 
NULL


238 
u_ch¨
 *
	gouçackë_buf
[
NUM_PPP
];

245 #i‡
PPPOS_SUPPORT


249 c⁄° 
u_sh‹t
 
	gfc°ab
[256] = {

286 
u_ch¨
 
	gµpACCMMask
[] = {

299 
	$µpMaöWakeup
(
pd
)

301 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaöWakeup: unô %d\n", 
pd
));

302 
	`sio_ªad_ab‹t
(
µpC⁄åﬁ
[
pd
].
fd
);

303 
	}
}

307 
	$µpLökTîmö©ed
(
pd
)

309 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

311 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökTîmö©ed: unô %d\n", 
pd
));

313 #i‡
PPPOE_SUPPORT


314 if(
pc
->
ëhif
) {

315 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

319 #i‡
PPPOS_SUPPORT


320 
	`µpMaöWakeup
(
pd
);

323 
	}
}

326 
	$µpLökDown
(
pd
)

328 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

330 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökDown: unô %d\n", 
pd
));

332 #i‡
PPPOE_SUPPORT


333 if(
pc
->
ëhif
) {

334 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

338 #i‡
PPPOS_SUPPORT


339 
	`µpMaöWakeup
(
pd
);

342 
	}
}

351 
	$µpSèπCB
(*
¨g
)

353 
pd
 = ()
¨g
;

355 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSèπCB: unô %d\n", 
pd
));

356 
	`l˝_lowîup
(
pd
);

357 
	`l˝_›í
(
pd
);

358 
	}
}

361 
	$µpSt›CB
(*
¨g
)

363 
pd
 = ()
¨g
;

365 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSt›CB: unô %d\n", 
pd
));

366 
	`l˝_˛o£
(
pd
, "UserÑequest");

367 
	}
}

370 
	$µpHupCB
(*
¨g
)

372 
pd
 = ()
¨g
;

374 
	`PPPDEBUG
((
LOG_DEBUG
, "µpHupCB: unô %d\n", 
pd
));

375 
	`l˝_lowîdown
(
pd
);

376 
	`lök_ãrmö©ed
(
pd
);

377 
	}
}

384 
µp_£âögs
 
	gµp_£âögs
;

386 
îr_t


387 
	$µpInô
()

389 
¥Ÿít
 *
¥Ÿp
;

390 
i
, 
j
;

392 
	`mem£t
(&
µp_£âögs
, 0, (ppp_settings));

393 
µp_£âögs
.
u£≥îdns
 = 1;

394 
	`µpSëAuth
(
PPPAUTHTYPE_NONE
, 
NULL
, NULL);

396 
	`magicInô
();

398 
i
 = 0; i < 
NUM_PPP
; i++) {

399 
µpC⁄åﬁ
[
i
].
›íFœg
 = 0;

401 
sub√tMask
 = 
	`ht⁄l
(0xffffff00);

403 
ouçackë_buf
[
i
] = (
u_ch¨
 *)
	`mem_mÆloc
(
PPP_MRU
+
PPP_HDRLEN
);

404 if(!
ouçackë_buf
[
i
]) {

405  
ERR_MEM
;

411 
j
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[j]Ë!
NULL
; ++j) {

412 (*
¥Ÿp
->
öô
)(
i
);

416 #i‡
LINK_STATS


419 
	`mem£t
(&
lwù_°©s
.
lök
, 0, (lwip_stats.link));

422 #i‡
PPPOE_SUPPORT


423 
	`µp€_öô
();

426  
ERR_OK
;

427 
	}
}

430 
	$µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
)

432 
authTy≥
) {

433 
PPPAUTHTYPE_NONE
:

435 #ifde‡
LWIP_PPP_STRICT_PAP_REJECT


436 
µp_£âögs
.
ªfu£_∑p
 = 1;

439 
µp_£âögs
.
ªfu£_∑p
 = 0;

441 
µp_£âögs
.
ªfu£_ch≠
 = 1;

444 
PPPAUTHTYPE_ANY
:

464 
µp_£âögs
.
ªfu£_∑p
 = 0;

465 
µp_£âögs
.
ªfu£_ch≠
 = 0;

468 
PPPAUTHTYPE_PAP
:

469 
µp_£âögs
.
ªfu£_∑p
 = 0;

470 
µp_£âögs
.
ªfu£_ch≠
 = 1;

473 
PPPAUTHTYPE_CHAP
:

474 
µp_£âögs
.
ªfu£_∑p
 = 1;

475 
µp_£âögs
.
ªfu£_ch≠
 = 0;

479 if(
u£r
) {

480 
	`°∫˝y
(
µp_£âögs
.
u£r
, user, (ppp_settings.user)-1);

481 
µp_£âögs
.
u£r
[(ppp_settings.user)-1] = '\0';

483 
µp_£âögs
.
u£r
[0] = '\0';

486 if(
∑sswd
) {

487 
	`°∫˝y
(
µp_£âögs
.
∑sswd
,Öasswd, (ppp_settings.passwd)-1);

488 
µp_£âögs
.
∑sswd
[(ppp_settings.passwd)-1] = '\0';

490 
µp_£âögs
.
∑sswd
[0] = '\0';

492 
	}
}

494 #i‡
PPPOS_SUPPORT


503 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

505 
PPPC⁄åﬁ
 *
pc
;

506 
pd
;

509 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

511 i‡(
pd
 >
NUM_PPP
) {

512 
pd
 = 
PPPERR_OPEN
;

514 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

518 i‡(
pd
 >= 0) {

519 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

521 
	`l˝_öô
(
pd
);

522 
pc
 = &
µpC⁄åﬁ
[
pd
];

523 
pc
->
fd
 = fd;

524 #i‡
PPPOE_SUPPORT


525 
pc
->
ëhif

NULL
;

527 
pc
->
kûl_lök
 = 0;

528 
pc
->
sig_hup
 = 0;

529 
pc
->
if_up
 = 0;

530 
pc
->
îrCode
 = 0;

531 
pc
->
öSèã
 = 
PDIDLE
;

532 
pc
->
öHód
 = 
NULL
;

533 
pc
->
öTaû
 = 
NULL
;

534 
pc
->
öEsˇ≥d
 = 0;

535 
pc
->
œ°XMô
 = 0;

537 #i‡
VJ_SUPPORT


538 
pc
->
vjE«bÀd
 = 0;

539 
	`vj_com¥ess_öô
(&
pc
->
vjComp
);

546 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

547 
pc
->
öACCM
[15] = 0x60;

548 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

549 
pc
->
outACCM
[15] = 0x60;

551 
pc
->
lökSètusCB
 =ÜinkStatusCB;

552 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

554 
	`sys_thªad_√w
(
PPP_THREAD_NAME
, 
µpMaö
, (*)
pd
, 
PPP_THREAD_STACKSIZE
, 
PPP_THREAD_PRIO
);

555 if(!
lökSètusCB
) {

556 
pd
 >0 && !
pc
->
if_up
) {

557 
	`sys_m¶ìp
(500);

558 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

559 
	`µpClo£
(
pd
);

560 i‡(
pc
->
îrCode
) {

561 
pd
 = 
pc
->
îrCode
;

563 
pd
 = 
PPPERR_CONNECT
;

570  
pd
;

571 
	}
}

574 #i‡
PPPOE_SUPPORT


575 
µpOvîEthî√tLökSètusCB
(
pd
, 
up
);

578 
	$µpOvîEthî√tClo£
(
pd
)

580 
PPPC⁄åﬁ
* 
pc
 = &
µpC⁄åﬁ
[
pd
];

583 
	`l˝_˛o£
(
pd
, 
NULL
);

585 
	`µp€_de°roy
(&
pc
->
√tif
);

586 
	}
}

588 
µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

590 
PPPC⁄åﬁ
 *
pc
;

591 
pd
;

593 
	`LWIP_UNUSED_ARG
(
£rvi˚_«me
);

594 
	`LWIP_UNUSED_ARG
(
c⁄˚¡øt‹_«me
);

597 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

598 i‡(
pd
 >
NUM_PPP
) {

599 
pd
 = 
PPPERR_OPEN
;

601 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

605 i‡(
pd
 >= 0) {

607 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

609 
	`l˝_öô
(
pd
);

611 
l˝_w™t›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

612 
l˝_w™t›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

613 
l˝_w™t›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

614 
l˝_w™t›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

616 
l˝_Ælow›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

617 
l˝_Ælow›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

618 
l˝_Ælow›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

619 
l˝_Ælow›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

621 
pc
 = &
µpC⁄åﬁ
[
pd
];

622 
pc
->
if_up
 = 0;

623 
pc
->
îrCode
 = 0;

624 
pc
->
œ°XMô
 = 0;

625 #i‡
PPPOS_SUPPORT


626 
pc
->
kûl_lök
 = 0;

627 
pc
->
sig_hup
 = 0;

628 
pc
->
öSèã
 = 
PDIDLE
;

629 
pc
->
öHód
 = 
NULL
;

630 
pc
->
öTaû
 = 
NULL
;

631 
pc
->
öEsˇ≥d
 = 0;

632 #i‡
VJ_SUPPORT


633 
pc
->
vjE«bÀd
 = 0;

636 
pc
->
ëhif
=Éthif;

638 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

639 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

641 
pc
->
lökSètusCB
 =ÜinkStatusCB;

642 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

644 if(
	`µp€_¸óã
(
ëhif
, 
pd
, 
µpOvîEthî√tLökSètusCB
, &
pc
->
µp€_sc
Ë!
ERR_OK
) {

645 
pc
->
›íFœg
 = 0;

646  
PPPERR_OPEN
;

649 
	`µp€_c⁄√˘
(
pc
->
µp€_sc
);

651 if(!
lökSètusCB
) {

652 
pd
 >0 && !
pc
->
if_up
) {

653 
	`sys_m¶ìp
(500);

654 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

655 
	`µpClo£
(
pd
);

656 i‡(
pc
->
îrCode
) {

657 
pd
 = 
pc
->
îrCode
;

659 
pd
 = 
PPPERR_CONNECT
;

666  
pd
;

667 
	}
}

675 
	$µpClo£
(
pd
)

677 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

678 
°
 = 0;

681 #i‡
PPPOE_SUPPORT


682 if(
pc
->
ëhif
) {

683 
	`PPPDEBUG
((
LOG_DEBUG
, "µpClo£: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

684 
pc
->
îrCode
 = 
PPPERR_USER
;

686 
	`t˝ù_ˇŒback
(
µpSt›CB
, (*)
pd
);

690 #i‡
PPPOS_SUPPORT


691 
pc
->
kûl_lök
 = !0;

692 
	`µpMaöWakeup
(
pd
);

696 if(!
pc
->
lökSètusCB
) {

697 
°
 >0 && 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

698 
	`sys_m¶ìp
(500);

703  
°
;

704 
	}
}

708 
	$µpSigHUP
(
pd
)

710 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

712 #i‡
PPPOE_SUPPORT


713 if(
pc
->
ëhif
) {

714 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSigHUP: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

715 
	`t˝ù_ˇŒback
(
µpHupCB
, (*)
pd
);

719 #i‡
PPPOS_SUPPORT


720 
pc
->
sig_hup
 = 1;

721 
	`µpMaöWakeup
(
pd
);

724 
	}
}

726 #i‡
PPPOS_SUPPORT


728 
	$nPut
(
PPPC⁄åﬁ
 *
pc
, 
pbuf
 *
nb
)

730 
pbuf
 *
b
;

731 
c
;

733 
b
 = 
nb
; b !
NULL
; b = b->
√xt
) {

734 if((
c
 = 
	`sio_wrôe
(
pc
->
fd
, 
b
->
∑ylﬂd
, b->
Àn
)) != b->len) {

735 
	`PPPDEBUG
((
LOG_WARNING
,

736 "PPPÇPut: incom∂ëêsio_wrôe(%d,, %uË%d\n", 
pc
->
fd
, 
b
->
Àn
, 
c
));

737 
	`LINK_STATS_INC
(
lök
.
îr
);

738 
pc
->
œ°XMô
 = 0;

743 
	`pbuf_‰ì
(
nb
);

744 
	`LINK_STATS_INC
(
lök
.
xmô
);

745 
	}
}

753 
pbuf
 *

754 
	$µpAµíd
(
u_ch¨
 
c
, 
pbuf
 *
nb
, 
ext_accm
 *
outACCM
)

756 
pbuf
 *
tb
 = 
nb
;

762 i‡(
nb
 && (
PBUF_POOL_BUFSIZE
 -Çb->
Àn
) < 2) {

763 
tb
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

764 i‡(
tb
) {

765 
nb
->
√xt
 = 
tb
;

767 
	`LINK_STATS_INC
(
lök
.
memîr
);

769 
nb
 = 
tb
;

772 i‡(
nb
) {

773 i‡(
outACCM
 && 
	`ESCAPE_P
(*outACCM, 
c
)) {

774 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
PPP_ESCAPE
;

775 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
 ^ 
PPP_TRANS
;

777 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
;

781  
tb
;

782 
	}
}

785 #i‡
PPPOE_SUPPORT


786 
îr_t


787 
	$µpifOuçutOvîEthî√t
(
pd
, 
pbuf
 *
p
)

789 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

790 
pbuf
 *
pb
;

791 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

792 
i
=0;

794 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + (
¥Ÿocﬁ
), 
PBUF_RAM
);

795 if(!
pb
) {

796 
	`LINK_STATS_INC
(
lök
.
memîr
);

797 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

798  
ERR_MEM
;

801 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

803 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

805 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

806 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
++Ë(
¥Ÿocﬁ
 >> 8) & 0xFF;

808 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
Ë
¥Ÿocﬁ
 & 0xFF;

810 
	`pbuf_chaö
(
pb
, 
p
);

812 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

813 
	`LINK_STATS_INC
(
lök
.
îr
);

814  
PPPERR_DEVICE
;

817 
	`LINK_STATS_INC
(
lök
.
xmô
);

818  
ERR_OK
;

819 
	}
}

823 
îr_t


824 
	$µpifOuçut
(
√tif
 *√tif, 
pbuf
 *
pb
, 
ù_addr
 *
ùaddr
)

826 
pd
 = ()
√tif
->
°©e
;

827 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

828 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

829 #i‡
PPPOS_SUPPORT


830 
u_öt
 
fcsOut
 = 
PPP_INITFCS
;

831 
pbuf
 *
hódMB
 = 
NULL
, *
èûMB
 = NULL, *
p
;

832 
u_ch¨
 
c
;

835 
	`LWIP_UNUSED_ARG
(
ùaddr
);

840 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
 || !
pb
) {

841 
	`PPPDEBUG
((
LOG_WARNING
, "pppifOutput[%d]: badÖarmsÖrot=%dÖb=%p\n",

842 
pd
, 
¥Ÿocﬁ
, 
pb
));

843 
	`LINK_STATS_INC
(
lök
.
›ãº
);

844 
	`LINK_STATS_INC
(
lök
.
dr›
);

845  
ERR_ARG
;

849 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

850 
	`PPPDEBUG
((
LOG_ERR
, "µpifOuçut[%d]:ÜökÇŸ up\n", 
pd
));

851 
	`LINK_STATS_INC
(
lök
.
πîr
);

852 
	`LINK_STATS_INC
(
lök
.
dr›
);

853  
ERR_RTE
;

856 #i‡
PPPOE_SUPPORT


857 if(
pc
->
ëhif
) {

858  
	`µpifOuçutOvîEthî√t
(
pd
, 
pb
);

862 #i‡
PPPOS_SUPPORT


864 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

865 i‡(
hódMB
 =
NULL
) {

866 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: fú°áŒo¯Áû\n", 
pd
));

867 
	`LINK_STATS_INC
(
lök
.
memîr
);

868 
	`LINK_STATS_INC
(
lök
.
dr›
);

869  
ERR_MEM
;

872 #i‡
VJ_SUPPORT


877 i‡(
¥Ÿocﬁ
 =
PPP_IP
 && 
pc
->
vjE«bÀd
) {

878 
	`vj_com¥ess_t˝
(&
pc
->
vjComp
, 
pb
)) {

879 
TYPE_IP
:

883 
TYPE_COMPRESSED_TCP
:

884 
¥Ÿocﬁ
 = 
PPP_VJC_COMP
;

886 
TYPE_UNCOMPRESSED_TCP
:

887 
¥Ÿocﬁ
 = 
PPP_VJC_UNCOMP
;

890 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: bad IPÖackë\n", 
pd
));

891 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

892 
	`LINK_STATS_INC
(
lök
.
dr›
);

893 
	`pbuf_‰ì
(
hódMB
);

894  
ERR_VAL
;

899 
èûMB
 = 
hódMB
;

902 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

903 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

906 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

907 i‡(!
pc
->
accomp
) {

908 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_ALLSTATIONS
);

909 
èûMB
 = 
	`µpAµíd
(
PPP_ALLSTATIONS
,ÅaûMB, &
pc
->
outACCM
);

910 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_UI
);

911 
èûMB
 = 
	`µpAµíd
(
PPP_UI
,ÅaûMB, &
pc
->
outACCM
);

913 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

914 
c
 = (
¥Ÿocﬁ
 >> 8) & 0xFF;

915 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

916 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

918 
c
 = 
¥Ÿocﬁ
 & 0xFF;

919 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

920 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

923 
p
 = 
pb
;Ö;Ö =Ö->
√xt
) {

924 
n
;

925 
u_ch¨
 *
sPå
;

927 
sPå
 = (
u_ch¨
*)
p
->
∑ylﬂd
;

928 
n
 = 
p
->
Àn
;

929 
n
-- > 0) {

930 
c
 = *
sPå
++;

933 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

936 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

941 
c
 = ~
fcsOut
 & 0xFF;

942 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

943 
c
 = (~
fcsOut
 >> 8) & 0xFF;

944 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

945 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

948 i‡(!
èûMB
) {

949 
	`PPPDEBUG
((
LOG_WARNING
,

951 
pd
, 
¥Ÿocﬁ
));

952 
	`pbuf_‰ì
(
hódMB
);

953 
	`LINK_STATS_INC
(
lök
.
memîr
);

954 
	`LINK_STATS_INC
(
lök
.
dr›
);

955  
ERR_MEM
;

959 
	`PPPDEBUG
((
LOG_INFO
, "µpifOuçut[%d]:ÖrŸo=0x%04X\n", 
pd
, 
¥Ÿocﬁ
));

961 
	`nPut
(
pc
, 
hódMB
);

964  
ERR_OK
;

965 
	}
}

970 
	$µpIOCé
(
pd
, 
cmd
, *
¨g
)

972 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

973 
°
 = 0;

975 i‡(
pd
 < 0 ||Öd >
NUM_PPP
) {

976 
°
 = 
PPPERR_PARAM
;

978 
cmd
) {

979 
PPPCTLG_UPSTATUS
:

980 i‡(
¨g
) {

981 *(*)
¨g
 = ()(
pc
->
if_up
);

983 
°
 = 
PPPERR_PARAM
;

986 
PPPCTLS_ERRCODE
:

987 i‡(
¨g
) {

988 
pc
->
îrCode
 = *(*)
¨g
;

990 
°
 = 
PPPERR_PARAM
;

993 
PPPCTLG_ERRCODE
:

994 i‡(
¨g
) {

995 *(*)
¨g
 = ()(
pc
->
îrCode
);

997 
°
 = 
PPPERR_PARAM
;

1000 #i‡
PPPOS_SUPPORT


1001 
PPPCTLG_FD
:

1002 i‡(
¨g
) {

1003 *(
sio_fd_t
 *)
¨g
 = 
pc
->
fd
;

1005 
°
 = 
PPPERR_PARAM
;

1010 
°
 = 
PPPERR_PARAM
;

1015  
°
;

1016 
	}
}

1021 
u_öt


1022 
	$µpMTU
(
pd
)

1024 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1025 
u_öt
 
°
;

1028 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1029 
°
 = 0;

1031 
°
 = 
pc
->
mtu
;

1034  
°
;

1035 
	}
}

1037 #i‡
PPPOE_SUPPORT


1039 
	$µpWrôeOvîEthî√t
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1041 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1042 
pbuf
 *
pb
;

1045 
s
 += 2;

1046 
n
 -= 2;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + 
n
, 
PBUF_RAM
);

1049 if(!
pb
) {

1050 
	`LINK_STATS_INC
(
lök
.
memîr
);

1051 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1052  
PPPERR_ALLOC
;

1055 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

1057 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1059 
	`MEMCPY
(
pb
->
∑ylﬂd
, 
s
, 
n
);

1061 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

1062 
	`LINK_STATS_INC
(
lök
.
îr
);

1063  
PPPERR_DEVICE
;

1066 
	`LINK_STATS_INC
(
lök
.
xmô
);

1067  
PPPERR_NONE
;

1068 
	}
}

1077 
	$µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1079 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1080 #i‡
PPPOS_SUPPORT


1081 
u_ch¨
 
c
;

1082 
u_öt
 
fcsOut
;

1083 
pbuf
 *
hódMB
, *
èûMB
;

1086 #i‡
PPPOE_SUPPORT


1087 if(
pc
->
ëhif
) {

1088  
	`µpWrôeOvîEthî√t
(
pd
, 
s
, 
n
);

1092 #i‡
PPPOS_SUPPORT


1093 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1094 i‡(
hódMB
 =
NULL
) {

1095 
	`LINK_STATS_INC
(
lök
.
memîr
);

1096 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1097  
PPPERR_ALLOC
;

1100 
èûMB
 = 
hódMB
;

1104 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

1105 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1107 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1109 
fcsOut
 = 
PPP_INITFCS
;

1111 
n
-- > 0) {

1112 
c
 = *
s
++;

1115 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

1118 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1122 
c
 = ~
fcsOut
 & 0xFF;

1123 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1124 
c
 = (~
fcsOut
 >> 8) & 0xFF;

1125 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1126 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1130 i‡(!
èûMB
) {

1131 
	`PPPDEBUG
((
LOG_WARNING
,

1132 "µpWrôe[%d]: AŒo¯î∏- dr›pögÖbu‡Àn=%d\n", 
pd
, 
hódMB
->
Àn
));

1134 
	`pbuf_‰ì
(
hódMB
);

1135 
	`LINK_STATS_INC
(
lök
.
memîr
);

1136 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1137  
PPPERR_ALLOC
;

1140 
	`PPPDEBUG
((
LOG_INFO
, "µpWrôe[%d]:Üí=%d\n", 
pd
, 
hódMB
->
Àn
));

1142 
	`nPut
(
pc
, 
hódMB
);

1145  
PPPERR_NONE
;

1146 
	}
}

1153 
	$µp_£nd_c⁄fig
–
unô
, 
mtu
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1155 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1156 
i
;

1158 
pc
->
mtu
 = mtu;

1159 
pc
->
pcomp
 =Öcomp;

1160 
pc
->
accomp
 =áccomp;

1163 
i
 = 0; i < 32/8; i++) {

1164 
pc
->
outACCM
[
i
] = (
u_ch¨
)((
asyncm≠
 >> (8 * i)) & 0xFF);

1166 
	`PPPDEBUG
((
LOG_INFO
, "ppp_send_config[%d]: outACCM=%X %X %X %X\n",

1167 
unô
,

1168 
pc
->
outACCM
[0],Öc->outACCM[1],Öc->outACCM[2],Öc->outACCM[3]));

1169 
	}
}

1176 
	$µp_£t_xaccm
(
unô
, 
ext_accm
 *
accm
)

1178 
	`SMEMCPY
(
µpC⁄åﬁ
[
unô
].
outACCM
, 
accm
, (
ext_accm
));

1179 
	`PPPDEBUG
((
LOG_INFO
, "ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",

1180 
unô
,

1181 
µpC⁄åﬁ
[
unô
].
outACCM
[0],

1182 
µpC⁄åﬁ
[
unô
].
outACCM
[1],

1183 
µpC⁄åﬁ
[
unô
].
outACCM
[2],

1184 
µpC⁄åﬁ
[
unô
].
outACCM
[3]));

1185 
	}
}

1193 
	$µp_ªcv_c⁄fig
–
unô
, 
mru
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1195 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1196 
i
;

1198 
	`LWIP_UNUSED_ARG
(
accomp
);

1199 
	`LWIP_UNUSED_ARG
(
pcomp
);

1200 
	`LWIP_UNUSED_ARG
(
mru
);

1203 
i
 = 0; i < 32 / 8; i++) {

1204 
pc
->
öACCM
[
i
] = (
u_ch¨
)(
asyncm≠
 >> (i * 8));

1206 
	`PPPDEBUG
((
LOG_INFO
, "ppp_recv_config[%d]: inACCM=%X %X %X %X\n",

1207 
unô
,

1208 
pc
->
öACCM
[0],Öc->inACCM[1],Öc->inACCM[2],Öc->inACCM[3]));

1209 
	}
}

1219 
	$c˝_ã°
–
unô
, 
›t_Àn
, 
f‹_å™smô
, 
u_ch¨
 *
›t_±r
)

1222 
	}
}

1228 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1231 
	}
}

1239 
	$c˝_Áèl_îr‹
(
unô
)

1243 
	}
}

1250 
	$gë_idÀ_time
(
u
, 
µp_idÀ
 *
ù
)

1253 
	`LWIP_UNUSED_ARG
(
u
);

1254 
	`LWIP_UNUSED_ARG
(
ù
);

1257 
	}
}

1268 
u32_t


1269 
	$GëMask
(
u32_t
 
addr
)

1271 
u32_t
 
mask
, 
nmask
;

1273 
	`ht⁄l
(
addr
);

1274 i‡(
	`IN_CLASSA
(
addr
)) {

1275 
nmask
 = 
IN_CLASSA_NET
;

1276 } i‡(
	`IN_CLASSB
(
addr
)) {

1277 
nmask
 = 
IN_CLASSB_NET
;

1279 
nmask
 = 
IN_CLASSC_NET
;

1283 
mask
 = 
sub√tMask
 | 
	`ht⁄l
(
nmask
);

1290  
mask
;

1291 
	}
}

1297 
	$sifvjcomp
–
pd
, 
vjcomp
, 
cidcomp
, 
maxcid
)

1299 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1300 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1302 
pc
->
vjE«bÀd
 = 
vjcomp
;

1303 
pc
->
vjComp
.
com¥essSlŸ
 = 
cidcomp
;

1304 
pc
->
vjComp
.
maxSlŸIndex
 = 
maxcid
;

1305 
	`PPPDEBUG
((
LOG_INFO
, "sifvjcomp: VJ compressÉnable=%d slot=%d max slot=%d\n",

1306 
vjcomp
, 
cidcomp
, 
maxcid
));

1310 
	}
}

1315 
îr_t


1316 
	$µpifNëifInô
(
√tif
 *netif)

1318 
√tif
->
«me
[0] = 'p';

1319 
√tif
->
«me
[1] = 'p';

1320 
√tif
->
ouçut
 = 
µpifOuçut
;

1321 
√tif
->
mtu
 = 
	`µpMTU
((Íëif->
°©e
);

1322  
ERR_OK
;

1323 
	}
}

1330 
	$sifup
(
pd
)

1332 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1333 
°
 = 1;

1335 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1336 
°
 = 0;

1337 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1339 
	`√tif_ªmove
(&
pc
->
√tif
);

1340 i‡(
	`√tif_add
(&
pc
->
√tif
, &pc->
addrs
.
our_ùaddr
, &pc->addrs.
√tmask
, &pc->addrs.
his_ùaddr
, (*)
pd
, 
µpifNëifInô
, 
ù_öput
)) {

1341 
	`√tif_£t_up
(&
pc
->
√tif
);

1342 
pc
->
if_up
 = 1;

1343 
pc
->
îrCode
 = 
PPPERR_NONE
;

1345 
	`PPPDEBUG
((
LOG_DEBUG
, "sifup: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1346 if(
pc
->
lökSètusCB
) {

1347 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
, &pc->
addrs
);

1350 
°
 = 0;

1351 
	`PPPDEBUG
((
LOG_ERR
, "sifup[%d]:Çëif_add faûed\n", 
pd
));

1355  
°
;

1356 
	}
}

1362 
	$si‚pmode
(
u
, 
¥Ÿo
, 
NPmode
 
mode
)

1364 
	`LWIP_UNUSED_ARG
(
u
);

1365 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

1366 
	`LWIP_UNUSED_ARG
(
mode
);

1368 
	}
}

1374 
	$sifdown
(
pd
)

1376 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1377 
°
 = 1;

1379 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1380 
°
 = 0;

1381 
	`PPPDEBUG
((
LOG_WARNING
, "sifdown[%d]: badÖ¨ms\n", 
pd
));

1383 
pc
->
if_up
 = 0;

1384 
	`√tif_ªmove
(&
pc
->
√tif
);

1385 
	`PPPDEBUG
((
LOG_DEBUG
, "sifdown: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1386 if(
pc
->
lökSètusCB
) {

1387 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
, 
PPPERR_CONNECT
, 
NULL
);

1390  
°
;

1391 
	}
}

1403 
	$siÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
, u32_à
m
, u32_à
ns1
, u32_à
ns2
)

1405 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1406 
°
 = 1;

1408 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1409 
°
 = 0;

1410 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1412 
	`SMEMCPY
(&
pc
->
addrs
.
our_ùaddr
, &
o
, (o));

1413 
	`SMEMCPY
(&
pc
->
addrs
.
his_ùaddr
, &
h
, (h));

1414 
	`SMEMCPY
(&
pc
->
addrs
.
√tmask
, &
m
, (m));

1415 
	`SMEMCPY
(&
pc
->
addrs
.
dns1
, &
ns1
, (ns1));

1416 
	`SMEMCPY
(&
pc
->
addrs
.
dns2
, &
ns2
, (ns2));

1418  
°
;

1419 
	}
}

1429 
	$ciÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
)

1431 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1432 
°
 = 1;

1434 
	`LWIP_UNUSED_ARG
(
o
);

1435 
	`LWIP_UNUSED_ARG
(
h
);

1436 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1437 
°
 = 0;

1438 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1440 
	`IP4_ADDR
(&
pc
->
addrs
.
our_ùaddr
, 0,0,0,0);

1441 
	`IP4_ADDR
(&
pc
->
addrs
.
his_ùaddr
, 0,0,0,0);

1442 
	`IP4_ADDR
(&
pc
->
addrs
.
√tmask
, 255,255,255,0);

1443 
	`IP4_ADDR
(&
pc
->
addrs
.
dns1
, 0,0,0,0);

1444 
	`IP4_ADDR
(&
pc
->
addrs
.
dns2
, 0,0,0,0);

1446  
°
;

1447 
	}
}

1453 
	$sifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1455 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1456 
°
 = 1;

1458 
	`LWIP_UNUSED_ARG
(
l
);

1459 
	`LWIP_UNUSED_ARG
(
g
);

1461 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1462 
°
 = 0;

1463 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1465 
	`√tif_£t_deÁu…
(&
pc
->
√tif
);

1470  
°
;

1471 
	}
}

1477 
	$cifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1479 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1480 
°
 = 1;

1482 
	`LWIP_UNUSED_ARG
(
l
);

1483 
	`LWIP_UNUSED_ARG
(
g
);

1485 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1486 
°
 = 0;

1487 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1489 
	`√tif_£t_deÁu…
(
NULL
);

1492  
°
;

1493 
	}
}

1499 #i‡
PPPOS_SUPPORT


1503 
	$µpMaö
(*
¨g
)

1505 
pd
 = ()
¨g
;

1506 
pbuf
 *
p
;

1507 
PPPC⁄åﬁ
* 
pc
;

1508 
c
;

1510 
pc
 = &
µpC⁄åﬁ
[
pd
];

1512 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
PPP_MRU
+
PPP_HDRLEN
, 
PBUF_RAM
);

1513 i‡(!
p
) {

1514 
	`LWIP_ASSERT
("∞!NULL", 
p
);

1515 
pc
->
îrCode
 = 
PPPERR_ALLOC
;

1516 
out
;

1522 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1523 
	`t˝ù_ˇŒback
(
µpSèπCB
, 
¨g
);

1524 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

1525 i‡(
pc
->
kûl_lök
) {

1526 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

1527 
pc
->
îrCode
 = 
PPPERR_USER
;

1529 
	`t˝ù_ˇŒback
(
µpSt›CB
, 
¨g
);

1530 
pc
->
kûl_lök
 = 0;

1531 } i‡(
pc
->
sig_hup
) {

1532 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

1533 
pc
->
sig_hup
 = 0;

1534 
	`t˝ù_ˇŒback
(
µpHupCB
, 
¨g
);

1536 
c
 = 
	`sio_ªad
(
pc
->
fd
, 
p
->
∑ylﬂd
,Ö->
Àn
);

1537 if(
c
 > 0) {

1538 
	`µpInProc
(
pd
, 
p
->
∑ylﬂd
, 
c
);

1540 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sio_ªadÜí=%dÑëu∫ed %d\n", 
pd
, 
p
->
Àn
, 
c
));

1541 
	`sys_m¶ìp
(1);

1545 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: PHASE_DEAD\n", 
pd
));

1546 
	`µpDr›
(
pc
);

1547 
	`pbuf_‰ì
(
p
);

1549 
out
:

1550 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1551 if(
pc
->
lökSètusCB
) {

1552 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1555 
pc
->
›íFœg
 = 0;

1556 
	}
}

1559 #i‡
PPPOE_SUPPORT


1562 
	$µpOvîEthî√tInôFaûed
(* 
¨g
)

1564 
PPPC⁄åﬁ
* 
pc
;

1565 
pd
 = ()
¨g
;

1567 
	`µpHupCB
(
¨g
);

1568 
	`µpSt›CB
(
¨g
);

1570 
pc
 = &
µpC⁄åﬁ
[
pd
];

1571 
	`µp€_de°roy
(&
pc
->
√tif
);

1572 
pc
->
›íFœg
 = 0;

1574 if(
pc
->
lökSètusCB
) {

1575 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1577 
	}
}

1580 
	$µpOvîEthî√tLökSètusCB
(
pd
, 
up
)

1582 if(
up
) {

1583 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1584 
	`t˝ù_ˇŒback
(
µpSèπCB
, (*)
pd
);

1586 
PPPC⁄åﬁ
* 
pc
;

1587 
pc
 = &
µpC⁄åﬁ
[
pd
];

1588 
	`t˝ù_ˇŒback
(
µpOvîEthî√tInôFaûed
, (*)
pd
);

1590 
	}
}

1593 
pbuf
 *

1594 
	$µpSögÀBuf
(
pbuf
 *
p
)

1596 
pbuf
 *
q
, *
b
;

1597 
u_ch¨
 *
∂
;

1599 if(
p
->
tŸ_Àn
 =p->
Àn
) {

1600  
p
;

1603 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

1604 if(!
q
) {

1605 
	`PPPDEBUG
((
LOG_ERR
,

1606 "µpSögÀBuf: u«bÀÅÿÆlo¯√w bu‡(%d)\n", 
p
->
tŸ_Àn
));

1607  
p
;

1610 
b
 = 
p
, 
∂
 = 
q
->
∑ylﬂd
; b !
NULL
; b = b->
√xt
) {

1611 
	`MEMCPY
(
∂
, 
b
->
∑ylﬂd
, b->
Àn
);

1612 
∂
 +
b
->
Àn
;

1615 
	`pbuf_‰ì
(
p
);

1617  
q
;

1618 
	}
}

1620 
	sµpI≈utHódî
 {

1621 
	munô
;

1622 
u16_t
 
	m¥Ÿo
;

1630 
	$µpI≈ut
(*
¨g
)

1632 
pbuf
 *
nb
 = (pbu‡*)
¨g
;

1633 
u16_t
 
¥Ÿocﬁ
;

1634 
pd
;

1636 
pd
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
unô
;

1637 
¥Ÿocﬁ
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
¥Ÿo
;

1639 if(
	`pbuf_hódî
(
nb
, -()(
µpI≈utHódî
))) {

1640 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1641 
dr›
;

1644 
	`LINK_STATS_INC
(
lök
.
ªcv
);

1651 if((
l˝_pha£
[
pd
] <
PHASE_AUTHENTICATE
Ë&& (
¥Ÿocﬁ
 !
PPP_LCP
)) {

1652 if(!((
¥Ÿocﬁ
 =
PPP_LQR
Ë|| (¥Ÿocﬁ =
PPP_PAP
Ë|| (¥Ÿocﬁ =
PPP_CHAP
)) ||

1653 (
l˝_pha£
[
pd
] !
PHASE_AUTHENTICATE
)) {

1654 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut: disˇrdögÖrŸÿ0x%04X i¿pha£ %d\n", 
¥Ÿocﬁ
, 
l˝_pha£
[
pd
]));

1655 
dr›
;

1659 
¥Ÿocﬁ
) {

1660 
PPP_VJC_COMP
:

1661 #i‡
VJ_SUPPORT


1662 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_com∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1667 i‡((
	`vj_uncom¥ess_t˝
(&
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&& (µpC⁄åﬁ[pd].
√tif
.
öput
)) {

1668 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1672 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ com¥es£d\n", 
pd
));

1675 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: dr› VJ Com∞ö %d:%s\n", 
pd
, 
nb
->
Àn
,Çb->
∑ylﬂd
));

1679 
PPP_VJC_UNCOMP
:

1680 #i‡
VJ_SUPPORT


1681 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_u¿öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1686 i‡((
	`vj_uncom¥ess_uncomp
(
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&&ÖµC⁄åﬁ[pd].
√tif
.
öput
) {

1687 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1691 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ uncom¥es£d\n", 
pd
));

1694 
	`PPPDEBUG
((
LOG_INFO
,

1696 
pd
, 
nb
->
Àn
, 
	`LWIP_MIN
“b->À¿* 2, 40),Çb->
∑ylﬂd
));

1700 
PPP_IP
:

1701 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: i∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1702 i‡(
µpC⁄åﬁ
[
pd
].
√tif
.
öput
) {

1703 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1709 
¥Ÿít
 *
¥Ÿp
;

1710 
i
;

1715 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1716 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1717 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: %†Àn=%d\n", 
pd
, 
¥Ÿp
->
«me
, 
nb
->
Àn
));

1718 
nb
 = 
	`µpSögÀBuf
(nb);

1719 (*
¥Ÿp
->
öput
)(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1720 
out
;

1725 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]:Ñeje˘ög unsuµ‹ãdÖrŸÿ0x%04XÜí=%d\n", 
pd
, 
¥Ÿocﬁ
, 
nb
->
Àn
));

1726 i‡(
	`pbuf_hódî
(
nb
, (
¥Ÿocﬁ
))) {

1727 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1728 
dr›
;

1730 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1731 
¥Ÿocﬁ
 = 
	`ht⁄s
(protocol);

1732 
	`SMEMCPY
(
nb
->
∑ylﬂd
, &
¥Ÿocﬁ
, (protocol));

1734 
	`l˝_•rŸªj
(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1739 
dr›
:

1740 
	`LINK_STATS_INC
(
lök
.
dr›
);

1742 
out
:

1743 
	`pbuf_‰ì
(
nb
);

1745 
	}
}

1747 #i‡
PPPOS_SUPPORT


1752 
	$µpDr›
(
PPPC⁄åﬁ
 *
pc
)

1754 i‡(
pc
->
öHód
 !
NULL
) {

1756 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›: %d:%.*H\n", 
pc
->
öHód
->
Àn
, 
	`mö
(60,Öc->öHód->À¿* 2),Öc->öHód->
∑ylﬂd
));

1758 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›:Öbu‡Àn=%d\n", 
pc
->
öHód
->
Àn
));

1759 i‡(
pc
->
öTaû
 && (pc->öTaû !pc->
öHód
)) {

1760 
	`pbuf_‰ì
(
pc
->
öTaû
);

1762 
	`pbuf_‰ì
(
pc
->
öHód
);

1763 
pc
->
öHód
 = 
NULL
;

1764 
pc
->
öTaû
 = 
NULL
;

1766 #i‡
VJ_SUPPORT


1767 
	`vj_uncom¥ess_îr
(&
pc
->
vjComp
);

1770 
	`LINK_STATS_INC
(
lök
.
dr›
);

1771 
	}
}

1777 
	$µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
)

1779 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1780 
pbuf
 *
√xtNBuf
;

1781 
u_ch¨
 
curCh¨
;

1783 
	`PPPDEBUG
((
LOG_DEBUG
, "µpInProc[%d]: gŸ %d byãs\n", 
pd
, 
l
));

1784 
l
-- > 0) {

1785 
curCh¨
 = *
s
++;

1788 i‡(
	`ESCAPE_P
(
pc
->
öACCM
, 
curCh¨
)) {

1794 i‡(
curCh¨
 =
PPP_ESCAPE
) {

1795 
pc
->
öEsˇ≥d
 = 1;

1797 } i‡(
curCh¨
 =
PPP_FLAG
) {

1799 i‡(
pc
->
öSèã
 <
PDADDRESS
) {

1802 } i‡(
pc
->
öSèã
 < 
PDDATA
) {

1803 
	`PPPDEBUG
((
LOG_WARNING
,

1805 
pd
, 
pc
->
öSèã
));

1806 
	`LINK_STATS_INC
(
lök
.
À√º
);

1807 
	`µpDr›
(
pc
);

1809 } i‡(
pc
->
öFCS
 !
PPP_GOODFCS
) {

1810 
	`PPPDEBUG
((
LOG_INFO
,

1812 
pd
, 
pc
->
öFCS
,Öc->
öPrŸocﬁ
));

1813 
	`LINK_STATS_INC
(
lök
.
chkîr
);

1814 
	`µpDr›
(
pc
);

1818 if(
pc
->
öTaû
->
Àn
 >= 2) {

1819 
pc
->
öTaû
->
Àn
 -= 2;

1821 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1822 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1823 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1826 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1827 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1828 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1831 
	`pbuf_ªÆloc
(
pc
->
öHód
,Öc->öHód->
tŸ_Àn
 - 2);

1835 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pc
->
öHód
Ë!
ERR_OK
) {

1836 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1837 
	`pbuf_‰ì
(
pc
->
öHód
);

1838 
	`LINK_STATS_INC
(
lök
.
dr›
);

1840 
pc
->
öHód
 = 
NULL
;

1841 
pc
->
öTaû
 = 
NULL
;

1845 
pc
->
öFCS
 = 
PPP_INITFCS
;

1846 
pc
->
öSèã
 = 
PDADDRESS
;

1847 
pc
->
öEsˇ≥d
 = 0;

1851 
	`PPPDEBUG
((
LOG_WARNING
,

1852 "µpInProc[%d]: Dr›pög ACCM ch¨ <%d>\n", 
pd
, 
curCh¨
));

1857 i‡(
pc
->
öEsˇ≥d
) {

1858 
pc
->
öEsˇ≥d
 = 0;

1859 
curCh¨
 ^
PPP_TRANS
;

1863 
pc
->
öSèã
) {

1864 
PDIDLE
:

1867 i‡(
curCh¨
 !
PPP_ALLSTATIONS
) {

1872 
PDSTART
:

1874 
pc
->
öFCS
 = 
PPP_INITFCS
;

1877 
PDADDRESS
:

1878 i‡(
curCh¨
 =
PPP_ALLSTATIONS
) {

1879 
pc
->
öSèã
 = 
PDCONTROL
;

1884 
PDCONTROL
:

1886 i‡(
curCh¨
 =
PPP_UI
) {

1887 
pc
->
öSèã
 = 
PDPROTOCOL1
;

1892 
	`PPPDEBUG
((
LOG_WARNING
,

1893 "µpInProc[%d]: InvÆid c⁄åﬁ <%d>\n", 
pd
, 
curCh¨
));

1894 
pc
->
öSèã
 = 
PDSTART
;

1897 
PDPROTOCOL1
:

1900 i‡(
curCh¨
 & 1) {

1901 
pc
->
öPrŸocﬁ
 = 
curCh¨
;

1902 
pc
->
öSèã
 = 
PDDATA
;

1904 
pc
->
öPrŸocﬁ
 = (
u_öt
)
curCh¨
 << 8;

1905 
pc
->
öSèã
 = 
PDPROTOCOL2
;

1908 
PDPROTOCOL2
:

1909 
pc
->
öPrŸocﬁ
 |
curCh¨
;

1910 
pc
->
öSèã
 = 
PDDATA
;

1912 
PDDATA
:

1914 i‡(
pc
->
öTaû
 =
NULL
 ||Öc->öTaû->
Àn
 =
PBUF_POOL_BUFSIZE
) {

1915 if(
pc
->
öTaû
) {

1916 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1917 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1918 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1922 
√xtNBuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1923 i‡(
√xtNBuf
 =
NULL
) {

1927 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]: NO FREE MBUFS!\n", 
pd
));

1928 
	`LINK_STATS_INC
(
lök
.
memîr
);

1929 
	`µpDr›
(
pc
);

1930 
pc
->
öSèã
 = 
PDSTART
;

1933 i‡(
pc
->
öHód
 =
NULL
) {

1934 
µpI≈utHódî
 *
pih
 = 
√xtNBuf
->
∑ylﬂd
;

1936 
pih
->
unô
 = 
pd
;

1937 
pih
->
¥Ÿo
 = 
pc
->
öPrŸocﬁ
;

1939 
√xtNBuf
->
Àn
 +(*
pih
);

1941 
pc
->
öHód
 = 
√xtNBuf
;

1943 
pc
->
öTaû
 = 
√xtNBuf
;

1946 ((
u_ch¨
*)
pc
->
öTaû
->
∑ylﬂd
)[pc->öTaû->
Àn
++] = 
curCh¨
;

1951 
pc
->
öFCS
 = 
	`PPP_FCS
’c->öFCS, 
curCh¨
);

1955 
	`avR™domize
();

1956 
	}
}

1959 #i‡
PPPOE_SUPPORT


1961 
	$µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
)

1963 
µpI≈utHódî
 *
pih
;

1964 
u16_t
 
öPrŸocﬁ
;

1966 if(
pb
->
Àn
 < (
öPrŸocﬁ
)) {

1967 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet:Åoo small forÖrotocol field\n"));

1968 
dr›
;

1971 
öPrŸocﬁ
 = (((
u8_t
 *)
pb
->
∑ylﬂd
)[0] << 8) | ((u8_t*)pb->payload)[1];

1974 i‡(
	`pbuf_hódî
(
pb
, (*
pih
Ë- (
öPrŸocﬁ
)) != 0) {

1975 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet: couldÇotállocateÑoom for header\n"));

1976 
dr›
;

1979 
pih
 = 
pb
->
∑ylﬂd
;

1981 
pih
->
unô
 = 
pd
;

1982 
pih
->
¥Ÿo
 = 
öPrŸocﬁ
;

1985 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pb
Ë!
ERR_OK
) {

1986 
	`PPPDEBUG
((
LOG_ERR
, "µpInProcOvîEthî√t[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1987 
dr›
;

1992 
dr›
:

1993 
	`LINK_STATS_INC
(
lök
.
dr›
);

1994 
	`pbuf_‰ì
(
pb
);

1996 
	}
}

	@netif/ppp/ppp.h

34 #i‚de‡
PPP_H


35 
	#PPP_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"lwù/def.h
"

42 
	~"lwù/sio.h
"

43 
	~"lwù/≠i.h
"

44 
	~"lwù/sockës.h
"

45 
	~"lwù/°©s.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/√tif.h
"

96 
	#TIMEOUT
(
f
, 
a
, 
t
Ë
	`sys_u¡imeout
((f), (a)), 
	`sys_timeout
(—)*1000, (f), (a))

	)

97 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

100 #i‚de‡
__u_ch¨_deföed


103 
	tu_l⁄g
;

104 
	tu_öt
;

105 
	tu_sh‹t
;

106 
	tu_ch¨
;

118 
	#PPP_HDRLEN
 4

	)

119 
	#PPP_FCSLEN
 2

	)

125 
	#PPP_ALLSTATIONS
 0xf‡

	)

126 
	#PPP_UI
 0x03

	)

127 
	#PPP_FLAG
 0x7ê

	)

128 
	#PPP_ESCAPE
 0x7d

	)

129 
	#PPP_TRANS
 0x20

	)

134 
	#PPP_IP
 0x21

	)

135 
	#PPP_AT
 0x29

	)

136 
	#PPP_VJC_COMP
 0x2d

	)

137 
	#PPP_VJC_UNCOMP
 0x2‡

	)

138 
	#PPP_COMP
 0xfd

	)

139 
	#PPP_IPCP
 0x8021

	)

140 
	#PPP_ATCP
 0x8029

	)

141 
	#PPP_CCP
 0x80fd

	)

142 
	#PPP_LCP
 0xc021

	)

143 
	#PPP_PAP
 0xc023

	)

144 
	#PPP_LQR
 0xc025

	)

145 
	#PPP_CHAP
 0xc223

	)

146 
	#PPP_CBCP
 0xc029

	)

151 
	#PPP_INITFCS
 0xfff‡

	)

152 
	#PPP_GOODFCS
 0xf0b8

	)

153 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

158 
u_ch¨
 
	text_accm
[32];

163 
	eNPmode
 {

164 
	mNPMODE_PASS
,

165 
	mNPMODE_DROP
,

166 
	mNPMODE_ERROR
,

167 
	mNPMODE_QUEUE


176 
	#GETCHAR
(
c
, 
˝
) { \

177 (
c
Ë*(
˝
)++; \

178 }

	)

179 
	#PUTCHAR
(
c
, 
˝
) { \

180 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

181 }

	)

184 
	#GETSHORT
(
s
, 
˝
) { \

185 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

186 (
s
Ë|*(
˝
); (cp)++; \

187 }

	)

188 
	#PUTSHORT
(
s
, 
˝
) { \

189 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

190 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

191 }

	)

193 
	#GETLONG
(
l
, 
˝
) { \

194 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

195 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

196 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

197 (
l
Ë|*(
˝
); (cp)++; \

198 }

	)

199 
	#PUTLONG
(
l
, 
˝
) { \

200 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

201 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

202 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

203 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

204 }

	)

207 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

208 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

210 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

211 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

212 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

214 #i‡
PPP_DEBUG


215 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`µp_åa˚
(
LOG_INFO
, "RemŸêmesßge: %s\n", m); }

	)

217 
	#PRINTMSG
(
m
, 
l
)

	)

223 
	#MAKEHEADER
(
p
, 
t
) { \

224 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

225 
	`PUTCHAR
(
PPP_UI
, 
p
); \

226 
	`PUTSHORT
(
t
, 
p
); }

	)

233 
	#PPPERR_NONE
 0

	)

234 
	#PPPERR_PARAM
 -1

	)

235 
	#PPPERR_OPEN
 -2

	)

236 
	#PPPERR_DEVICE
 -3

	)

237 
	#PPPERR_ALLOC
 -4

	)

238 
	#PPPERR_USER
 -5

	)

239 
	#PPPERR_CONNECT
 -6

	)

240 
	#PPPERR_AUTHFAIL
 -7

	)

241 
	#PPPERR_PROTOCOL
 -8

	)

250 
	#PPPCTLG_UPSTATUS
 100

	)

251 
	#PPPCTLS_ERRCODE
 101

	)

252 
	#PPPCTLG_ERRCODE
 102

	)

253 
	#PPPCTLG_FD
 103

	)

263 
	s¥Ÿít
 {

264 
u_sh‹t
 
	m¥Ÿocﬁ
;

266 (*
	möô
Ë(
	munô
);

268 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

270 (*
	m¥Ÿªj
Ë(
	munô
);

272 (*
	mlowîup
Ë(
	munô
);

274 (*
	mlowîdown
Ë(
	munô
);

276 (*
	m›í
Ë(
	munô
);

278 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

281 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

282 (*
	m¥öãr
) (*, *, ...),

283 *
	m¨g
);

285 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

287 
	míabÀd_Êag
;

288 *
	m«me
;

291 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

293 (*
	mdem™d_c⁄f
Ë(
	munô
);

295 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

303 
	sµp_idÀ
 {

304 
u_sh‹t
 
	mxmô_idÀ
;

305 
u_sh‹t
 
	mªcv_idÀ
;

308 
	sµp_£âögs
 {

310 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

311 
u_öt
 
	mauth_ªquúed
 : 1;

312 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

313 
u_öt
 
	mªfu£_∑p
 : 1;

314 
u_öt
 
	mªfu£_ch≠
 : 1;

315 
u_öt
 
	mu£ho°«me
 : 1;

316 
u_öt
 
	mu£≥îdns
 : 1;

318 
u_sh‹t
 
	midÀ_time_limô
;

319 
	mmaxc⁄√˘
;

321 
	mu£r
 [
MAXNAMELEN
 + 1];

322 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

323 
	mour_«me
 [
MAXNAMELEN
 + 1];

324 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

327 
	sµp_addrs
 {

328 
ù_addr
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

336 
u_ch¨
 *
ouçackë_buf
[
NUM_PPP
];

338 
µp_£âögs
Öpp_settings;

340 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

348 
îr_t
 
µpInô
();

369 
	eµpAuthTy≥
 {

370 
	mPPPAUTHTYPE_NONE
,

371 
	mPPPAUTHTYPE_ANY
,

372 
	mPPPAUTHTYPE_PAP
,

373 
	mPPPAUTHTYPE_CHAP


376 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

385 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

390 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

393 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

400 
	`µpClo£
(
pd
);

405 
	`µpSigHUP
(
pd
);

411 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

416 
u_öt
 
	`µpMTU
(
pd
);

422 
	`µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

424 
	`µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

426 
pbuf
 *
	`µpSögÀBuf
(pbu‡*
p
);

428 
	`µpLökTîmö©ed
(
pd
);

430 
	`µpLökDown
(
pd
);

432 
	`µpMaöWakeup
(
pd
);

435 
	`µp_£nd_c⁄fig
 (, , 
u32_t
, , );

437 
	`µp_£t_xaccm
 (, 
ext_accm
 *);

439 
	`µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

441 
	`gë_idÀ_time
 (, 
µp_idÀ
 *);

444 
	`sifvjcomp
 (, , , );

446 
	`sifup
 ();

448 
	`si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

450 
	`sifdown
 ();

452 
	`siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

454 
	`ciÁddr
 (, 
u32_t
, u32_t);

456 
	`sifdeÁu…rouã
 (, 
u32_t
, u32_t);

458 
	`cifdeÁu…rouã
 (, 
u32_t
, u32_t);

461 
u32_t
 
	`GëMask
 (u32_t);

	@netif/ppp/ppp_oe.c

71 
	~"lwù/›t.h
"

73 #i‡
PPPOE_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"lwù/sys.h
"

80 
	~"√tif/µp_€.h
"

81 
	~"√tif/ëh¨p.h
"

83 
	~<°rög.h
>

84 
	~<°dio.h
>

87 #i‚de‡
_SYS_QUEUE_H_


88 
	#_SYS_QUEUE_H_


	)

104 
	#LIST_HEAD
(
«me
, 
ty≥
) \

105 
	s«me
 { \

106 
ty≥
 *
lh_fú°
; \

107 }

	)

109 
	#LIST_HEAD_INITIALIZER
(
hód
) \

110 { 
NULL
 }

	)

112 
	#LIST_ENTRY
(
ty≥
) \

114 
ty≥
 *
À_√xt
; \

115 
ty≥
 **
À_¥ev
; \

116 }

	)

122 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

124 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

126 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

127 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

128 (
v¨
); \

129 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

131 
	#LIST_INIT
(
hód
) do { \

132 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

133 } 0)

	)

135 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

136 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
) \

137 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

138 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

139 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

140 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

141 } 0)

	)

143 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

144 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

145 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

146 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

147 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

148 } 0)

	)

150 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

151 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

152 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

153 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

154 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

155 } 0)

	)

157 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

159 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

160 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

161 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

162 (
ñm
)->
fõld
.
À_¥ev
; \

163 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

164 } 0)

	)

170 
	#PPPOE_ADD_16
(
PTR
, 
VAL
) \

171 *(
PTR
)++ = (
VAL
) / 256; \

172 *(
PTR
)++ = (
VAL
Ë% 256

	)

175 
	#PPPOE_ADD_HEADER
(
PTR
, 
CODE
, 
SESS
, 
LEN
) \

176 *(
PTR
)++ = 
PPPOE_VERTYPE
; \

177 *(
PTR
)++ = (
CODE
); \

178 
	`PPPOE_ADD_16
(
PTR
, 
SESS
); \

179 
	`PPPOE_ADD_16
(
PTR
, 
LEN
)

	)

181 
	#PPPOE_DISC_TIMEOUT
 (5*1000Ë

	)

182 
	#PPPOE_SLOW_RETRY
 (60*1000Ë

	)

183 
	#PPPOE_DISC_MAXPADI
 4

	)

184 
	#PPPOE_DISC_MAXPADR
 2

	)

186 #ifde‡
PPPOE_SERVER


188 
	#IFF_PASSIVE
 
IFF_LINK0


	)

191 
	sµp€_so·c
 {

192 
LIST_ENTRY
(
µp€_so·c
Ë
	msc_li°
;

193 
√tif
 *
	msc_ëhif
;

194 
	msc_pd
;

195 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

197 
	msc_°©e
;

198 
ëh_addr
 
	msc_de°
;

199 
u16_t
 
	msc_£ssi⁄
;

201 *
	msc_£rvi˚_«me
;

202 *
	msc_c⁄˚¡øt‹_«me
;

203 
u8_t
 *
	msc_ac_cookõ
;

204 
size_t
 
	msc_ac_cookõ_Àn
;

205 #ifde‡
PPPOE_SERVER


206 
u8_t
 *
	msc_hunique
;

207 
size_t
 
	msc_hunique_Àn
;

209 
	msc_∑di_ªåõd
;

210 
	msc_∑dr_ªåõd
;

214 
µp€_di•©ch_disc_pkt
(
√tif
 *, 
pbuf
 *);

217 
µp€_do_disc⁄√˘
(
µp€_so·c
 *);

218 
µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *);

219 
µp€_˛ór_so·c
(
µp€_so·c
 *, const *);

222 
µp€_timeout
(*);

225 
îr_t
 
µp€_£nd_∑di
(
µp€_so·c
 *);

226 
îr_t
 
µp€_£nd_∑dr
(
µp€_so·c
 *);

227 #ifde‡
PPPOE_SERVER


228 
îr_t
 
µp€_£nd_∑do
(
µp€_so·c
 *);

229 
îr_t
 
µp€_£nd_∑ds
(
µp€_so·c
 *);

231 
îr_t
 
µp€_£nd_∑dt
(
√tif
 *, 
u_öt
, c⁄° 
u8_t
 *);

234 
µp€_so·c
 * 
µp€_föd_so·c_by_£ssi⁄
(
u_öt
, 
√tif
 *);

235 
µp€_so·c
 * 
µp€_föd_so·c_by_hunique
(
u8_t
 *, 
size_t
, 
√tif
 *);

237 
	$LIST_HEAD
(
µp€_so·c_hód
, 
µp€_so·c
Ë
µp€_so·c_li°
;

239 
µp€_hdæí
;

242 
	$µp€_öô
()

244 
µp€_hdæí
 = (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
;

245 
	`LIST_INIT
(&
µp€_so·c_li°
);

246 
	}
}

248 
îr_t


249 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
)

251 
µp€_so·c
 *
sc
;

253 
sc
 = 
	`mem_mÆloc
((
µp€_so·c
));

254 if(!
sc
) {

255 *
s˝å
 = 
NULL
;

256  
ERR_MEM
;

258 
	`mem£t
(
sc
, 0, (
µp€_so·c
));

261 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

263 
sc
->
sc_pd
 = 
pd
;

264 
sc
->
sc_lökSètusCB
 = 
lökSètusCB
;

265 
sc
->
sc_ëhif
 = 
ëhif
;

267 
	`LIST_INSERT_HEAD
(&
µp€_so·c_li°
, 
sc
, 
sc_li°
);

269 *
s˝å
 = 
sc
;

271  
ERR_OK
;

272 
	}
}

274 
îr_t


275 
	$µp€_de°roy
(
√tif
 *
iÂ
)

277 
µp€_so·c
 * 
sc
;

279 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

280 i‡(
sc
->
sc_ëhif
 =
iÂ
) {

285 if(!(
sc
 && (sc->
sc_ëhif
 =
iÂ
))) {

286  
ERR_IF
;

289 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

290 
	`LIST_REMOVE
(
sc
, 
sc_li°
);

292 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
) {

293 
	`mem_‰ì
(
sc
->
sc_c⁄˚¡øt‹_«me
);

295 i‡(
sc
->
sc_£rvi˚_«me
) {

296 
	`mem_‰ì
(
sc
->
sc_£rvi˚_«me
);

298 i‡(
sc
->
sc_ac_cookõ
) {

299 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

301 
	`mem_‰ì
(
sc
);

303  
ERR_OK
;

304 
	}
}

312 
µp€_so·c
 *

313 
	$µp€_föd_so·c_by_£ssi⁄
(
u_öt
 
£ssi⁄
, 
√tif
 *
rcvif
)

315 
µp€_so·c
 *
sc
;

317 i‡(
£ssi⁄
 == 0) {

318  
NULL
;

321 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

322 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION


323 && 
sc
->
sc_£ssi⁄
 =
£ssi⁄
) {

324 i‡(
sc
->
sc_ëhif
 =
rcvif
) {

325  
sc
;

327  
NULL
;

331  
NULL
;

332 
	}
}

336 
µp€_so·c
 *

337 
	$µp€_föd_so·c_by_hunique
(
u8_t
 *
tokí
, 
size_t
 
Àn
, 
√tif
 *
rcvif
)

339 
µp€_so·c
 *
sc
, *
t
;

341 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

342  
NULL
;

345 i‡(
Àn
 ! 
sc
) {

346  
NULL
;

348 
	`MEMCPY
(&
t
, 
tokí
, 
Àn
);

350 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

351 i‡(
sc
 =
t
) {

356 i‡(
sc
 =
NULL
) {

357 
	`PPPDEBUG
((
LOG_DEBUG
, "pppoe:álien host uniqueÅag,Ço session found\n"));

358  
NULL
;

362 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_PADI_SENT
 || sc->sc_°©ê>
PPPOE_STATE_SESSION
) {

363 
	`¥ötf
("%c%c%"
U16_F
": host uniqueÅag found, but it belongsÅoá connection in state %d\n",

364 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_°©e
);

365  
NULL
;

367 i‡(
sc
->
sc_ëhif
 !
rcvif
) {

368 
	`¥ötf
("%c%c%"
U16_F
": wrong interface,Çotáccepting host unique\n",

369 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

370  
NULL
;

372  
sc
;

373 
	}
}

376 
	$µp€_lök°©us_up
(*
¨g
)

378 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

380 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 1);

381 
	}
}

385 
	$µp€_di•©ch_disc_pkt
(
√tif
 *√tif, 
pbuf
 *
pb
)

387 
u16_t
 
èg
, 
Àn
;

388 
u16_t
 
£ssi⁄
, 
∂í
;

389 
µp€_so·c
 *
sc
;

390 c⁄° *
îr_msg
;

391 
dev«me
[6];

392 *
îr‹
;

393 
u8_t
 *
ac_cookõ
;

394 
size_t
 
ac_cookõ_Àn
;

395 #ifde‡
PPPOE_SERVER


396 
u8_t
 *
hunique
;

397 
size_t
 
hunique_Àn
;

399 
µp€hdr
 *
ph
;

400 
µp€èg
 
±
;

401 
off
 = 0, 
îr
, 
îr‹èg
;

402 
ëh_hdr
 *
ëhhdr
;

404 
pb
 = 
	`µpSögÀBuf
(pb);

406 
	`°r˝y
(
dev«me
, "pppoe");

407 
îr_msg
 = 
NULL
;

408 
îr‹èg
 = 0;

409 i‡(
pb
->
Àn
 < (*
ëhhdr
)) {

410 
d⁄e
;

412 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

413 
off
 +(*
ëhhdr
);

415 
ac_cookõ
 = 
NULL
;

416 
ac_cookõ_Àn
 = 0;

417 #ifde‡
PPPOE_SERVER


418 
hunique
 = 
NULL
;

419 
hunique_Àn
 = 0;

421 
£ssi⁄
 = 0;

422 i‡(
pb
->
Àn
 - 
off
 <
PPPOE_HEADERLEN
) {

423 
	`¥ötf
("µp€:ÖackëÅoÿsh‹t: %d\n", 
pb
->
Àn
);

424 
d⁄e
;

427 
ph
 = (
µp€hdr
 *Ë(
ëhhdr
 + 1);

428 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

429 
	`¥ötf
("µp€: unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

430 
d⁄e
;

432 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

433 
∂í
 = 
	`¡ohs
(
ph
->plen);

434 
off
 +(*
ph
);

436 i‡(
∂í
 + 
off
 > 
pb
->
Àn
) {

437 
	`¥ötf
("pppoe:Öacket content doesÇot fit: dataávailable = %d,Öacket size = %u\n",

438 
pb
->
Àn
 - 
off
, 
∂í
);

439 
d⁄e
;

441 if(
pb
->
tŸ_Àn
 =pb->
Àn
) {

442 
pb
->
tŸ_Àn
 =Öb->
Àn
 = 
off
 + 
∂í
;

444 
èg
 = 0;

445 
Àn
 = 0;

446 
sc
 = 
NULL
;

447 
off
 + (
±
Ë<
pb
->
Àn
) {

448 
	`MEMCPY
(&
±
, (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
, (pt));

449 
èg
 = 
	`¡ohs
(
±
.tag);

450 
Àn
 = 
	`¡ohs
(
±
.len);

451 i‡(
off
 + (
±
Ë+ 
Àn
 > 
pb
->len) {

452 
	`¥ötf
("µp€:Åag 0x%xÜí 0x%x i†toÿl⁄g\n", 
èg
, 
Àn
);

453 
d⁄e
;

455 
èg
) {

456 
PPPOE_TAG_EOL
:

457 
bªakbªak
;

458 
PPPOE_TAG_SNAME
:

460 
PPPOE_TAG_ACNAME
:

462 
PPPOE_TAG_HUNIQUE
:

463 i‡(
sc
 !
NULL
) {

466 #ifde‡
PPPOE_SERVER


467 
hunique
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

468 
hunique_Àn
 = 
Àn
;

470 
sc
 = 
	`µp€_föd_so·c_by_hunique
((
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
, 
√tif
);

471 i‡(
sc
 !
NULL
) {

472 
	`¢¥ötf
(
dev«me
, (dev«me), "%c%c%"
U16_F
, 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

475 
PPPOE_TAG_ACCOOKIE
:

476 i‡(
ac_cookõ
 =
NULL
) {

477 
ac_cookõ
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

478 
ac_cookõ_Àn
 = 
Àn
;

481 
PPPOE_TAG_SNAME_ERR
:

482 
îr_msg
 = "SERVICE NAME ERROR";

483 
îr‹èg
 = 1;

485 
PPPOE_TAG_ACSYS_ERR
:

486 
îr_msg
 = "AC SYSTEM ERROR";

487 
îr‹èg
 = 1;

489 
PPPOE_TAG_GENERIC_ERR
:

490 
îr_msg
 = "GENERIC ERROR";

491 
îr‹èg
 = 1;

494 i‡(
îr_msg
) {

495 
îr‹
 = 
NULL
;

496 i‡(
îr‹èg
 && 
Àn
) {

497 
îr‹
 = 
	`mem_mÆloc
(
Àn
+1);

498 i‡(
îr‹
) {

499 
	`°∫˝y
(
îr‹
, (*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
);

500 
îr‹
[
Àn
-1] = '\0';

503 i‡(
îr‹
) {

504 
	`¥ötf
("%s: %s: %s\n", 
dev«me
, 
îr_msg
, 
îr‹
);

505 
	`mem_‰ì
(
îr‹
);

507 
	`¥ötf
("%s: %s\n", 
dev«me
, 
îr_msg
);

509 i‡(
îr‹èg
) {

510 
d⁄e
;

513 
off
 +(
±
Ë+ 
Àn
;

516 
bªakbªak
:;

517 
ph
->
code
) {

518 
PPPOE_CODE_PADI
:

519 #ifde‡
PPPOE_SERVER


524 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

525 
d⁄e
;

527 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

528 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
)) {

531 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

534 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_INITIAL
) {

538 i‡(
sc
 =
NULL
) {

540 
d⁄e
;

542 i‡(
hunique
) {

543 i‡(
sc
->
sc_hunique
) {

544 
	`mem_‰ì
(
sc
->
sc_hunique
);

546 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

547 i‡(
sc
->
sc_hunique
 =
NULL
) {

548 
d⁄e
;

550 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

551 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

553 
	`MEMCPY
(&
sc
->
sc_de°
, 
eh
->
ëhî_sho°
,  sc->sc_dest);

554 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADO_SENT
;

555 
	`µp€_£nd_∑do
(
sc
);

558 
PPPOE_CODE_PADR
:

559 #ifde‡
PPPOE_SERVER


563 i‡(
ac_cookõ
 =
NULL
) {

565 
	`¥ötf
("pppoe:Ñeceived PADR butÇot includesác_cookie\n");

566 
d⁄e
;

568 
sc
 = 
	`µp€_föd_so·c_by_hunique
(
ac_cookõ
, 
ac_cookõ_Àn
, 
√tif
);

569 i‡(
sc
 =
NULL
) {

571 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

572 
	`¥ötf
("pppoe:Ñeceived PADR but couldÇot findÑequest for it\n");

574 
d⁄e
;

576 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

577 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADR\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

578 
d⁄e
;

580 i‡(
hunique
) {

581 i‡(
sc
->
sc_hunique
) {

582 
	`mem_‰ì
(
sc
->
sc_hunique
);

584 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

585 i‡(
sc
->
sc_hunique
 =
NULL
) {

586 
d⁄e
;

588 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

589 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

591 
	`µp€_£nd_∑ds
(
sc
);

592 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

593 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

597 
d⁄e
;

599 
PPPOE_CODE_PADO
:

600 i‡(
sc
 =
NULL
) {

602 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

603 
	`¥ötf
("pppoe:Ñeceived PADO but couldÇot findÑequest for it\n");

605 
d⁄e
;

607 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADI_SENT
) {

608 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADO\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

609 
d⁄e
;

611 i‡(
ac_cookõ
) {

612 i‡(
sc
->
sc_ac_cookõ
) {

613 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

615 
sc
->
sc_ac_cookõ
 = 
	`mem_mÆloc
(
ac_cookõ_Àn
);

616 i‡(
sc
->
sc_ac_cookõ
 =
NULL
) {

617 
d⁄e
;

619 
sc
->
sc_ac_cookõ_Àn
 = 
ac_cookõ_Àn
;

620 
	`MEMCPY
(
sc
->
sc_ac_cookõ
, 
ac_cookõ
, 
ac_cookõ_Àn
);

622 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhhdr
->
§c
.
addr
, (sc->sc_dest.addr));

623 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

624 
sc
->
sc_∑dr_ªåõd
 = 0;

625 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADR_SENT
;

626 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

627 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

629 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

631 
PPPOE_CODE_PADS
:

632 i‡(
sc
 =
NULL
) {

633 
d⁄e
;

635 
sc
->
sc_£ssi⁄
 = 
£ssi⁄
;

636 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

637 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%x c⁄√˘ed\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
£ssi⁄
));

638 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

639 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

641 
PPPOE_CODE_PADT
:

642 i‡(
sc
 =
NULL
) {

643 
d⁄e
;

645 
	`µp€_˛ór_so·c
(
sc
, "received PADT");

648 if(
sc
) {

649 
	`¥ötf
("%c%c%"
U16_F
": unknown code (0x%04x) session = 0x%04x\n",

650 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

651 
ph
->
code
, 
£ssi⁄
);

653 
	`¥ötf
("µp€: unknow¿codê(0x%04xË£ssi⁄ = 0x%04x\n", 
ph
->
code
, 
£ssi⁄
);

658 
d⁄e
:

659 
	`pbuf_‰ì
(
pb
);

661 
	}
}

664 
	$µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

667 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

668 
	`µp€_di•©ch_disc_pkt
(
√tif
, 
p
);

670 
	`pbuf_‰ì
(
p
);

672 
	}
}

675 
	$µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
pb
)

677 
u16_t
 
£ssi⁄
, 
∂í
;

678 
µp€_so·c
 *
sc
;

679 
µp€hdr
 *
ph
;

680 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


681 
u8_t
 
sho°
[
ETHER_ADDR_LEN
];

684 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


685 
	`MEMCPY
(
sho°
, ((
ëh_hdr
 *)
pb
->
∑ylﬂd
)->
§c
.
addr
, (shost));

687 i‡(
	`pbuf_hódî
(
pb
, -()(
ëh_hdr
)) != 0) {

689 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header failed\n"));

690 
	`LINK_STATS_INC
(
lök
.
À√º
);

691 
dr›
;

694 
pb
 = 
	`µpSögÀBuf
 (pb);

696 i‡(
pb
->
Àn
 <
PPPOE_HEADERLEN
) {

697 
	`¥ötf
("µp€ (d©a): dr›pögÅoÿsh‹à∑ckë: %d byãs\n", 
pb
->
Àn
);

698 
dr›
;

701 i‡(
pb
->
Àn
 < (*
ph
)) {

702 
	`¥ötf
("pppoe_data_input: couldÇot get PPPoE header\n");

703 
dr›
;

705 
ph
 = (
µp€hdr
 *)
pb
->
∑ylﬂd
;

707 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

708 
	`¥ötf
("µp€ (d©a): unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

709 
dr›
;

711 i‡(
ph
->
code
 != 0) {

712 
dr›
;

715 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

716 
sc
 = 
	`µp€_föd_so·c_by_£ssi⁄
(
£ssi⁄
, 
√tif
);

717 i‡(
sc
 =
NULL
) {

718 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


719 
	`¥ötf
("µp€: i≈uàf‹ unknow¿£ssi⁄ 0x%x, sídög PADT\n", 
£ssi⁄
);

720 
	`µp€_£nd_∑dt
(
√tif
, 
£ssi⁄
, 
sho°
);

722 
dr›
;

725 
∂í
 = 
	`¡ohs
(
ph
->plen);

727 i‡(
	`pbuf_hódî
(
pb
, -()(
PPPOE_HEADERLEN
)) != 0) {

729 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header PPPOE_HEADERLEN failed\n"));

730 
	`LINK_STATS_INC
(
lök
.
À√º
);

731 
dr›
;

734 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€_d©a_öput: %c%c%"
U16_F
":Ökthdr.len=%d,Öppoe.len=%d\n",

735 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

736 
pb
->
Àn
, 
∂í
));

738 i‡(
pb
->
Àn
 < 
∂í
) {

739 
dr›
;

742 
	`µpInProcOvîEthî√t
(
sc
->
sc_pd
, 
pb
);

746 
dr›
:

747 
	`pbuf_‰ì
(
pb
);

748 
	}
}

750 
îr_t


751 
	$µp€_ouçut
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

753 
ëh_hdr
 *
ëhhdr
;

754 
u16_t
 
ëy≥
;

755 
îr_t
 
ªs
;

757 i‡(!
sc
->
sc_ëhif
) {

758 
	`pbuf_‰ì
(
pb
);

759  
ERR_IF
;

762 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

763 
ëy≥
 = 
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION
 ? 
ETHTYPE_PPPOE
 : 
ETHTYPE_PPPOEDISC
;

764 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëy≥
);

765 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, 
sc
->
sc_de°
.addr, (ethhdr->dest.addr));

766 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
sc
->
sc_ëhif
->
hwaddr
)->addr, (ethhdr->src.addr));

768 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
" (%xË°©e=%d, sessi⁄=0x%x ouçuà-> %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F",Üen=%d\n",

769 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
ëy≥
,

770 
sc
->
sc_°©e
, sc->
sc_£ssi⁄
,

771 
sc
->
sc_de°
.
addr
[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],

772 
pb
->
tŸ_Àn
));

774 
ªs
 = 
sc
->
sc_ëhif
->
	`lökouçut
(sc->sc_ëhif, 
pb
);

776 
	`pbuf_‰ì
(
pb
);

778  
ªs
;

779 
	}
}

781 
îr_t


782 
	$µp€_£nd_∑di
(
µp€_so·c
 *
sc
)

784 
pbuf
 *
pb
;

785 
u8_t
 *
p
;

786 
Àn
, 
l1
 = 0, 
l2
 = 0;

788 i‡(
sc
->
sc_°©e
 >
PPPOE_STATE_PADI_SENT
) {

789 
	`PPPDEBUG
((
LOG_ERR
, "ERROR:Öµ€_£nd_∑dòö sèã %d", 
sc
->
sc_°©e
));

793 
Àn
 = 2 + 2 + 2 + 2 +  
sc
;

794 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

795 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

796 
Àn
 +
l1
;

798 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

799 
l2
 = 
	`°æí
(
sc
->
sc_c⁄˚¡øt‹_«me
);

800 
Àn
 +2 + 2 + 
l2
;

804 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

805 i‡(!
pb
) {

806  
ERR_MEM
;

809 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

811 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADI
, 0, 
Àn
);

812 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

813 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

814 
	`PPPOE_ADD_16
(
p
, 
l1
);

815 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

816 
p
 +
l1
;

818 
	`PPPOE_ADD_16
(
p
, 0);

820 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

821 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACNAME
);

822 
	`PPPOE_ADD_16
(
p
, 
l2
);

823 
	`MEMCPY
(
p
, 
sc
->
sc_c⁄˚¡øt‹_«me
, 
l2
);

824 
p
 +
l2
;

826 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

827 
	`PPPOE_ADD_16
(
p
, (
sc
));

828 
	`MEMCPY
(
p
, &
sc
,  sc);

831  
	`µp€_ouçut
(
sc
, 
pb
);

832 
	}
}

835 
	$µp€_timeout
(*
¨g
)

837 
ªåy_waô
, 
îr
;

838 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

840 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
":Åimeout\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

842 
sc
->
sc_°©e
) {

843 
PPPOE_STATE_PADI_SENT
:

855 
ªåy_waô
 = 
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
);

857 
sc
->
sc_∑di_ªåõd
++;

858 i‡(
sc
->
sc_∑di_ªåõd
 >
PPPOE_DISC_MAXPADI
) {

860 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_LINK1
) == 0) {

862 
ªåy_waô
 = 
PPPOE_SLOW_RETRY
;

866 
	`µp€_ab‹t_c⁄√˘
(
sc
);

870 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

871 
sc
->
sc_∑di_ªåõd
--;

872 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿå™smô PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

874 
	`t˝ù_timeout
(
ªåy_waô
, 
µp€_timeout
, 
sc
);

877 
PPPOE_STATE_PADR_SENT
:

878 
sc
->
sc_∑dr_ªåõd
++;

879 i‡(
sc
->
sc_∑dr_ªåõd
 >
PPPOE_DISC_MAXPADR
) {

880 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

881 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

882 
sc
->
sc_∑dr_ªåõd
 = 0;

883 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

884 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

886 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
), 
µp€_timeout
, sc);

889 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

890 
sc
->
sc_∑dr_ªåõd
--;

891 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

893 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

895 
PPPOE_STATE_CLOSING
:

896 
	`µp€_do_disc⁄√˘
(
sc
);

901 
	}
}

905 
	$µp€_c⁄√˘
(
µp€_so·c
 *
sc
)

907 
îr
;

909 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_INITIAL
) {

910  
EBUSY
;

913 #ifde‡
PPPOE_SERVER


915 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

920 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

921 
sc
->
sc_∑dr_ªåõd
 = 0;

922 
îr
 = 
	`µp€_£nd_∑di
(
sc
);

923 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

924 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
, 
µp€_timeout
, 
sc
);

925  
îr
;

926 
	}
}

930 
	$µp€_disc⁄√˘
(
µp€_so·c
 *
sc
)

932 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

940 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

941 
	`t˝ù_timeout
(20, 
µp€_timeout
, 
sc
);

942 
	}
}

945 
	$µp€_do_disc⁄√˘
(
µp€_so·c
 *
sc
)

947 
îr
;

949 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

950 
îr
 = 
EBUSY
;

952 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": disc⁄√˘ög\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

953 
îr
 = 
	`µp€_£nd_∑dt
(
sc
->
sc_ëhif
, sc->
sc_£ssi⁄
, (c⁄° 
u8_t
 *)&sc->
sc_de°
);

957 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

958 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

959 i‡(
sc
->
sc_ac_cookõ
) {

960 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

961 
sc
->
sc_ac_cookõ
 = 
NULL
;

963 
sc
->
sc_ac_cookõ_Àn
 = 0;

964 #ifde‡
PPPOE_SERVER


965 i‡(
sc
->
sc_hunique
) {

966 
	`mem_‰ì
(
sc
->
sc_hunique
);

967 
sc
->
sc_hunique
 = 
NULL
;

969 
sc
->
sc_hunique_Àn
 = 0;

971 
sc
->
sc_£ssi⁄
 = 0;

973 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

975  
îr
;

976 
	}
}

980 
	$µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *
sc
)

982 
	`¥ötf
("%c%c%"
U16_F
": couldÇŸÉ°ablish c⁄√˘i⁄\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

983 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

985 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

988 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

989 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

990 
	}
}

993 
îr_t


994 
	$µp€_£nd_∑dr
(
µp€_so·c
 *
sc
)

996 
pbuf
 *
pb
;

997 
u8_t
 *
p
;

998 
size_t
 
Àn
, 
l1
 = 0;

1000 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADR_SENT
) {

1001  
ERR_CONN
;

1004 
Àn
 = 2 + 2 + 2 + 2 + (
sc
);

1005 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1006 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1007 
Àn
 +
l1
;

1009 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1010 
Àn
 +2 + 2 + 
sc
->
sc_ac_cookõ_Àn
;

1012 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1013 i‡(!
pb
) {

1014  
ERR_MEM
;

1016 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1017 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADR
, 0, 
Àn
);

1018 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1019 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1020 
	`PPPOE_ADD_16
(
p
, 
l1
);

1021 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1022 
p
 +
l1
;

1024 
	`PPPOE_ADD_16
(
p
, 0);

1026 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1027 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1028 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_ac_cookõ_Àn
);

1029 
	`MEMCPY
(
p
, 
sc
->
sc_ac_cookõ
, sc->
sc_ac_cookõ_Àn
);

1030 
p
 +
sc
->
sc_ac_cookõ_Àn
;

1032 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1033 
	`PPPOE_ADD_16
(
p
, (
sc
));

1034 
	`MEMCPY
(
p
, &
sc
,  sc);

1036  
	`µp€_ouçut
(
sc
, 
pb
);

1037 
	}
}

1040 
îr_t


1041 
	$µp€_£nd_∑dt
(
√tif
 *
outgoög_if
, 
u_öt
 
£ssi⁄
, c⁄° 
u8_t
 *
de°
)

1043 
pbuf
 *
pb
;

1044 
ëh_hdr
 *
ëhhdr
;

1045 
îr_t
 
ªs
;

1046 
u8_t
 *
p
;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
, 
PBUF_RAM
);

1049 i‡(!
pb
) {

1050  
ERR_MEM
;

1053 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

1054 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_PPPOEDISC
);

1055 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, dest, (ethhdr->dest.addr));

1056 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
outgoög_if
->
hwaddr
)->addr, (ethhdr->src.addr));

1058 
p
 = (
u8_t
*)(
ëhhdr
 + 1);

1059 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADT
, 
£ssi⁄
, 0);

1061 
ªs
 = 
outgoög_if
->
	`lökouçut
(outgoög_if, 
pb
);

1063 
	`pbuf_‰ì
(
pb
);

1065  
ªs
;

1066 
	}
}

1068 #ifde‡
PPPOE_SERVER


1069 
îr_t


1070 
	$µp€_£nd_∑do
(
µp€_so·c
 *
sc
)

1072 
pbuf
 *
pb
;

1073 
u8_t
 *
p
;

1074 
size_t
 
Àn
;

1076 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1077  
ERR_CONN
;

1081 
Àn
 = 0;

1083 
Àn
 +2 + 2 + (
sc
);

1085 
Àn
 +2 + 2 + 
sc
->
sc_hunique_Àn
;

1086 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1087 i‡(!
pb
) {

1088  
ERR_MEM
;

1090 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1091 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADO
, 0, 
Àn
);

1092 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1093 
	`PPPOE_ADD_16
(
p
, (
sc
));

1094 
	`MEMCPY
(
p
, &
sc
, (sc));

1095 
p
 +(
sc
);

1096 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1097 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1098 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1099  
	`µp€_ouçut
(
sc
, 
pb
);

1100 
	}
}

1102 
îr_t


1103 
	$µp€_£nd_∑ds
(
µp€_so·c
 *
sc
)

1105 
pbuf
 *
pb
;

1106 
u8_t
 *
p
;

1107 
size_t
 
Àn
, 
l1
 = 0;

1109 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1110  
ERR_CONN
;

1113 
sc
->
sc_£ssi⁄
 = 
m⁄o_time
.
tv_£c
 % 0xff + 1;

1115 
Àn
 = 0;

1117 
Àn
 +2 + 2 + 2 + 2 + 
sc
->
sc_hunique_Àn
;

1118 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1119 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1120 
Àn
 +
l1
;

1122 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1123 i‡(!
pb
) {

1124  
ERR_MEM
;

1126 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1127 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADS
, 
sc
->
sc_£ssi⁄
, 
Àn
);

1128 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1129 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1130 
	`PPPOE_ADD_16
(
p
, 
l1
);

1131 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1132 
p
 +
l1
;

1134 
	`PPPOE_ADD_16
(
p
, 0);

1136 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1137 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1138 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1139  
	`µp€_ouçut
(
sc
, 
pb
);

1140 
	}
}

1143 
îr_t


1144 
	$µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

1146 
u8_t
 *
p
;

1147 
size_t
 
Àn
;

1150 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

1152 
	`pbuf_‰ì
(
pb
);

1153  
ERR_CONN
;

1156 
Àn
 = 
pb
->
tŸ_Àn
;

1159 i‡(
	`pbuf_hódî
(
pb
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
) != 0) {

1161 
	`PPPDEBUG
((
LOG_ERR
, "µp€: %c%c%"
U16_F
":Öµ€_xmô: couldÇŸáŒoˇãÑoom f‹ hódî\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

1162 
	`LINK_STATS_INC
(
lök
.
À√º
);

1163 
	`pbuf_‰ì
(
pb
);

1164  
ERR_BUF
;

1167 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 + (
ëh_hdr
);

1168 
	`PPPOE_ADD_HEADER
(
p
, 0, 
sc
->
sc_£ssi⁄
, 
Àn
);

1170  
	`µp€_ouçut
(
sc
, 
pb
);

1171 
	}
}

1175 
	$µp€_iÁâach_hook
(*
¨g
, 
pbuf
 **
mp
, 
√tif
 *
iÂ
, 
dú
)

1177 
µp€_so·c
 *
sc
;

1178 
s
;

1180 i‡(
mp
 !(
pbuf
 **)
PFIL_IFNET_DETACH
) {

1184 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

1185 i‡(
sc
->
sc_ëhif
 !
iÂ
) {

1188 i‡(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
) {

1189 
sc
->
sc_•µ
.
µ_if
.
if_Êags
 &~(
IFF_UP
|
IFF_RUNNING
);

1190 
	`¥ötf
("%c%c%"
U16_F
":Éthernet interface detached, going down\n",

1191 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

1193 
sc
->
sc_ëhif
 = 
NULL
;

1194 
	`µp€_˛ór_so·c
(
sc
, "ethernet interface detached");

1198 
	}
}

1202 
	$µp€_˛ór_so·c
(
µp€_so·c
 *
sc
, c⁄° *
mesßge
)

1204 
	`LWIP_UNUSED_ARG
(
mesßge
);

1207 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

1208 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%xÅîmö©ed, %s\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_£ssi⁄
, 
mesßge
));

1211 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

1214 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

1217 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

1218 i‡(
sc
->
sc_ac_cookõ
) {

1219 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

1220 
sc
->
sc_ac_cookõ
 = 
NULL
;

1222 
sc
->
sc_ac_cookõ_Àn
 = 0;

1223 
sc
->
sc_£ssi⁄
 = 0;

1224 
	}
}

	@netif/ppp/pppdebug.h

36 #i‚de‡
PPPDEBUG_H


37 
	#PPPDEBUG_H


	)

44 
	mLOG_CRITICAL
 = 0,

45 
	mLOG_ERR
 = 1,

46 
	mLOG_NOTICE
 = 2,

47 
	mLOG_WARNING
 = 3,

48 
	mLOG_INFO
 = 5,

49 
	mLOG_DETAIL
 = 6,

50 
	mLOG_DEBUG
 = 7

51 } 
	tLogCodes
;

60 
µp_åa˚
(
Àvñ
, c⁄° *
f‹m©
,...);

62 
	#TRACELCP
 
PPP_DEBUG


	)

64 #i‡
PPP_DEBUG


66 
	#AUTHDEBUG
(
a
Ë
µp_åa˚
 
	)
a

67 
	#IPCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

68 
	#UPAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

69 
	#LCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

70 
	#FSMDEBUG
(
a
Ë
µp_åa˚
 
	)
a

71 
	#CHAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

72 
	#PPPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

76 
	#AUTHDEBUG
(
a
)

	)

77 
	#IPCPDEBUG
(
a
)

	)

78 
	#UPAPDEBUG
(
a
)

	)

79 
	#LCPDEBUG
(
a
)

	)

80 
	#FSMDEBUG
(
a
)

	)

81 
	#CHAPDEBUG
(
a
)

	)

82 
	#PPPDEBUG
(
a
)

	)

	@netif/ppp/randm.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 
	~"md5.h
"

39 
	~"øndm.h
"

41 
	~"µp.h
"

42 
	~"µpdebug.h
"

45 #i‡
MD5_SUPPORT


46 
	#RANDPOOLSZ
 16

	)

51 
	gøndPoﬁ
[
RANDPOOLSZ
];

52 
	gøndCou¡
 = 0;

67 
	$avR™domInô
()

69 
	`avChu∫R™d
(
NULL
, 0);

70 
	}
}

83 
	$avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
)

85 
MD5_CTX
 
md5
;

88 
	`MD5Inô
(&
md5
);

89 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

90 i‡(
øndD©a
) {

91 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndD©a
, 
øndLí
);

95 
foob¨
;

96 } 
sysD©a
;

99 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
sysD©a
, (sysData));

101 
	`MD5FöÆ
((
u_ch¨
 *)
øndPoﬁ
, &
md5
);

103 
	}
}

122 
	$avGíR™d
(*
buf
, 
u32_t
 
bufLí
)

124 
MD5_CTX
 
md5
;

125 
u_ch¨
 
tmp
[16];

126 
u32_t
 
n
;

128 
bufLí
 > 0) {

129 
n
 = 
	`LWIP_MIN
(
bufLí
, 
RANDPOOLSZ
);

130 
	`MD5Inô
(&
md5
);

131 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

132 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
øndCou¡
, (randCount));

133 
	`MD5FöÆ
(
tmp
, &
md5
);

134 
øndCou¡
++;

135 
	`MEMCPY
(
buf
, 
tmp
, 
n
);

136 
buf
 +
n
;

137 
bufLí
 -
n
;

139 
	}
}

144 
u32_t


145 
	$avR™dom
()

147 
u32_t
 
√wR™d
;

149 
	`avGíR™d
((*)&
√wR™d
, (newRand));

151  
√wR™d
;

152 
	}
}

159 
	gavR™domized
 = 0;

160 
u32_t
 
	gavR™domSìd
 = 0;

181 
	$avR™domInô
()

185 
u32_t
 *
Õå1
 = (u32_à*)((*)&
˛ockBuf
[3]);

197 
	`ªadClk
();

198 
avR™domSìd
 +*(
u32_t
 *)
˛ockBuf
 + *
Õå1
 + 
OSIdÀCå


199 + 
	`µp_mtime
(Ë+ ((
u32_t
)
TM1
 << 16) + TM1;

201 
avR™domSìd
 +
	`sys_jiffõs
();

205 
	`§™d
(()
avR™domSìd
);

206 
	}
}

216 
	$avR™domize
()

218 
u32_t
 
œ°_jiffõs
;

220 i‡(!
avR™domized
) {

221 
avR™domized
 = !0;

222 
	`avR™domInô
();

226 
avR™domSìd
 +(
	`sys_jiffõs
(Ë- 
œ°_jiffõs
);

228 
œ°_jiffõs
 = 
	`sys_jiffõs
();

229 
	}
}

240 
u32_t


241 
	$avR™dom
()

243  ((((
u32_t
)
	`ønd
(Ë<< 16Ë+Ñ™d()Ë+ 
avR™domSìd
);

244 
	}
}

	@netif/ppp/randm.h

34 #i‚de‡
RANDM_H


35 
	#RANDM_H


	)

43 
avR™domInô
();

53 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

59 #i‡
MD5_SUPPORT


60 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

62 
avR™domize
();

73 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

78 
u32_t
 
avR™dom
();

	@netif/ppp/vj.c

31 
	~"lwù/›t.h
"

33 #i‡
PPP_SUPPORT


35 
	~"µp.h
"

36 
	~"µpdebug.h
"

38 
	~"vj.h
"

40 
	~<°rög.h
>

42 #i‡
VJ_SUPPORT


44 #i‡
LINK_STATS


45 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
counter

47 
	#INCR
(
cou¡î
)

	)

50 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

51 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl_v
&0xf)

	)

52 
	#gëth_off
(
ba£
Ë(((ba£).
th_x2_off
&0xf0)>>4)

	)

54 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl
)

	)

55 
	#gëth_off
(
ba£
Ë((ba£).
th_off
)

	)

59 
	$vj_com¥ess_öô
(
vjcom¥ess
 *
comp
)

61 
u_öt
 
i
;

62 
c°©e
 *
t°©e
 = 
comp
->tstate;

64 #i‡
MAX_SLOTS
 == 0

65 
	`mem£t
((*)
comp
, 0, (*comp));

67 
comp
->
maxSlŸIndex
 = 
MAX_SLOTS
 - 1;

68 
comp
->
com¥essSlŸ
 = 0;

69 
i
 = 
MAX_SLOTS
 - 1; i > 0; --i) {

70 
t°©e
[
i
].
cs_id
 = i;

71 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

73 
t°©e
[0].
cs_√xt
 = &t°©e[
MAX_SLOTS
 - 1];

74 
t°©e
[0].
cs_id
 = 0;

75 
comp
->
œ°_cs
 = &
t°©e
[0];

76 
comp
->
œ°_ªcv
 = 255;

77 
comp
->
œ°_xmô
 = 255;

78 
comp
->
Êags
 = 
VJF_TOSS
;

79 
	}
}

86 
	#ENCODE
(
n
) { \

87 i‡((
u_sh‹t
)(
n
) >= 256) { \

88 *
˝
++ = 0; \

89 
˝
[1] = (
n
); \

90 
˝
[0] = (
n
) >> 8; \

91 
˝
 += 2; \

93 *
˝
++ = (
n
); \

95 }

	)

96 
	#ENCODEZ
(
n
) { \

97 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

98 *
˝
++ = 0; \

99 
˝
[1] = (
n
); \

100 
˝
[0] = (
n
) >> 8; \

101 
˝
 += 2; \

103 *
˝
++ = (
n
); \

105 }

	)

107 
	#DECODEL
(
f
) { \

108 i‡(*
˝
 == 0) {\

109 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

110 (
f
Ë
	`ht⁄l
(
tmp
); \

111 
˝
 += 3; \

113 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u32_t)*
˝
++; \

114 (
f
Ë
	`ht⁄l
(
tmp
); \

116 }

	)

118 
	#DECODES
(
f
) { \

119 i‡(*
˝
 == 0) {\

120 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (((u_sh‹t)
˝
[1] << 8) | cp[2]); \

121 (
f
Ë
	`ht⁄s
(
tmp
); \

122 
˝
 += 3; \

124 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (u_sh‹t)*
˝
++; \

125 (
f
Ë
	`ht⁄s
(
tmp
); \

127 }

	)

129 
	#DECODEU
(
f
) { \

130 i‡(*
˝
 == 0) {\

131 (
f
Ë
	`ht⁄s
(((
u_sh‹t
)
˝
[1] << 8) | cp[2]); \

132 
˝
 += 3; \

134 (
f
Ë
	`ht⁄s
((
u_sh‹t
)*
˝
++); \

136 }

	)

145 
u_öt


146 
	$vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
)

148 
ù
 *ù = (ù *)
pb
->
∑ylﬂd
;

149 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

150 
u_sh‹t
 
hÀn
 = 
	`gëù_hl
(*
ù
);

151 
t˝hdr
 *
Ÿh
;

152 
t˝hdr
 *
th
;

153 
u_sh‹t
 
dñèS
, 
dñèA
;

154 
u_l⁄g
 
dñèL
;

155 
u_öt
 
ch™ges
 = 0;

156 
u_ch¨
 
√w_£q
[16];

157 
u_ch¨
 *
˝
 = 
√w_£q
;

162 i‡(
ù
->
ù_p
 !
IPPROTO_TCP
) {

163  (
TYPE_IP
);

171 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(0x3fff)Ë|| 
pb
->
tŸ_Àn
 < 40) {

172  (
TYPE_IP
);

174 
th
 = (
t˝hdr
 *)&((*)
ù
)[
hÀn
];

175 i‡((
th
->
th_Êags
 & (
TCP_SYN
|
TCP_FIN
|
TCP_RST
|
TCP_ACK
)) != TCP_ACK) {

176  (
TYPE_IP
);

185 
	`INCR
(
vjs_∑ckës
);

186 i‡(
ù
->
ù_§c
.
s_addr
 !
cs
->
cs_ù
.ip_src.s_addr

187 || 
ù
->
ù_d°
.
s_addr
 !
cs
->
cs_ù
.ip_dst.s_addr

188 || *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

201 
c°©e
 *
lcs
;

202 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

205 
lcs
 = 
cs
; c†cs->
cs_√xt
;

206 
	`INCR
(
vjs_£¨ches
);

207 i‡(
ù
->
ù_§c
.
s_addr
 =
cs
->
cs_ù
.ip_src.s_addr

208 && 
ù
->
ù_d°
.
s_addr
 =
cs
->
cs_ù
.ip_dst.s_addr

209 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

210 
found
;

212 } 
cs
 !
œ°cs
);

222 
	`INCR
(
vjs_mis£s
);

223 
comp
->
œ°_cs
 = 
lcs
;

224 
hÀn
 +
	`gëth_off
(*
th
);

225 
hÀn
 <<= 2;

227 i‡(
hÀn
 > 
pb
->
Àn
) {

228  (
TYPE_IP
);

230 
uncom¥es£d
;

232 
found
:

236 i‡(
cs
 =
œ°cs
) {

237 
comp
->
œ°_cs
 = 
lcs
;

239 
lcs
->
cs_√xt
 = 
cs
->cs_next;

240 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

241 
œ°cs
->
cs_√xt
 = 
cs
;

245 
Ÿh
 = (
t˝hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

246 
dñèS
 = 
hÀn
;

247 
hÀn
 +
	`gëth_off
(*
th
);

248 
hÀn
 <<= 2;

250 i‡(
hÀn
 > 
pb
->
Àn
) {

251 
	`PPPDEBUG
((
LOG_INFO
, "vj_com¥ess_t˝: hódîÜí %d s∑n†buf„rs\n", 
hÀn
));

252  (
TYPE_IP
);

266 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0]

267 || ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3]

268 || ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4]

269 || 
	`gëth_off
(*
th
Ë!gëth_off(*
Ÿh
)

270 || (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2))

271 || (
	`gëth_off
(*
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (getth_off(*th) - 5) << 2))) {

272 
uncom¥es£d
;

281 i‡(
th
->
th_Êags
 & 
TCP_URG
) {

282 
dñèS
 = 
	`¡ohs
(
th
->
th_uΩ
);

283 
	`ENCODEZ
(
dñèS
);

284 
ch™ges
 |
NEW_U
;

285 } i‡(
th
->
th_uΩ
 !
Ÿh
->th_urp) {

290 
uncom¥es£d
;

293 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
th_wö
Ë-Çtohs(
Ÿh
->th_win))) != 0) {

294 
	`ENCODE
(
dñèS
);

295 
ch™ges
 |
NEW_W
;

298 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_ack
Ë-Çtohl(
Ÿh
->th_ack)) != 0) {

299 i‡(
dñèL
 > 0xffff) {

300 
uncom¥es£d
;

302 
dñèA
 = (
u_sh‹t
)
dñèL
;

303 
	`ENCODE
(
dñèA
);

304 
ch™ges
 |
NEW_A
;

307 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_£q
Ë-Çtohl(
Ÿh
->th_seq)) != 0) {

308 i‡(
dñèL
 > 0xffff) {

309 
uncom¥es£d
;

311 
dñèS
 = (
u_sh‹t
)
dñèL
;

312 
	`ENCODE
(
dñèS
);

313 
ch™ges
 |
NEW_S
;

316 
ch™ges
) {

326 i‡(
ù
->
ù_Àn
 !
cs
->
cs_ù
.ip_len &&

327 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë=
hÀn
) {

333 
SPECIAL_I
:

334 
SPECIAL_D
:

339 
uncom¥es£d
;

341 
NEW_S
|
NEW_A
:

342 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

344 
ch™ges
 = 
SPECIAL_I
;

345 
˝
 = 
√w_£q
;

349 
NEW_S
:

350 i‡(
dñèS
 =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

352 
ch™ges
 = 
SPECIAL_D
;

353 
˝
 = 
√w_£q
;

358 
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
ù
->
ù_id
Ë-Çtohs(
cs
->
cs_ù
.ip_id));

359 i‡(
dñèS
 != 1) {

360 
	`ENCODEZ
(
dñèS
);

361 
ch™ges
 |
NEW_I
;

363 i‡(
th
->
th_Êags
 & 
TCP_PSH
) {

364 
ch™ges
 |
TCP_PUSH_BIT
;

370 
dñèA
 = 
	`¡ohs
(
th
->
th_sum
);

371 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

382 
dñèS
 = (
u_sh‹t
)(
˝
 - 
√w_£q
);

383 i‡(!
comp
->
com¥essSlŸ
 || comp->
œ°_xmô
 !
cs
->
cs_id
) {

384 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

385 
hÀn
 -
dñèS
 + 4;

386 if(
	`pbuf_hódî
(
pb
, -
hÀn
)){

388 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

390 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

391 *
˝
++ = 
ch™ges
 | 
NEW_C
;

392 *
˝
++ = 
cs
->
cs_id
;

394 
hÀn
 -
dñèS
 + 3;

395 if(
	`pbuf_hódî
(
pb
, -
hÀn
)) {

397 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

399 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

400 *
˝
++ = 
ch™ges
;

402 *
˝
++ = 
dñèA
 >> 8;

403 *
˝
++ = 
dñèA
;

404 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

405 
	`INCR
(
vjs_com¥es£d
);

406  (
TYPE_COMPRESSED_TCP
);

413 
uncom¥es£d
:

414 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

415 
ù
->
ù_p
 = 
cs
->
cs_id
;

416 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

417  (
TYPE_UNCOMPRESSED_TCP
);

418 
	}
}

424 
	$vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
)

426 
comp
->
Êags
 |
VJF_TOSS
;

427 
	`INCR
(
vjs_îr‹ö
);

428 
	}
}

435 
	$vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
)

437 
u_öt
 
hÀn
;

438 
c°©e
 *
cs
;

439 
ù
 *ip;

441 
ù
 = (ù *)
nb
->
∑ylﬂd
;

442 
hÀn
 = 
	`gëù_hl
(*
ù
) << 2;

443 i‡(
ù
->
ù_p
 >
MAX_SLOTS


444 || 
hÀn
 + (
t˝hdr
Ë> 
nb
->
Àn


445 || (
hÀn
 +
	`gëth_off
(*((
t˝hdr
 *)&((*)
ù
)[hlen])) << 2)

446 > 
nb
->
Àn


447 || 
hÀn
 > 
MAX_HDR
) {

448 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",

449 
ù
->
ù_p
, 
hÀn
, 
nb
->
Àn
));

450 
comp
->
Êags
 |
VJF_TOSS
;

451 
	`INCR
(
vjs_îr‹ö
);

454 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
ù
->
ù_p
];

455 
comp
->
Êags
 &=~ 
VJF_TOSS
;

456 
ù
->
ù_p
 = 
IPPROTO_TCP
;

457 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

458 
cs
->
cs_hÀn
 = 
hÀn
;

459 
	`INCR
(
vjs_uncom¥es£dö
);

461 
	}
}

472 
	$vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
)

474 
u_ch¨
 *
˝
;

475 
t˝hdr
 *
th
;

476 
c°©e
 *
cs
;

477 
u_sh‹t
 *
bp
;

478 
pbuf
 *
n0
 = *
nb
;

479 
u32_t
 
tmp
;

480 
u_öt
 
vjÀn
, 
hÀn
, 
ch™ges
;

482 
	`INCR
(
vjs_com¥es£dö
);

483 
˝
 = (
u_ch¨
 *)
n0
->
∑ylﬂd
;

484 
ch™ges
 = *
˝
++;

485 i‡(
ch™ges
 & 
NEW_C
) {

490 i‡(*
˝
 >
MAX_SLOTS
) {

491 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncom¥ess_t˝: bad cid=%d\n", *
˝
));

492 
bad
;

495 
comp
->
Êags
 &=~ 
VJF_TOSS
;

496 
comp
->
œ°_ªcv
 = *
˝
++;

503 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

504 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp:Åossing\n"));

505 
	`INCR
(
vjs_tos£d
);

509 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

510 
hÀn
 = 
	`gëù_hl
(
cs
->
cs_ù
) << 2;

511 
th
 = (
t˝hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

512 
th
->
th_sum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

513 
˝
 += 2;

514 i‡(
ch™ges
 & 
TCP_PUSH_BIT
) {

515 
th
->
th_Êags
 |
TCP_PSH
;

517 
th
->
th_Êags
 &=~ 
TCP_PSH
;

520 
ch™ges
 & 
SPECIALS_MASK
) {

521 
SPECIAL_I
:

523 
u32_t
 
i
 = 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

525 
tmp
 = 
	`¡ohl
(
th
->
th_ack
Ë+ 
i
;

526 
th
->
th_ack
 = 
	`ht⁄l
(
tmp
);

527 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
i
;

528 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

532 
SPECIAL_D
:

534 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

535 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

539 i‡(
ch™ges
 & 
NEW_U
) {

540 
th
->
th_Êags
 |
TCP_URG
;

541 
	`DECODEU
(
th
->
th_uΩ
);

543 
th
->
th_Êags
 &=~ 
TCP_URG
;

545 i‡(
ch™ges
 & 
NEW_W
) {

546 
	`DECODES
(
th
->
th_wö
);

548 i‡(
ch™ges
 & 
NEW_A
) {

549 
	`DECODEL
(
th
->
th_ack
);

551 i‡(
ch™ges
 & 
NEW_S
) {

552 
	`DECODEL
(
th
->
th_£q
);

556 i‡(
ch™ges
 & 
NEW_I
) {

557 
	`DECODES
(
cs
->
cs_ù
.
ù_id
);

559 
cs
->
cs_ù
.
ù_id
 = 
	`¡ohs
(cs->cs_ip.ip_id) + 1;

560 
cs
->
cs_ù
.
ù_id
 = 
	`ht⁄s
(cs->cs_ip.ip_id);

568 
vjÀn
 = (
u_sh‹t
)(
˝
 - (
u_ch¨
*)
n0
->
∑ylﬂd
);

569 i‡(
n0
->
Àn
 < 
vjÀn
) {

574 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp: head buffer %dÅoo short %d\n",

575 
n0
->
Àn
, 
vjÀn
));

576 
bad
;

579 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


580 
tmp
 = 
n0
->
tŸ_Àn
 - 
vjÀn
 + 
cs
->
cs_hÀn
;

581 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
tmp
);

583 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
n0
->
tŸ_Àn
 - 
vjÀn
 + cs->
cs_hÀn
);

587 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

588 
cs
->
cs_ù
.
ù_sum
 = 0;

589 
tmp
 = 0; 
hÀn
 > 0; hlen -= 2) {

590 
tmp
 +*
bp
++;

592 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

593 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

594 
cs
->
cs_ù
.
ù_sum
 = (
u_sh‹t
)(~
tmp
);

597 if(
	`pbuf_hódî
(
n0
, -((
s16_t
)(
vjÀn
)))) {

599 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

600 
bad
;

603 if(
	`LWIP_MEM_ALIGN
(
n0
->
∑ylﬂd
) !=Ç0->payload) {

604 
pbuf
 *
≈
, *
q
;

605 
u8_t
 *
buÂå
;

607 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
n0
->
Àn
 + 
cs
->
cs_hÀn
, 
PBUF_POOL
);

608 if(!
≈
) {

609 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Ñealign failed\n"));

610 
bad
;

613 if(
	`pbuf_hódî
(
≈
, -
cs
->
cs_hÀn
)) {

615 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

616 
bad
;

619 
buÂå
 = 
n0
->
∑ylﬂd
;

620 
q
 = 
≈
; q !
NULL
; q = q->
√xt
) {

621 
	`MEMCPY
(
q
->
∑ylﬂd
, 
buÂå
, q->
Àn
);

622 
buÂå
 +
q
->
Àn
;

625 if(
n0
->
√xt
) {

626 
	`pbuf_chaö
(
≈
, 
n0
->
√xt
);

627 
	`pbuf_dechaö
(
n0
);

629 
	`pbuf_‰ì
(
n0
);

630 
n0
 = 
≈
;

633 if(
	`pbuf_hódî
(
n0
, 
cs
->
cs_hÀn
)) {

634 
pbuf
 *
≈
;

636 
	`LWIP_ASSERT
("vj_uncom¥ess_t˝: cs->cs_hÀ¿<PBUF_POOL_BUFSIZE", 
cs
->
cs_hÀn
 <
PBUF_POOL_BUFSIZE
);

637 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
cs
->
cs_hÀn
, 
PBUF_POOL
);

638 if(!
≈
) {

639 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Örepend failed\n"));

640 
bad
;

642 
	`pbuf_ˇt
(
≈
, 
n0
);

643 
n0
 = 
≈
;

645 
	`LWIP_ASSERT
("n0->À¿>cs->cs_hÀn", 
n0
->
Àn
 >
cs
->
cs_hÀn
);

646 
	`MEMCPY
(
n0
->
∑ylﬂd
, &
cs
->
cs_ù
, cs->
cs_hÀn
);

648 *
nb
 = 
n0
;

650  
vjÀn
;

652 
bad
:

653 
comp
->
Êags
 |
VJF_TOSS
;

654 
	`INCR
(
vjs_îr‹ö
);

656 
	}
}

	@netif/ppp/vj.h

25 #i‚de‡
VJ_H


26 
	#VJ_H


	)

28 
	~"vjbsdhdr.h
"

30 
	#MAX_SLOTS
 16

	)

31 
	#MAX_HDR
 128

	)

77 
	#TYPE_IP
 0x40

	)

78 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

79 
	#TYPE_COMPRESSED_TCP
 0x80

	)

80 
	#TYPE_ERROR
 0x00

	)

83 
	#NEW_C
 0x40

	)

84 
	#NEW_I
 0x20

	)

85 
	#NEW_S
 0x08

	)

86 
	#NEW_A
 0x04

	)

87 
	#NEW_W
 0x02

	)

88 
	#NEW_U
 0x01

	)

91 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

92 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

95 
	#TCP_PUSH_BIT
 0x10

	)

104 
	sc°©e
 {

105 
c°©e
 *
	mcs_√xt
;

106 
u_sh‹t
 
	mcs_hÀn
;

107 
u_ch¨
 
	mcs_id
;

108 
u_ch¨
 
	mcs_fûÀr
;

110 
	mcsu_hdr
[
MAX_HDR
];

111 
ù
 
	mcsu_ù
;

112 } 
	mvjcs_u
;

114 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

115 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

118 
	svj°©
 {

119 
	mvjs_∑ckës
;

120 
	mvjs_com¥es£d
;

121 
	mvjs_£¨ches
;

122 
	mvjs_mis£s
;

123 
	mvjs_uncom¥es£dö
;

124 
	mvjs_com¥es£dö
;

125 
	mvjs_îr‹ö
;

126 
	mvjs_tos£d
;

132 
	svjcom¥ess
 {

133 
c°©e
 *
	mœ°_cs
;

134 
u_ch¨
 
	mœ°_ªcv
;

135 
u_ch¨
 
	mœ°_xmô
;

136 
u_sh‹t
 
	mÊags
;

137 
u_ch¨
 
	mmaxSlŸIndex
;

138 
u_ch¨
 
	mcom¥essSlŸ
;

139 #i‡
LINK_STATS


140 
vj°©
 
	m°©s
;

142 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

143 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

147 
	#VJF_TOSS
 1U

	)

149 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

150 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

151 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

152 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@netif/ppp/vjbsdhdr.h

1 #i‚de‡
VJBSDHDR_H


2 
	#VJBSDHDR_H


	)

4 
	~"lwù/t˝.h
"

13 
PACK_STRUCT_BEGIN


14 
	sù


16 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

17 
u_ch¨
 
	mù_hl_v
;

19 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


20 
	mù_hl
:4,

21 
	mù_v
 :4;

22 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


23 
	mù_v
 :4,

24 
	mù_hl
:4;

26 
	mCOMPLAIN
 - 
NO
 
BYTE
 
ORDER
 
	mSELECTED
!

29 
u_ch¨
 
	mù_tos
;

30 
u_sh‹t
 
	mù_Àn
;

31 
u_sh‹t
 
	mù_id
;

32 
u_sh‹t
 
	mù_off
;

33 
	#IP_DF
 0x4000

	)

34 
	#IP_MF
 0x2000

	)

35 
	#IP_OFFMASK
 0x1ff‡

	)

36 
u_ch¨
 
	mù_âl
;

37 
u_ch¨
 
	mù_p
;

38 
u_sh‹t
 
	mù_sum
;

39 
ö_addr
 
	mù_§c
,
	mù_d°
;

41 
PACK_STRUCT_END


43 
u32_t
 
	tt˝_£q
;

49 
PACK_STRUCT_BEGIN


50 
	st˝hdr


52 
u_sh‹t
 
	mth_•‹t
;

53 
u_sh‹t
 
	mth_dp‹t
;

54 
t˝_£q
 
	mth_£q
;

55 
t˝_£q
 
	mth_ack
;

56 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

57 
u_ch¨
 
	mth_x2_off
;

59 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


60 
	mth_x2
 :4,

61 
	mth_off
:4;

63 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


64 
	mth_off
:4,

65 
	mth_x2
 :4;

68 
u_ch¨
 
	mth_Êags
;

69 
u_sh‹t
 
	mth_wö
;

70 
u_sh‹t
 
	mth_sum
;

71 
u_sh‹t
 
	mth_uΩ
;

73 
	gPACK_STRUCT_END


	@netif/slipif.c

45 
	~"√tif/¶ùif.h
"

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_HAVE_SLIPIF


50 
	~"lwù/def.h
"

51 
	~"lwù/pbuf.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/sio.h
"

57 
	#SLIP_END
 0300

	)

58 
	#SLIP_ESC
 0333

	)

59 
	#SLIP_ESC_END
 0334

	)

60 
	#SLIP_ESC_ESC
 0335

	)

62 
	#MAX_SIZE
 1500

	)

74 
îr_t


75 
	$¶ùif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

77 
pbuf
 *
q
;

78 
u16_t
 
i
;

79 
u8_t
 
c
;

81 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

82 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

83 
	`LWIP_ASSERT
("∞!NULL", (
p
 !
NULL
));

85 
	`LWIP_UNUSED_ARG
(
ùaddr
);

88 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
i
 = 0; i < 
q
->
Àn
; i++) {

92 
c
 = ((
u8_t
 *)
q
->
∑ylﬂd
)[
i
];

93 
c
) {

94 
SLIP_END
:

95 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

96 
	`sio_£nd
(
SLIP_ESC_END
, 
√tif
->
°©e
);

98 
SLIP_ESC
:

99 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

100 
	`sio_£nd
(
SLIP_ESC_ESC
, 
√tif
->
°©e
);

103 
	`sio_£nd
(
c
, 
√tif
->
°©e
);

108 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

109  
ERR_OK
;

110 
	}
}

120 
pbuf
 *

121 
	$¶ùif_öput
(
√tif
 *netif)

123 
u8_t
 
c
;

125 
pbuf
 *
p
, *
q
;

126 
u16_t
 
ªcved
;

127 
u16_t
 
i
;

129 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

130 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

132 
q
 = 
p
 = 
NULL
;

133 
ªcved
 = 
i
 = 0;

134 
c
 = 0;

137 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

138 
c
) {

139 
SLIP_END
:

140 i‡(
ªcved
 > 0) {

143 
	`pbuf_ªÆloc
(
q
, 
ªcved
);

145 
	`LINK_STATS_INC
(
lök
.
ªcv
);

147 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif: GotÖacket\n"));

148  
q
;

152 
SLIP_ESC
:

153 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

154 
c
) {

155 
SLIP_ESC_END
:

156 
c
 = 
SLIP_END
;

158 
SLIP_ESC_ESC
:

159 
c
 = 
SLIP_ESC
;

166 i‡(
p
 =
NULL
) {

168 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:álloc\n"));

169 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
PBUF_POOL_BUFSIZE
, 
PBUF_POOL
);

171 i‡(
p
 =
NULL
) {

172 
	`LINK_STATS_INC
(
lök
.
dr›
);

173 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:ÇoÇewÖbuf! (DROP)\n"));

178 i‡(
q
 !
NULL
) {

180 
	`pbuf_ˇt
(
q
, 
p
);

183 
q
 = 
p
;

188 i‡((
p
 !
NULL
Ë&& (
ªcved
 <
MAX_SIZE
)) {

189 ((
u8_t
 *)
p
->
∑ylﬂd
)[
i
] = 
c
;

190 
ªcved
++;

191 
i
++;

192 i‡(
i
 >
p
->
Àn
) {

194 
i
 = 0;

195 i‡(
p
->
√xt
 !
NULL
 &&Ö->√xt->
Àn
 > 0) {

197 
p
 =Ö->
√xt
;

201 
p
 = 
NULL
;

208  
NULL
;

209 
	}
}

211 #i‡!
NO_SYS


220 
	$¶ùif_lo›
(*
nf
)

222 
pbuf
 *
p
;

223 
√tif
 *√ti‡(√ti‡*)
nf
;

226 
p
 = 
	`¶ùif_öput
(
√tif
);

227 i‡(
p
 !
NULL
) {

228 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

229 
	`pbuf_‰ì
(
p
);

230 
p
 = 
NULL
;

234 
	}
}

250 
îr_t


251 
	$¶ùif_öô
(
√tif
 *netif)

254 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("¶ùif_öô:Çëif->num=%"
U16_F
"\n", (
u16_t
)
√tif
->
num
));

256 
√tif
->
«me
[0] = 's';

257 
√tif
->
«me
[1] = 'l';

258 
√tif
->
ouçut
 = 
¶ùif_ouçut
;

259 
√tif
->
mtu
 = 
MAX_SIZE
;

260 
√tif
->
Êags
 = 
NETIF_FLAG_POINTTOPOINT
;

263 
√tif
->
°©e
 = 
	`sio_›í
“ëif->
num
);

264 i‡(!
√tif
->
°©e
) {

266  
ERR_IF
;

273 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_¶ù
, 0);

276 
	`sys_thªad_√w
(
SLIPIF_THREAD_NAME
, 
¶ùif_lo›
, 
√tif
, 
SLIPIF_THREAD_STACKSIZE
, 
SLIPIF_THREAD_PRIO
);

277  
ERR_OK
;

278 
	}
}

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

145 #ifde‡
__STDC__


147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
__BEGIN_NAMESPACE_STD


154 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

156 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

157 
__END_NAMESPACE_STD


160 
__BEGIN_NAMESPACE_STD


165 #i‚de‡
__USE_FILE_OFFSET64


166 
FILE
 *
	`tmpfûe
 ();

168 #ifde‡
__REDIRECT


169 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

171 
	#tmpfûe
 
tmpfûe64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
FILE
 *
	`tmpfûe64
 ();

180 *
	$tm≤am
 (*
__s
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_MISC


186 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

190 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


198 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

199 
__THROW
 
__©åibuã_mÆloc__
;

203 
__BEGIN_NAMESPACE_STD


208 
	`f˛o£
 (
FILE
 *
__°ªam
);

213 
	`fÊush
 (
FILE
 *
__°ªam
);

214 
__END_NAMESPACE_STD


216 #ifde‡
__USE_MISC


223 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

226 #ifde‡
__USE_GNU


233 
	`f˛o£Æl
 ();

237 
__BEGIN_NAMESPACE_STD


238 #i‚de‡
__USE_FILE_OFFSET64


243 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

244 
__c⁄°
 *
__ª°ri˘
 
__modes
);

249 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
,

251 
FILE
 *
__ª°ri˘
 
__°ªam
);

253 #ifde‡
__REDIRECT


254 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

256 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

257 
__c⁄°
 *
__ª°ri˘
 
__modes
,

258 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

260 
	#f›í
 
f›í64


	)

261 
	#‰e›í
 
‰e›í64


	)

264 
__END_NAMESPACE_STD


265 #ifde‡
__USE_LARGEFILE64


266 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

267 
__c⁄°
 *
__ª°ri˘
 
__modes
);

268 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

269 
__c⁄°
 *
__ª°ri˘
 
__modes
,

270 
FILE
 *
__ª°ri˘
 
__°ªam
);

273 #ifdef 
__USE_POSIX


275 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

278 #ifdef 
__USE_GNU


281 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

282 
__c⁄°
 *
__ª°ri˘
 
__modes
,

283 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

286 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

291 
FILE
 *
	$›í_mem°ªam
 (**
__ª°ri˘
 
__buÊoc
,

292 
size_t
 *
__ª°ri˘
 
__sizñoc
Ë
__THROW
;

296 
__BEGIN_NAMESPACE_STD


299 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

303 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

304 
__modes
, 
size_t
 
__n
Ë
__THROW
;

305 
__END_NAMESPACE_STD


307 #ifdef 
__USE_BSD


310 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

311 
size_t
 
__size
Ë
__THROW
;

314 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

318 
__BEGIN_NAMESPACE_STD


323 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

324 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

331 
	$•rötf
 (*
__ª°ri˘
 
__s
,

332 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

338 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

339 
_G_va_li°
 
__¨g
);

344 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

346 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

347 
_G_va_li°
 
__¨g
Ë
__THROW
;

348 
__END_NAMESPACE_STD


350 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


351 
__BEGIN_NAMESPACE_C99


353 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

355 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

357 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

359 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

360 
__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

367 
_G_va_li°
 
__¨g
)

368 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

371 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

374 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

382 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

383 
_G_va_li°
 
__¨g
)

384 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

385 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

386 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

390 
__BEGIN_NAMESPACE_STD


395 
	`fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

401 
	`sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

403 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

404 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 
__END_NAMESPACE_STD


407 #ifdef 
__USE_ISOC99


408 
__BEGIN_NAMESPACE_C99


413 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

414 
_G_va_li°
 
__¨g
)

415 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

421 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 1, 0)));

425 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

427 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

428 
__END_NAMESPACE_C99


432 
__BEGIN_NAMESPACE_STD


437 
	`fgëc
 (
FILE
 *
__°ªam
);

438 
	`gëc
 (
FILE
 *
__°ªam
);

444 
	`gëch¨
 ();

445 
__END_NAMESPACE_STD


449 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

451 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


456 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

457 
	`gëch¨_u∆ocked
 ();

460 #ifde‡
__USE_MISC


467 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

471 
__BEGIN_NAMESPACE_STD


479 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

480 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

486 
	`putch¨
 (
__c
);

487 
__END_NAMESPACE_STD


491 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

493 #ifde‡
__USE_MISC


500 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

503 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


508 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

509 
	`putch¨_u∆ocked
 (
__c
);

513 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

514 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

516 
	`gëw
 (
FILE
 *
__°ªam
);

519 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

523 
__BEGIN_NAMESPACE_STD


528 *
	`fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
);

535 *
	`gës
 (*
__s
);

536 
__END_NAMESPACE_STD


538 #ifde‡
__USE_GNU


545 *
	`fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

546 
FILE
 *
__ª°ri˘
 
__°ªam
);

550 #ifdef 
__USE_GNU


561 
_IO_ssize_t
 
	`__gëdñim
 (**
__ª°ri˘
 
__löïå
,

562 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

563 
FILE
 *
__ª°ri˘
 
__°ªam
);

564 
_IO_ssize_t
 
	`gëdñim
 (**
__ª°ri˘
 
__löïå
,

565 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

566 
FILE
 *
__ª°ri˘
 
__°ªam
);

574 
_IO_ssize_t
 
	`gëlöe
 (**
__ª°ri˘
 
__löïå
,

575 
size_t
 *
__ª°ri˘
 
__n
,

576 
FILE
 *
__ª°ri˘
 
__°ªam
);

580 
__BEGIN_NAMESPACE_STD


585 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

591 
	`puts
 (
__c⁄°
 *
__s
);

598 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

605 
size_t
 
	`‰ód
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

606 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

611 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

612 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
);

626 #ifde‡
__USE_MISC


633 
size_t
 
	`‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

634 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

635 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

636 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

640 
__BEGIN_NAMESPACE_STD


645 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

650 
	`·ñl
 (
FILE
 *
__°ªam
);

655 
	`ªwöd
 (
FILE
 *
__°ªam
);

656 
__END_NAMESPACE_STD


663 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


664 #i‚de‡
__USE_FILE_OFFSET64


669 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

674 
__off_t
 
	`·ñlo
 (
FILE
 *
__°ªam
);

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
f£eko
,

678 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

679 
f£eko64
);

680 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

682 
	#f£eko
 
f£eko64


	)

683 
	#·ñlo
 
·ñlo64


	)

688 
__BEGIN_NAMESPACE_STD


689 #i‚de‡
__USE_FILE_OFFSET64


694 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

699 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

701 #ifde‡
__REDIRECT


702 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

703 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

704 
	`__REDIRECT
 (
f£ços
,

705 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

707 
	#fgëpos
 
fgëpos64


	)

708 
	#f£ços
 
f£ços64


	)

711 
__END_NAMESPACE_STD


713 #ifde‡
__USE_LARGEFILE64


714 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

715 
__off64_t
 
	`·ñlo64
 (
FILE
 *
__°ªam
);

716 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

717 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

720 
__BEGIN_NAMESPACE_STD


722 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

724 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
;

726 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
;

727 
__END_NAMESPACE_STD


729 #ifde‡
__USE_MISC


731 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

732 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

733 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

737 
__BEGIN_NAMESPACE_STD


742 
	`≥º‹
 (
__c⁄°
 *
__s
);

743 
__END_NAMESPACE_STD


749 
	~<bôs/sys_îæi°.h
>

752 #ifdef 
__USE_POSIX


754 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
;

757 #ifde‡
__USE_MISC


759 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

763 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

764 
deföed
 
__USE_MISC
)

769 
FILE
 *
	`p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
);

775 
	`p˛o£
 (
FILE
 *
__°ªam
);

779 #ifdef 
__USE_POSIX


781 *
	$˘îmid
 (*
__s
Ë
__THROW
;

785 #ifde‡
__USE_XOPEN


787 *
	`cu£rid
 (*
__s
);

791 #ifdef 
__USE_GNU


792 
ob°ack
;

795 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

796 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

797 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

798 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

799 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

800 
_G_va_li°
 
__¨gs
)

801 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

805 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


809 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

813 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

816 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

819 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


823 
	#__√ed_gë›t


	)

824 
	~<gë›t.h
>

829 #ifde‡
__USE_EXTERN_INLINES


830 
	~<bôs/°dio.h
>

832 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


833 
	~<bôs/°dio2.h
>

836 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_C99


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

277 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

278 **
__ª°ri˘
 
__íd±r
, 
__group
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1));

280 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

281 **
__ª°ri˘
 
__íd±r
, 
__group
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

284 **
__ª°ri˘
 
__íd±r
,

285 
__group
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #i‚de‡
__°πﬁ_öã∫Æ_deföed


287 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

288 **
__ª°ri˘
 
__íd±r
,

289 
__ba£
, 
__group
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

293 #i‚de‡
__°πoul_öã∫Æ_deföed


294 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

295 **
__ª°ri˘
 
__íd±r
,

296 
__ba£
, 
__group
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	#__°πoul_öã∫Æ_deföed
 1

	)

300 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


301 #i‚de‡
__°πﬁl_öã∫Æ_deföed


302 
__exãnsi⁄__


303 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
__ba£
, 
__group
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

309 #i‚de‡
__°πouŒ_öã∫Æ_deföed


310 
__exãnsi⁄__


311 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

312 
__ª°ri˘
 
__≈å
,

313 **
__ª°ri˘
 
__íd±r
,

314 
__ba£
, 
__group
)

315 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

320 #ifde‡
__USE_EXTERN_INLINES


323 
__BEGIN_NAMESPACE_STD


324 
__ölöe
 

325 
	`__NTH
 (
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

327  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

328 
	}
}

329 
__ölöe
 

330 
__NTH
 (
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

331 
__ba£
))

333  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

334 
	}
}

335 
__ölöe
 

336 
__NTH
 (
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

337 
__ba£
))

339  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

340 
	}
}

341 
__END_NAMESPACE_STD


343 #ifde‡
__USE_ISOC99


344 
__BEGIN_NAMESPACE_C99


345 
__ölöe
 

346 
__NTH
 (
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

348  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

349 
	}
}

350 
__ölöe
 

351 
__NTH
 (
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

353  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

354 
	}
}

355 
__END_NAMESPACE_C99


358 #ifde‡
__USE_BSD


359 
__exãnsi⁄__
 
__ölöe
 

360 
__NTH
 (
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

361 
__ba£
))

363  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

364 
	}
}

365 
__exãnsi⁄__
 
__ölöe
 

366 
__NTH
 (
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

367 
__ba£
))

369  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

370 
	}
}

373 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


374 
__BEGIN_NAMESPACE_C99


375 
__exãnsi⁄__
 
__ölöe
 

376 
__NTH
 (
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

377 
__ba£
))

379  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

380 
	}
}

381 
__exãnsi⁄__
 
__ölöe
 

382 
__NTH
 (
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

383 
__ba£
))

385  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

386 
	}
}

387 
__END_NAMESPACE_C99


390 
__BEGIN_NAMESPACE_STD


391 
__ölöe
 

392 
__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

394  
	`°πod
 (
__≈å
, (**Ë
NULL
);

395 
	}
}

396 
__ölöe
 

397 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

399  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

400 
	}
}

401 
__ölöe
 

402 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

404  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

405 
	}
}

406 
__END_NAMESPACE_STD


408 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


409 
__BEGIN_NAMESPACE_C99


410 
__exãnsi⁄__
 
__ölöe
 

411 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

413  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

414 
	}
}

415 
__END_NAMESPACE_C99


420 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


424 *
	$l64a
 (
__n
Ë
__THROW
;

427 
	$a64l
 (
__c⁄°
 *
__s
)

428 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

432 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


433 
	~<sys/ty≥s.h
>

440 
	$øndom
 (Ë
__THROW
;

443 
	$§™dom
 (
__£ed
Ë
__THROW
;

449 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

450 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

454 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 #ifde‡
__USE_MISC


462 
	søndom_d©a


464 
öt32_t
 *
Âå
;

465 
öt32_t
 *
Ωå
;

466 
öt32_t
 *
°©e
;

467 
ønd_ty≥
;

468 
ønd_deg
;

469 
ønd_£p
;

470 
öt32_t
 *
íd_±r
;

473 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

474 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

477 
__THROW
 
	`__n⁄nuŒ
 ((2));

479 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

480 
size_t
 
__°©ñí
,

481 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

482 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

484 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

485 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

486 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 
__BEGIN_NAMESPACE_STD


493 
	$ønd
 (Ë
__THROW
;

495 
	$§™d
 (
__£ed
Ë
__THROW
;

496 
__END_NAMESPACE_STD


498 #ifde‡
__USE_POSIX


500 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

504 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


508 
	$dønd48
 (Ë
__THROW
;

509 
	`î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

512 
	$Ã™d48
 (Ë
__THROW
;

513 
	`ƒ™d48
 (
__xsubi
[3])

514 
__THROW
 
	`__n⁄nuŒ
 ((1));

517 
	$mønd48
 (Ë
__THROW
;

518 
	`jønd48
 (
__xsubi
[3])

519 
__THROW
 
	`__n⁄nuŒ
 ((1));

522 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

523 *
	`£ed48
 (
__£ed16v
[3])

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

525 
	`lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

527 #ifde‡
__USE_MISC


531 
	sdønd48_d©a


533 
__x
[3];

534 
__ﬁd_x
[3];

535 
__c
;

536 
__öô
;

537 
__a
;

541 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

542 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

543 
	`î™d48_r
 (
__xsubi
[3],

544 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

545 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

548 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

549 *
__ª°ri˘
 
__ªsu…
)

550 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 
	`ƒ™d48_r
 (
__xsubi
[3],

552 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

553 *
__ª°ri˘
 
__ªsu…
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

558 *
__ª°ri˘
 
__ªsu…
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 
	`jønd48_r
 (
__xsubi
[3],

561 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

562 *
__ª°ri˘
 
__ªsu…
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

566 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

567 
__THROW
 
	`__n⁄nuŒ
 ((2));

569 
	`£ed48_r
 (
__£ed16v
[3],

570 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 
	`lc⁄g48_r
 (
__∑øm
[7],

573 
dønd48_d©a
 *
__buf„r
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


581 
	#__mÆloc_™d_ˇŒoc_deföed


	)

582 
__BEGIN_NAMESPACE_STD


584 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

586 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
;

588 
__END_NAMESPACE_STD


591 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


592 
__BEGIN_NAMESPACE_STD


595 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

597 
	$‰ì
 (*
__±r
Ë
__THROW
;

598 
__END_NAMESPACE_STD


600 #ifdef 
__USE_MISC


602 
	$c‰ì
 (*
__±r
Ë
__THROW
;

605 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


606 
	~<Æloˇ.h
>

609 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


611 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

614 #ifde‡
__USE_XOPEN2K


616 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

617 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

620 
__BEGIN_NAMESPACE_STD


622 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

627 
__END_NAMESPACE_STD


629 #ifdef 
__USE_MISC


632 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

633 
__THROW
 
	`__n⁄nuŒ
 ((1));

636 
__BEGIN_NAMESPACE_STD


640 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 
__END_NAMESPACE_STD


643 #ifde‡
__USE_ISOC99


644 
__BEGIN_NAMESPACE_C99


647 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

648 
__END_NAMESPACE_C99


652 
__BEGIN_NAMESPACE_STD


654 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

655 
__END_NAMESPACE_STD


659 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

661 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


665 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

668 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


671 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

672 
__THROW
 
	`__n⁄nuŒ
 ((2));

675 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

678 #ifdef 
__USE_MISC


682 
	$˛óªnv
 (Ë
__THROW
;

686 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


691 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

701 #i‚de‡
__USE_FILE_OFFSET64


702 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

704 #ifde‡
__REDIRECT


705 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
Ë
	`__n⁄nuŒ
 ((1));

707 
	#mk°emp
 
mk°emp64


	)

710 #ifde‡
__USE_LARGEFILE64


711 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

715 #ifde‡
__USE_BSD


721 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

725 
__BEGIN_NAMESPACE_STD


730 
	`sy°em
 (
__c⁄°
 *
__comm™d
);

731 
__END_NAMESPACE_STD


734 #ifdef 
__USE_GNU


738 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


749 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

750 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
;

755 #i‚de‡
__COMPAR_FN_T


756 
	#__COMPAR_FN_T


	)

757 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

759 #ifdef 
__USE_GNU


760 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

764 
__BEGIN_NAMESPACE_STD


767 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

768 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

769 
	`__n⁄nuŒ
 ((1, 2, 5));

773 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

774 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

778 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

779 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

780 
__END_NAMESPACE_STD


782 #ifde‡
__USE_ISOC99


783 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

784 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

788 
__BEGIN_NAMESPACE_STD


792 
div_t
 
	$div
 (
__numî
, 
__díom
)

793 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

794 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

796 
__END_NAMESPACE_STD


798 #ifde‡
__USE_ISOC99


799 
__BEGIN_NAMESPACE_C99


800 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

801 
__díom
)

802 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

803 
__END_NAMESPACE_C99


807 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


814 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

820 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

821 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

826 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3));

830 #ifde‡
__USE_MISC


832 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

835 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

836 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

838 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

839 
__THROW
 
	`__n⁄nuŒ
 ((3));

844 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

848 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

849 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

855 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

856 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

857 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

858 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

863 
__BEGIN_NAMESPACE_STD


866 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

870 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

877 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

878 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

880 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

881 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

882 
__THROW
;

883 
__END_NAMESPACE_STD


886 #ifde‡
__USE_SVID


891 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN_EXTENDED


902 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

903 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

904 **
__ª°ri˘
 
__vÆuï
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

909 #ifde‡
__USE_XOPEN


911 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

917 #ifde‡
__USE_XOPEN2K


919 
	`posix_›í±
 (
__oÊag
);

922 #ifde‡
__USE_XOPEN


927 
	$gø¡±
 (
__fd
Ë
__THROW
;

931 
	$u∆ock±
 (
__fd
Ë
__THROW
;

936 *
	$±¢ame
 (
__fd
Ë
__THROW
;

939 #ifde‡
__USE_GNU


943 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

944 
__THROW
 
	`__n⁄nuŒ
 ((2));

947 
	`gë±
 ();

950 #ifde‡
__USE_BSD


954 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

955 
__THROW
 
	`__n⁄nuŒ
 ((1));

959 #unde‡
__√ed_mÆloc_™d_ˇŒoc


961 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

288 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_BSD


292 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

296 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

300 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

307 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

308 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

312 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

316 #ifdef 
__USE_GNU


317 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

318 #ifde‡
__GNUC__


319 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

333 #ifdef 
__USE_GNU


336 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

337 
__loˇÀ_t
 
__loc
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

340 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

341 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

345 #ifdef 
__USE_BSD


348 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

349 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 #ifdef 
__USE_GNU


355 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

356 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

362 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

364 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

370 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

373 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

380 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

382 #i‚de‡
ba£«me


387 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

393 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

394 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


414 
	~<bôs/°rög.h
>

417 
	~<bôs/°rög2.h
>

420 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


422 
	~<bôs/°rög3.h
>

426 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

56 
__STDIO_INLINE
 

57 
	$gëch¨_u∆ocked
 ()

59  
	`_IO_gëc_u∆ocked
 (
°dö
);

60 
	}
}

65 
__STDIO_INLINE
 

66 
	$putch¨
 (
__c
)

68  
	`_IO_putc
 (
__c
, 
°dout
);

69 
	}
}

72 #ifde‡
__USE_MISC


74 
__STDIO_INLINE
 

75 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

77  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

78 
	}
}

82 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

91 
__STDIO_INLINE
 

92 
	$putch¨_u∆ocked
 (
__c
)

94  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

95 
	}
}

99 #ifdef 
__USE_GNU


101 
__STDIO_INLINE
 
_IO_ssize_t


102 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

104  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

105 
	}
}

109 #ifde‡
__USE_MISC


111 
__STDIO_INLINE
 

112 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

114  
	`_IO_„of_u∆ocked
 (
__°ªam
);

115 
	}
}

118 
__STDIO_INLINE
 

119 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

121  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

122 
	}
}

128 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


130 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

131 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

132 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

133 && (
size_t
Ë(
size
) != 0) \

134 ? ({ *
__±r
 = (*Ë(
±r
); \

135 
FILE
 *
__°ªam
 = (
°ªam
); \

136 
size_t
 
__˙t
; \

137 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

138 
__˙t
 > 0; --__cnt) \

140 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

141 i‡(
__c
 =
EOF
) \

143 *
__±r
++ = 
__c
; \

145 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

146 / (
size_t
Ë(
size
); }) \

147 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

148 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

150 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

151 (Ë(
n
), (
size_t
) 0) \

152 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

154 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

155 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

156 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

157 && (
size_t
Ë(
size
) != 0) \

158 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

159 
FILE
 *
__°ªam
 = (
°ªam
); \

160 
size_t
 
__˙t
; \

161 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

162 
__˙t
 > 0; --__cnt) \

163 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

165 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

166 / (
size_t
Ë(
size
); }) \

167 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

168 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

170 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

171 (Ë(
n
), (
size_t
) 0) \

172 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

176 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 
	#•rötf
(
°r
, ...) \

31 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

32 
__VA_ARGS__
)

	)

33 
	#v•rötf
(
°r
, 
fmt
, 
≠
) \

34 
	`__buûtö___v•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (°r), 
fmt
, 
≠
)

	)

36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


38 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

39 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

40 ...Ë
__THROW
;

41 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

42 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

43 
_G_va_li°
 
__≠
Ë
__THROW
;

45 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

46 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

47 
__VA_ARGS__
)

	)

48 
	#v¢¥ötf
(
°r
, 
Àn
, 
fmt
, 
≠
) \

49 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

50 
fmt
, 
≠
)

	)

54 #i‡
__USE_FORTIFY_LEVEL
 > 1

56 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

57 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

58 
	`__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

59 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

60 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

61 
	`__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

62 
_G_va_li°
 
__≠
);

64 #i‡
	`__GNUC_PREREQ
 (4, 0)

65 
	#¥ötf
(...) \

66 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

67 
	#Ârötf
(
°ªam
, ...) \

68 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

69 
	#v¥ötf
(
f‹m©
, 
≠
) \

70 
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

71 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

72 
	`__vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

74 
	#¥ötf
(...) \

75 
	`__buûtö___¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

76 
	#Ârötf
(
°ªam
, ...) \

77 
	`__buûtö___Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

78 
	#v¥ötf
(
f‹m©
, 
≠
) \

79 
	`__buûtö___v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

80 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

81 
	`__buûtö___vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

86 *
	`__gës_chk
 (*
__°r
, 
size_t
);

87 
	#gës
(
__°r
) \

88 ((
	`__bos
 (
__°r
Ë=(
size_t
) -1) \

89 ? (
gës
Ë(
__°r
Ë: 
	`__gës_chk
 (__°r, 
	`__bos
 (__°r)))

	)

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


25 
	#_STRING_ARCH_u«lig√d
 1

	)

30 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

31 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


33 #i‚de‡
__STRING_INLINE


34 #ifde‡
__˝lu•lus


35 
	#__STRING_INLINE
 
ölöe


	)

37 
	#__STRING_INLINE
 
__ölöe


	)

43 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

44 
	#mem˝y
(
de°
, 
§c
, 
n
) \

45 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

46 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

47 : 
	`mem˝y
 ((
de°
), (
§c
), (
n
))))

	)

50 
__STRING_INLINE
 *
__mem˝y_c
 (*
__de°
, 
__c⁄°
 *
__§c
,

51 
size_t
 
__n
);

53 
__STRING_INLINE
 *

54 
	$__mem˝y_c
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

56 
__d0
, 
__d1
, 
__d2
;

58 
__ui
;

59 
__usi
;

60 
__uc
;

61 } *
__u
 = 
__de°
;

62 
__n
)

65  
__de°
;

67 
__u
->
__uc
 = *(c⁄° *Ë
__§c
;

68  
__de°
;

70 
__u
->
__usi
 = *(c⁄° *Ë
__§c
;

71  
__de°
;

73 
__u
->
__usi
 = *(c⁄° *Ë
__§c
;

74 
__u
 = (*) __u + 2;

75 
__u
->
__uc
 = *(2 + (c⁄° *Ë
__§c
);

76  
__de°
;

78 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

79  
__de°
;

81 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

82 
__u
 = (*) __u + 4;

83 
__u
->
__usi
 = *(2 + (c⁄° *Ë
__§c
);

84  
__de°
;

86 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

87 
__u
 = (*) __u + 4;

88 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

89  
__de°
;

91 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

92 
__u
 = (*) __u + 4;

93 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

94 
__u
 = (*) __u + 4;

95 
__u
->
__ui
 = *(2 + (c⁄° *Ë
__§c
);

96  
__de°
;

98 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

99 
__u
 = (*) __u + 4;

100 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

101 
__u
 = (*) __u + 4;

102 
__u
->
__ui
 = *(2 + (c⁄° *Ë
__§c
);

103 
__u
 = (*) __u + 4;

104 
__u
->
__ui
 = *(3 + (c⁄° *Ë
__§c
);

105  
__de°
;

107 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

108 
__u
 = (*) __u + 4;

109 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

110 
__u
 = (*) __u + 4;

111 
__u
->
__ui
 = *(2 + (c⁄° *Ë
__§c
);

112 
__u
 = (*) __u + 4;

113 
__u
->
__ui
 = *(3 + (c⁄° *Ë
__§c
);

114 
__u
 = (*) __u + 4;

115 
__u
->
__ui
 = *(4 + (c⁄° *Ë
__§c
);

116  
__de°
;

118 
	#__COMMON_CODE
(
x
) \

119 
__asm__
 
__vﬁ©ûe__
 \

122 
x
 \

123 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
) \

124 : "0" (
__n
 / 4), "1" (&
__u
->
__uc
), "2" (
__§c
) \

125 : "mem‹y");

	)

127 
__n
 % 4)

130 
	`__COMMON_CODE
 ("");

133 
	`__COMMON_CODE
 ("\n\tmovsb");

136 
	`__COMMON_CODE
 ("\n\tmovsw");

139 
	`__COMMON_CODE
 ("\n\tmovsw\n\tmovsb");

142  
__de°
;

143 #unde‡
__COMMON_CODE


144 
	}
}

149 
	#_HAVE_STRING_ARCH_memmove
 1

	)

150 #i‚de‡
_FORCE_INLINES


151 
__STRING_INLINE
 *

152 
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

154 
__d0
, 
__d1
, 
__d2
;

155 i‡(
__de°
 < 
__§c
)

156 
__asm__
 
__vﬁ©ûe__


160 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

161 : "0" (
__n
), "1" (
__§c
), "2" (
__de°
)

164 
__asm__
 
__vﬁ©ûe__


169 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

170 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

171 "2" (
__n
 - 1 + (*Ë
__de°
)

173  
__de°
;

174 
	}
}

178 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

179 
	#_USE_STRING_ARCH_mem£t
 1

	)

180 
	#mem£t
(
s
, 
c
, 
n
) \

181 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

182 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

183 ? 
	`__mem£t_cc
 (
s
, 0x01010101UL * (Ë(
c
), 
n
) \

184 : 
	`__mem£t_cg
 (
s
, 0x01010101UL * (Ë(
c
), 
n
))\

185 : 
	`__mem£t_gg
 (
s
, 
c
, 
n
)))

	)

187 
__STRING_INLINE
 *
__mem£t_cc
 (*
__s
, 
__∑âîn
,

188 
size_t
 
__n
);

190 
__STRING_INLINE
 *

191 
	$__mem£t_cc
 (*
__s
, 
__∑âîn
, 
size_t
 
__n
)

193 
__d0
, 
__d1
;

195 
__ui
;

196 
__usi
;

197 
__uc
;

198 } *
__u
 = 
__s
;

199 
__n
)

202  
__s
;

204 
__u
->
__uc
 = 
__∑âîn
;

205  
__s
;

207 
__u
->
__usi
 = 
__∑âîn
;

208  
__s
;

210 
__u
->
__usi
 = 
__∑âîn
;

211 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

212 
__u
->
__uc
 = 
__∑âîn
;

213  
__s
;

215 
__u
->
__ui
 = 
__∑âîn
;

216  
__s
;

218 
	#__COMMON_CODE
(
x
) \

219 
__asm__
 
__vﬁ©ûe__
 \

222 
x
 \

223 : "=&c" (
__d0
), "=&D" (
__d1
) \

224 : "a" (
__∑âîn
), "0" (
__n
 / 4), "1" (&
__u
->
__uc
) \

225 : "mem‹y")

	)

227 
__n
 % 4)

230 
	`__COMMON_CODE
 ("");

233 
	`__COMMON_CODE
 ("\n\tstosb");

236 
	`__COMMON_CODE
 ("\n\tstosw");

239 
	`__COMMON_CODE
 ("\n\tstosw\n\tstosb");

242  
__s
;

243 #unde‡
__COMMON_CODE


244 
	}
}

246 
__STRING_INLINE
 *
__mem£t_cg
 (*
__s
, 
__c
, 
size_t
 
__n
);

248 
__STRING_INLINE
 *

249 
	$__mem£t_cg
 (*
__s
, 
__c
, 
size_t
 
__n
)

251 
__d0
, 
__d1
;

252 
__asm__
 
__vﬁ©ûe__


263 : "=&c" (
__d0
), "=&D" (
__d1
)

264 : "a" (
__c
), "q" (
__n
), "0" (__¿/ 4), "1" (
__s
)

266  
__s
;

267 
	}
}

269 
__STRING_INLINE
 *
__mem£t_gg
 (*
__s
, 
__c
, 
size_t
 
__n
);

271 
__STRING_INLINE
 *

272 
	$__mem£t_gg
 (*
__s
, 
__c
, 
size_t
 
__n
)

274 
__d0
, 
__d1
;

275 
__asm__
 
__vﬁ©ûe__


278 : "=&D" (
__d0
), "=&c" (
__d1
)

279 : "a" (
__c
), "0" (
__s
), "1" (
__n
)

281  
__s
;

282 
	}
}

288 
	#_HAVE_STRING_ARCH_memchr
 1

	)

289 #i‚de‡
_FORCE_INLINES


290 
__STRING_INLINE
 *

291 
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

293 
__d0
;

294 *
__ªs
;

295 i‡(
__n
 == 0)

296  
NULL
;

297 
__asm__
 
__vﬁ©ûe__


303 : "=D" (
__ªs
), "=&c" (
__d0
)

304 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

305 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

307  
__ªs
 - 1;

308 
	}
}

311 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

312 #i‚de‡
_FORCE_INLINES


313 
__STRING_INLINE
 *

314 
	$__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

316 
__d0
;

317 *
__ªs
;

318 i‡(
__n
 == 0)

319  
NULL
;

320 
__asm__
 
__vﬁ©ûe__


327 : "=D" (
__ªs
), "=&c" (
__d0
)

328 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

329 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

331  
__ªs
;

332 
	}
}

333 #ifde‡
__USE_GNU


334 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 (s, c,Ç)

	)

339 
	#_HAVE_STRING_ARCH_°æí
 1

	)

340 #i‚de‡
_FORCE_INLINES


341 
__STRING_INLINE
 
size_t


342 
	$°æí
 (
__c⁄°
 *
__°r
)

344 
__d0
;

345 
size_t
 
__ªs
;

346 
__asm__
 
__vﬁ©ûe__


350 : "=c" (
__ªs
), "=&D" (
__d0
)

351 : "1" (
__°r
), "a" (0), "0" (0xffffffff),

352 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

354  
__ªs
 - 1;

355 
	}
}

359 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

360 #i‚de‡
_FORCE_INLINES


361 
__STRING_INLINE
 *

362 
	$°r˝y
 (*
__de°
, 
__c⁄°
 *
__§c
)

364 
__d0
, 
__d1
;

365 
__asm__
 
__vﬁ©ûe__


372 : "=&S" (
__d0
), "=&D" (
__d1
)

373 : "0" (
__§c
), "1" (
__de°
)

375  
__de°
;

376 
	}
}

380 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

381 #i‚de‡
_FORCE_INLINES


382 
__STRING_INLINE
 *

383 
	$°∫˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

385 
__d0
, 
__d1
, 
__d2
;

386 
__asm__
 
__vﬁ©ûe__


397 : "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

398 : "0" (
__§c
), "1" (
__de°
), "2" (
__n
)

400  
__de°
;

401 
	}
}

405 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

406 #i‚de‡
_FORCE_INLINES


407 
__STRING_INLINE
 *

408 
	$°rˇt
 (*
__de°
, 
__c⁄°
 *
__§c
)

410 
__d0
, 
__d1
, 
__d2
, 
__d3
;

411 
__asm__
 
__vﬁ©ûe__


420 : "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
), "=&a" (
__d3
)

421 : "0" (
__§c
), "1" (
__de°
), "2" (0xffffffff), "3" (0)

423  
__de°
;

424 
	}
}

428 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

429 #i‚de‡
_FORCE_INLINES


430 
__STRING_INLINE
 *

431 
	$°∫ˇt
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

433 
__d0
, 
__d1
, 
__d2
, 
__d3
;

434 
__asm__
 
__vﬁ©ûe__


451 : "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
), "=&a" (
__d3
)

452 : "g" (
__n
), "0" (
__§c
), "1" (
__de°
), "2" (0xffffffff), "3" (0)

454  
__de°
;

455 
	}
}

459 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

460 #i‚de‡
_FORCE_INLINES


461 
__STRING_INLINE
 

462 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

464 
__d0
, 
__d1
;

465 
__ªs
;

466 
__asm__
 
__vﬁ©ûe__


480 : "˜" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
)

481 : "1" (
__s1
), "2" (
__s2
),

482 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

485  
__ªs
;

486 
	}
}

490 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

491 #i‚de‡
_FORCE_INLINES


492 
__STRING_INLINE
 

493 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

495 
__d0
, 
__d1
, 
__d2
;

496 
__ªs
;

497 
__asm__
 
__vﬁ©ûe__


514 : "˜" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

515 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

516 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

517 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

519  
__ªs
;

520 
	}
}

524 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

525 
	#_USE_STRING_ARCH_°rchr
 1

	)

526 
	#°rchr
(
s
, 
c
) \

527 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

528 ? 
	`__°rchr_c
 (
s
, ((
c
) & 0xff) << 8) \

529 : 
	`__°rchr_g
 (
s
, 
c
)))

	)

531 
__STRING_INLINE
 *
__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
);

533 
__STRING_INLINE
 *

534 
	$__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
)

536 
__d0
;

537 *
__ªs
;

538 
__asm__
 
__vﬁ©ûe__


550 : "˜" (
__ªs
), "=&S" (
__d0
)

551 : "0" (
__c
), "1" (
__s
),

552 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

554  
__ªs
 - 1;

555 
	}
}

557 
__STRING_INLINE
 *
__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
);

559 
__STRING_INLINE
 *

560 
	$__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
)

562 
__d0
;

563 *
__ªs
;

564 
__asm__
 
__vﬁ©ûe__


575 : "˜" (
__ªs
), "=&S" (
__d0
)

576 : "0" (
__c
), "1" (
__s
),

577 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

579  
__ªs
 - 1;

580 
	}
}

584 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

585 
	#__°rch∫ul
(
s
, 
c
) \

586 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

587 ? ((
c
) == '\0' \

588 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

589 : 
	`__°rch∫ul_c
 (
s
, ((
c
) & 0xff) << 8)) \

590 : 
	`__°rch∫ul_g
 (
s
, 
c
)))

	)

592 
__STRING_INLINE
 *
__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
);

594 
__STRING_INLINE
 *

595 
	$__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
)

597 
__d0
;

598 *
__ªs
;

599 
__asm__
 
__vﬁ©ûe__


610 : "˜" (
__ªs
), "=&S" (
__d0
)

611 : "0" (
__c
), "1" (
__s
),

612 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

614  
__ªs
 - 1;

615 
	}
}

617 
__STRING_INLINE
 *
__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
);

619 
__STRING_INLINE
 *

620 
	$__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
)

622 
__d0
;

623 *
__ªs
;

624 
__asm__
 
__vﬁ©ûe__


634 : "˜" (
__ªs
), "=&S" (
__d0
)

635 : "0" (
__c
), "1" (
__s
),

636 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

638  
__ªs
 - 1;

639 
	}
}

640 #ifde‡
__USE_GNU


641 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 (s, c)

	)

647 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

648 #i‚de‡
_FORCE_INLINES


649 #ifde‡
__PIC__


650 
__STRING_INLINE
 
size_t


651 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

653 
__d0
, 
__d1
, 
__d2
;

654 *
__ªs
;

655 
__asm__
 
__vﬁ©ûe__


673 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

674 : "d" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff),

675 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

677  (
__ªs
 - 1Ë- 
__s
;

678 
	}
}

680 
__STRING_INLINE
 
size_t


681 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

683 
__d0
, 
__d1
, 
__d2
, 
__d3
;

684 *
__ªs
;

685 
__asm__
 
__vﬁ©ûe__


701 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

702 : "g" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff),

703 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

705  (
__ªs
 - 1Ë- 
__s
;

706 
	}
}

713 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

714 #i‚de‡
_FORCE_INLINES


715 #ifde‡
__PIC__


716 
__STRING_INLINE
 
size_t


717 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

719 
__d0
, 
__d1
, 
__d2
;

720 *
__ªs
;

721 
__asm__
 
__vﬁ©ûe__


739 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

740 : "r" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff),

741 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

743  (
__ªs
 - 1Ë- 
__s
;

744 
	}
}

746 
__STRING_INLINE
 
size_t


747 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

749 
__d0
, 
__d1
, 
__d2
, 
__d3
;

750 *
__ªs
;

751 
__asm__
 
__vﬁ©ûe__


767 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

768 : "g" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff),

769 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

771  (
__ªs
 - 1Ë- 
__s
;

772 
	}
}

778 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

779 #i‚de‡
_FORCE_INLINES


780 #ifde‡
__PIC__


781 
__STRING_INLINE
 *

782 
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

784 
__d0
, 
__d1
, 
__d2
;

785 *
__ªs
;

786 
__asm__
 
__vﬁ©ûe__


808 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

809 : "r" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff),

810 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

812  
__ªs
;

813 
	}
}

815 
__STRING_INLINE
 *

816 
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

818 
__d0
, 
__d1
, 
__d2
, 
__d3
;

819 *
__ªs
;

820 
__asm__
 
__vﬁ©ûe__


840 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

841 : "g" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff),

842 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

844  
__ªs
;

845 
	}
}

851 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

852 #i‚de‡
_FORCE_INLINES


853 #ifde‡
__PIC__


854 
__STRING_INLINE
 *

855 
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

857 
__d0
, 
__d1
, 
__d2
;

858 *
__ªs
;

859 
__asm__
 
__vﬁ©ûe__


880 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

881 : "r" (
__√edÀ
), "0" (0), "1" (0xffffffff), "2" (
__hay°ack
)

883  
__ªs
;

884 
	}
}

886 
__STRING_INLINE
 *

887 
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

889 
__d0
, 
__d1
, 
__d2
, 
__d3
;

890 *
__ªs
;

891 
__asm__
 
__vﬁ©ûe__


910 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

911 : "g" (
__√edÀ
), "0" (0), "1" (0xffffffff), "2" (
__hay°ack
)

913  
__ªs
;

914 
	}
}

918 #i‚de‡
_FORCE_INLINES


919 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1170 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1173 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1174 
__STRING_INLINE
 *

1175 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1177 *
__ªsu…
;

1178 i‡(
__s
 =
NULL
)

1179 
__s
 = *
__√xç
;

1180 *
__s
 =
__£p
)

1181 ++
__s
;

1182 
__ªsu…
 = 
NULL
;

1183 i‡(*
__s
 != '\0')

1185 
__ªsu…
 = 
__s
++;

1186 *
__s
 != '\0')

1187 i‡(*
__s
++ =
__£p
)

1189 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1194  
__ªsu…
;

1195 
	}
}

1196 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1197 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1202 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1203 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1205 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1206 
	#__°r£p
(
s
, 
ªje˘
) \

1207 
__exãnsi⁄__
 \

1208 ({ 
__r0
, 
__r1
, 
__r2
; \

1209 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1210 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1211 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1212 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1213 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1214 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1215 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1216 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1217 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1218 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1220 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1223 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1224 
__STRING_INLINE
 *

1225 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1227 *
__ªtvÆ
 = *
__s
;

1228 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1229 *(*
__s
)++ = '\0';

1230  
__ªtvÆ
;

1231 
	}
}

1233 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1234 
__STRING_INLINE
 *

1235 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1237 *
__ªtvÆ
 = *
__s
;

1238 i‡(
__ªtvÆ
 !
NULL
)

1240 *
__˝
 = 
__ªtvÆ
;

1243 i‡(*
__˝
 == '\0')

1245 
__˝
 = 
NULL
;

1248 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1250 *
__˝
++ = '\0';

1253 ++
__˝
;

1255 *
__s
 = 
__˝
;

1257  
__ªtvÆ
;

1258 
	}
}

1260 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1261 
__ªje˘3
);

1262 
__STRING_INLINE
 *

1263 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1265 *
__ªtvÆ
 = *
__s
;

1266 i‡(
__ªtvÆ
 !
NULL
)

1268 *
__˝
 = 
__ªtvÆ
;

1271 i‡(*
__˝
 == '\0')

1273 
__˝
 = 
NULL
;

1276 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1278 *
__˝
++ = '\0';

1281 ++
__˝
;

1283 *
__s
 = 
__˝
;

1285  
__ªtvÆ
;

1286 
	}
}

1287 #ifde‡
__USE_BSD


1288 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1295 #ifde‡
__USE_MISC


1297 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1298 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1299 
	~<°dlib.h
>

1302 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1304 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1305 
	#__°rdup
(
s
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1307 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1308 ? (*Ë
	`ˇŒoc
 (1, 1) \

1309 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1310 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1311 i‡(
__ªtvÆ
 !
NULL
) \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1313 
__ªtvÆ
; 
	}
})) \

1314 : 
	`__°rdup
 (
s
)))

	)

1316 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1317 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1321 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1323 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1324 
__THROW
 
__©åibuã_mÆloc__
;

1325 
	#__°∫dup
(
s
, 
n
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1327 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1328 ? (*Ë
	`ˇŒoc
 (1, 1) \

1329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1330 
size_t
 
__n
 = (
n
); \

1331 *
__ªtvÆ
; \

1332 i‡(
__n
 < 
__Àn
) \

1333 
__Àn
 = 
__n
 + 1; \

1334 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1335 i‡(
__ªtvÆ
 !
NULL
) \

1337 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1338 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1339 
__Àn
 - 1); \

1341 
__ªtvÆ
; 
	}
})) \

1342 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1344 #ifde‡
__USE_GNU


1345 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1351 #i‚de‡
_FORCE_INLINES


1352 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


26 #unde‡
mem˝y


27 #unde‡
memmove


28 #unde‡
mem£t


29 #unde‡
°rˇt


30 #unde‡
°r˝y


31 #unde‡
°∫ˇt


32 #unde‡
°∫˝y


33 #ifde‡
__USE_GNU


34 #unde‡
memp˝y


35 #unde‡
°p˝y


37 #ifde‡
__USE_BSD


38 #unde‡
bc›y


39 #unde‡
bzîo


43 
	#mem˝y
(
de°
, 
§c
, 
Àn
) \

44 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

45 ? 
	`__buûtö___mem˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

46 : 
	`__mem˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

47 
__ölöe__
 *

48 
__©åibuã__
 ((
__Æways_ölöe__
))

49 
	$__mem˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
)

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

56 
	#memmove
(
de°
, 
§c
, 
Àn
) \

57 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

58 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

59 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
))

	)

60 
__ölöe__
 *

61 
__©åibuã__
 ((
__Æways_ölöe__
))

62 
	$__memmove_ichk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

64  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

65 
	}
}

68 #ifde‡
__USE_GNU


69 
	#memp˝y
(
de°
, 
§c
, 
Àn
) \

70 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

71 ? 
	`__buûtö___memp˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

72 : 
	`__memp˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

73 
__ölöe__
 *

74 
__©åibuã__
 ((
__Æways_ölöe__
))

75 
	$__memp˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

76 
size_t
 
__Àn
)

78  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

79 
	}
}

83 
	#mem£t
(
de°
, 
ch
, 
Àn
) \

84 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

85 ? 
	`__buûtö___mem£t_chk
 (
de°
, 
ch
, 
Àn
, 
	`__bos0
 (dest)) \

86 : 
	`__mem£t_ichk
 (
de°
, 
ch
, 
Àn
))

	)

87 
__ölöe__
 *

88 
__©åibuã__
 ((
__Æways_ölöe__
))

89 
	$__mem£t_ichk
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
)

91  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 #ifde‡
__USE_BSD


95 
	#bc›y
(
§c
, 
de°
, 
Àn
) (() \

96 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

97 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

98 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
)))

	)

99 
	#bzîo
(
de°
, 
Àn
) (() \

100 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

101 ? 
	`__buûtö___mem£t_chk
 (
de°
, '\0', 
Àn
, 
	`__bos0
 (dest)) \

102 : 
	`__mem£t_ichk
 (
de°
, '\0', 
Àn
)))

	)

106 
	#°r˝y
(
de°
, 
§c
) \

107 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

108 ? 
	`__buûtö___°r˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

109 : 
	`__°r˝y_ichk
 (
de°
, 
§c
))

	)

110 
__ölöe__
 *

111 
__©åibuã__
 ((
__Æways_ölöe__
))

112 
	$__°r˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

114  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

118 #ifde‡
__USE_GNU


119 
	#°p˝y
(
de°
, 
§c
) \

120 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

121 ? 
	`__buûtö___°p˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

122 : 
	`__°p˝y_ichk
 (
de°
, 
§c
))

	)

123 
__ölöe__
 *

124 
__©åibuã__
 ((
__Æways_ölöe__
))

125 
	$__°p˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

127  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

128 
	}
}

132 
	#°∫˝y
(
de°
, 
§c
, 
Àn
) \

133 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

134 ? 
	`__buûtö___°∫˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

135 : 
	`__°∫˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

136 
__ölöe__
 *

137 
__©åibuã__
 ((
__Æways_ölöe__
))

138 
	$__°∫˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

139 
size_t
 
__Àn
)

141  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

142 
	}
}

145 
	#°rˇt
(
de°
, 
§c
) \

146 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

147 ? 
	`__buûtö___°rˇt_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

148 : 
	`__°rˇt_ichk
 (
de°
, 
§c
))

	)

149 
__ölöe__
 *

150 
__©åibuã__
 ((
__Æways_ölöe__
))

151 
	$__°rˇt_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

153  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

154 
	}
}

157 
	#°∫ˇt
(
de°
, 
§c
, 
Àn
) \

158 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

159 ? 
	`__buûtö___°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

160 : 
	`__°∫ˇt_ichk
 (
de°
, 
§c
, 
Àn
))

	)

161 
__ölöe__
 *

162 
__©åibuã__
 ((
__Æways_ölöe__
))

163 
	$__°∫ˇt_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

164 
size_t
 
__Àn
)

166  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

167 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	#__SQUAD_TYPE
 

	)

119 
	#__UQUAD_TYPE
 

	)

120 
	#__SWORD_TYPE
 

	)

121 
	#__UWORD_TYPE
 

	)

122 
	#__SLONG32_TYPE
 

	)

123 
	#__ULONG32_TYPE
 

	)

124 
	#__S64_TYPE
 

	)

125 
	#__U64_TYPE
 

	)

129 
	~<bôs/ty≥sizes.h
>

133 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

136 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

137 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

138 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

139 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

140 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

141 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

142 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

143 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

144 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

145 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

146 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

147 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

148 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

149 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

150 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

151 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

152 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

153 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

155 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

156 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

157 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

160 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

163 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

166 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

171 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

172 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

175 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

176 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

179 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

180 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

186 
__off64_t
 
	t__loff_t
;

187 
__quad_t
 *
	t__qaddr_t
;

188 *
	t__ˇddr_t
;

191 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

194 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

197 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WALL
 0x40000000

	)

36 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

90 #unde‡
__USE_ISOC99


91 #unde‡
__USE_POSIX


92 #unde‡
__USE_POSIX2


93 #unde‡
__USE_POSIX199309


94 #unde‡
__USE_POSIX199506


95 #unde‡
__USE_XOPEN


96 #unde‡
__USE_XOPEN_EXTENDED


97 #unde‡
__USE_UNIX98


98 #unde‡
__USE_XOPEN2K


99 #unde‡
__USE_LARGEFILE


100 #unde‡
__USE_LARGEFILE64


101 #unde‡
__USE_FILE_OFFSET64


102 #unde‡
__USE_BSD


103 #unde‡
__USE_SVID


104 #unde‡
__USE_MISC


105 #unde‡
__USE_GNU


106 #unde‡
__USE_REENTRANT


107 #unde‡
__USE_FORTIFY_LEVEL


108 #unde‡
__FAVOR_BSD


109 #unde‡
__KERNEL_STRICT_NAMES


113 #i‚de‡
_LOOSE_KERNEL_NAMES


114 
	#__KERNEL_STRICT_NAMES


	)

118 
	#__USE_ANSI
 1

	)

127 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


128 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

129 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

131 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

136 #i‡
deföed
 
_BSD_SOURCE
 && \

137 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

138 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

139 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

140 
	#__FAVOR_BSD
 1

	)

144 #ifde‡
_GNU_SOURCE


145 #unde‡
_ISOC99_SOURCE


146 
	#_ISOC99_SOURCE
 1

	)

147 #unde‡
_POSIX_SOURCE


148 
	#_POSIX_SOURCE
 1

	)

149 #unde‡
_POSIX_C_SOURCE


150 
	#_POSIX_C_SOURCE
 199506L

	)

151 #unde‡
_XOPEN_SOURCE


152 
	#_XOPEN_SOURCE
 600

	)

153 #unde‡
_XOPEN_SOURCE_EXTENDED


154 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

155 #unde‡
_LARGEFILE64_SOURCE


156 
	#_LARGEFILE64_SOURCE
 1

	)

157 #unde‡
_BSD_SOURCE


158 
	#_BSD_SOURCE
 1

	)

159 #unde‡
_SVID_SOURCE


160 
	#_SVID_SOURCE
 1

	)

165 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

166 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

167 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

168 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

169 
	#_BSD_SOURCE
 1

	)

170 
	#_SVID_SOURCE
 1

	)

177 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

178 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

179 
	#__USE_ISOC99
 1

	)

184 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

185 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

186 
	#_POSIX_SOURCE
 1

	)

187 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

188 
	#_POSIX_C_SOURCE
 2

	)

190 
	#_POSIX_C_SOURCE
 199506L

	)

194 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


195 
	#__USE_POSIX
 1

	)

198 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


199 
	#__USE_POSIX2
 1

	)

202 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

203 
	#__USE_POSIX199309
 1

	)

206 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

207 
	#__USE_POSIX199506
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

211 
	#__USE_XOPEN2K
 1

	)

214 #ifdef 
_XOPEN_SOURCE


215 
	#__USE_XOPEN
 1

	)

216 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

217 
	#__USE_XOPEN_EXTENDED
 1

	)

218 
	#__USE_UNIX98
 1

	)

219 #unde‡
_LARGEFILE_SOURCE


220 
	#_LARGEFILE_SOURCE
 1

	)

221 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

222 
	#__USE_XOPEN2K
 1

	)

223 #unde‡
__USE_ISOC99


224 
	#__USE_ISOC99
 1

	)

227 #ifde‡
_XOPEN_SOURCE_EXTENDED


228 
	#__USE_XOPEN_EXTENDED
 1

	)

233 #ifde‡
_LARGEFILE_SOURCE


234 
	#__USE_LARGEFILE
 1

	)

237 #ifde‡
_LARGEFILE64_SOURCE


238 
	#__USE_LARGEFILE64
 1

	)

241 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

242 
	#__USE_FILE_OFFSET64
 1

	)

245 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


246 
	#__USE_MISC
 1

	)

249 #ifdef 
_BSD_SOURCE


250 
	#__USE_BSD
 1

	)

253 #ifdef 
_SVID_SOURCE


254 
	#__USE_SVID
 1

	)

257 #ifdef 
_GNU_SOURCE


258 
	#__USE_GNU
 1

	)

261 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


262 
	#__USE_REENTRANT
 1

	)

265 #i‡
_FORTIFY_SOURCE
 > 0 && 
__OPTIMIZE__
 > 0 \

266 && (
__GNUC_PREREQ
 (4, 1) \

267 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

268 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

269 && 
	g__GNUC_MINOR__
 == 4 \

270 && (
__GNUC_PATCHLEVEL__
 > 2 \

271 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

272 #i‡
_FORTIFY_SOURCE
 == 1

273 
	#__USE_FORTIFY_LEVEL
 1

	)

274 #ñi‡
_FORTIFY_SOURCE
 > 1

275 
	#__USE_FORTIFY_LEVEL
 2

	)

280 
	#__STDC_IEC_559__
 1

	)

281 
	#__STDC_IEC_559_COMPLEX__
 1

	)

284 
	#__STDC_ISO_10646__
 200009L

	)

292 #unde‡
__GNU_LIBRARY__


293 
	#__GNU_LIBRARY__
 6

	)

297 
	#__GLIBC__
 2

	)

298 
	#__GLIBC_MINOR__
 3

	)

300 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

301 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

304 #i‡
deföed
 
__GNUC__
 \

305 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

306 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

307 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

308 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

312 #i‚de‡
__ASSEMBLER__


313 #i‚de‡
_SYS_CDEFS_H


314 
	~<sys/cdefs.h
>

319 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


320 
	#__USE_LARGEFILE
 1

	)

321 
	#__USE_LARGEFILE64
 1

	)

327 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

328 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


329 
	#__USE_EXTERN_INLINES
 1

	)

337 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

147 
	#_IO_SKIPWS
 01

	)

148 
	#_IO_LEFT
 02

	)

149 
	#_IO_RIGHT
 04

	)

150 
	#_IO_INTERNAL
 010

	)

151 
	#_IO_DEC
 020

	)

152 
	#_IO_OCT
 040

	)

153 
	#_IO_HEX
 0100

	)

154 
	#_IO_SHOWBASE
 0200

	)

155 
	#_IO_SHOWPOINT
 0400

	)

156 
	#_IO_UPPERCASE
 01000

	)

157 
	#_IO_SHOWPOS
 02000

	)

158 
	#_IO_SCIENTIFIC
 04000

	)

159 
	#_IO_FIXED
 010000

	)

160 
	#_IO_UNITBUF
 020000

	)

161 
	#_IO_STDIO
 040000

	)

162 
	#_IO_DONT_CLOSE
 0100000

	)

163 
	#_IO_BOOLALPHA
 0200000

	)

166 
_IO_jump_t
; 
	g_IO_FILE
;

169 #ifde‡
_IO_MTSAFE_IO


170 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

171 
	~<bôs/°dio-lock.h
>

176 
	t_IO_lock_t
;

182 
	s_IO_m¨kî
 {

183 
_IO_m¨kî
 *
	m_√xt
;

184 
_IO_FILE
 *
	m_sbuf
;

188 
	m_pos
;

190 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

191 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

192 
	mpublic
:

193 
°ªamm¨kî
(
°ªambuf
 *
sb
);

194 ~
°ªamm¨kî
();

195 
ßvög
(Ë{  
	m_•os
 == -2; }

196 
dñè
(
°ªamm¨kî
&);

197 
dñè
();

202 
	e__codecvt_ªsu…


204 
	m__codecvt_ok
,

205 
	m__codecvt_∑πül
,

206 
	m__codecvt_îr‹
,

207 
	m__codecvt_noc⁄v


210 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


213 
	s_IO_codecvt


215 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

216 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

217 
	m__mb°©e_t
 *,

218 c⁄° 
	mwch¨_t
 *,

219 c⁄° 
	mwch¨_t
 *,

220 c⁄° 
	mwch¨_t
 **, *,

222 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *, *,

225 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

226 
	m__mb°©e_t
 *,

228 c⁄° **, 
	mwch¨_t
 *,

229 
	mwch¨_t
 *, wchar_t **);

230 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

231 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

232 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

233 c⁄° *, c⁄° *, 
	m_IO_size_t
);

234 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

236 
_IO_ic⁄v_t
 
	m__cd_ö
;

237 
_IO_ic⁄v_t
 
	m__cd_out
;

241 
	s_IO_wide_d©a


243 
wch¨_t
 *
	m_IO_ªad_±r
;

244 
wch¨_t
 *
	m_IO_ªad_íd
;

245 
wch¨_t
 *
	m_IO_ªad_ba£
;

246 
wch¨_t
 *
	m_IO_wrôe_ba£
;

247 
wch¨_t
 *
	m_IO_wrôe_±r
;

248 
wch¨_t
 *
	m_IO_wrôe_íd
;

249 
wch¨_t
 *
	m_IO_buf_ba£
;

250 
wch¨_t
 *
	m_IO_buf_íd
;

252 
wch¨_t
 *
	m_IO_ßve_ba£
;

253 
wch¨_t
 *
	m_IO_backup_ba£
;

255 
wch¨_t
 *
	m_IO_ßve_íd
;

257 
__mb°©e_t
 
	m_IO_°©e
;

258 
__mb°©e_t
 
	m_IO_œ°_°©e
;

259 
_IO_codecvt
 
	m_codecvt
;

261 
wch¨_t
 
	m_sh‹tbuf
[1];

263 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

267 
	s_IO_FILE
 {

268 
	m_Êags
;

269 
	#_IO_fûe_Êags
 
_Êags


	)

273 * 
	m_IO_ªad_±r
;

274 * 
	m_IO_ªad_íd
;

275 * 
	m_IO_ªad_ba£
;

276 * 
	m_IO_wrôe_ba£
;

277 * 
	m_IO_wrôe_±r
;

278 * 
	m_IO_wrôe_íd
;

279 * 
	m_IO_buf_ba£
;

280 * 
	m_IO_buf_íd
;

282 *
	m_IO_ßve_ba£
;

283 *
	m_IO_backup_ba£
;

284 *
	m_IO_ßve_íd
;

286 
_IO_m¨kî
 *
	m_m¨kîs
;

288 
_IO_FILE
 *
	m_chaö
;

290 
	m_fûío
;

292 
	m_blksize
;

294 
	m_Êags2
;

296 
_IO_off_t
 
	m_ﬁd_off£t
;

298 
	#__HAVE_COLUMN


	)

300 
	m_cur_cﬁumn
;

301 sig√d 
	m_vèbÀ_off£t
;

302 
	m_sh‹tbuf
[1];

306 
_IO_lock_t
 *
	m_lock
;

307 #ifde‡
_IO_USE_OLD_IO_FILE


310 
	s_IO_FILE_com∂ëe


312 
_IO_FILE
 
	m_fûe
;

314 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

315 
_IO_off64_t
 
	m_off£t
;

316 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


318 
_IO_codecvt
 *
	m_codecvt
;

319 
_IO_wide_d©a
 *
	m_wide_d©a
;

321 *
	m__∑d1
;

322 *
	m__∑d2
;

324 
	m_mode
;

326 
	m_unu£d2
[15 *  () - 2 *  (*)];

330 #i‚de‡
__˝lu•lus


331 
_IO_FILE
 
	t_IO_FILE
;

334 
	g_IO_FILE_∂us
;

336 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

337 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

338 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

339 #i‚de‡
_LIBC


340 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

341 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

342 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

344 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

345 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

346 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

354 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

362 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

363 
	tsize_t
 
	t__n
);

371 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

374 
	t__io_˛o£_‚
 (*
	t__cookõ
);

377 #ifde‡
_GNU_SOURCE


379 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

380 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

381 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

382 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

387 
__io_ªad_‚
 *
	mªad
;

388 
__io_wrôe_‚
 *
	mwrôe
;

389 
__io_£ek_‚
 *
	m£ek
;

390 
__io_˛o£_‚
 *
	m˛o£
;

391 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

392 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

394 
	g_IO_cookõ_fûe
;

397 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

398 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

402 #ifde‡
__˝lu•lus


406 
__undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

407 
__uÊow
 (
_IO_FILE
 *Ë
__THROW
;

408 
__ovîÊow
 (
_IO_FILE
 *, Ë
__THROW
;

409 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *Ë
__THROW
;

410 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *Ë
__THROW
;

411 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

413 #i‡ 
__GNUC__
 >= 3

414 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (ex¥,Ñes)

	)

416 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

419 
	#_IO_gëc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

421 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

422 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

423 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

424 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

425 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

426 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

428 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

429 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

431 
	#_IO_gëwc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

434 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

435 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

436 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

437 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

438 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

439 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

441 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

442 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

444 
_IO_gëc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

445 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

446 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

447 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

449 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

452 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

453 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

455 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

456 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

457 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

459 #ifde‡
_IO_MTSAFE_IO


460 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

461 
	#_IO_Êockfûe
(
_Â
) \

462 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

463 
	#_IO_fu∆ockfûe
(
_Â
) \

464 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

466 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

467 
	#_IO_Êockfûe
(
_Â
Ë

	)

468 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

469 
	#_IO_·rylockfûe
(
_Â
Ë

	)

470 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

471 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

474 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

475 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

476 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

477 
_IO_va_li°
Ë
__THROW
;

478 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_tË
__THROW
;

479 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_tË
__THROW
;

481 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , Ë
__THROW
;

482 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

484 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

486 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


487 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

488 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

489 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

490 #i‡
__GNUC__
 >= 2

493 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


494 
	~<shlib-com∑t.h
>

495 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

496 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

497 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

498 c⁄° 
_IO_°dö_u£d
;

499 
wók_exã∫
 (
_IO_°dö_u£d
);

502 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


503 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

507 
	#_IO_fwide
(
__Â
, 
__mode
) \

508 ({ 
__ªsu…
 = (
__mode
); \

509 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

511 i‡((
__Â
)->
_mode
 == 0) \

513 (
__Â
)->
_mode
 = -1; \

514 
__ªsu…
 = (
__Â
)->
_mode
; \

516 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

517 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

519 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

520 
__ªsu…
; })

	)

523 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

524 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

525 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

526 
_IO_va_li°
Ë
__THROW
;

527 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_tË
__THROW
;

528 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

531 #ifde‡
__˝lu•lus


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__GLIBC_HAVE_LONG_LONG


167 
__exãnsi⁄__
 
	töt64_t
;

172 
	tu_öt8_t
;

173 
	tu_öt16_t
;

174 
	tu_öt32_t
;

175 #i‡
__GLIBC_HAVE_LONG_LONG


176 
__exãnsi⁄__
 
	tu_öt64_t
;

179 
	tªgi°î_t
;

184 
	#__ötN_t
(
N
, 
MODE
) \

185 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

186 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

187 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 #i‚de‡
	t__öt8_t_deföed


190 
	t__öt8_t_deföed


	)

191 
	t__ötN_t
 (8, 
	t__QI__
);

192 
__ötN_t
 (16, 
__HI__
);

193 
__ötN_t
 (32, 
__SI__
);

194 
__ötN_t
 (64, 
__DI__
);

197 
__u_ötN_t
 (8, 
__QI__
);

198 
__u_ötN_t
 (16, 
__HI__
);

199 
__u_ötN_t
 (32, 
__SI__
);

200 
__u_ötN_t
 (64, 
__DI__
);

202 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

208 
	#__BIT_TYPES_DEFINED__
 1

	)

211 #ifdef 
__USE_BSD


213 
	~<ídün.h
>

216 
	~<sys/£À˘.h
>

219 
	~<sys/sysma¸os.h
>

223 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


224 
__blksize_t
 
	tblksize_t
;

225 
	#__blksize_t_deföed


	)

229 #i‚de‡
__USE_FILE_OFFSET64


230 #i‚de‡
__blk˙t_t_deföed


231 
__blk˙t_t
 
	tblk˙t_t
;

232 
	#__blk˙t_t_deföed


	)

234 #i‚de‡
__fsblk˙t_t_deföed


235 
__fsblk˙t_t
 
	tfsblk˙t_t
;

236 
	#__fsblk˙t_t_deföed


	)

238 #i‚de‡
__fsfû˙t_t_deföed


239 
__fsfû˙t_t
 
	tfsfû˙t_t
;

240 
	#__fsfû˙t_t_deföed


	)

243 #i‚de‡
__blk˙t_t_deföed


244 
__blk˙t64_t
 
	tblk˙t_t
;

245 
	#__blk˙t_t_deföed


	)

247 #i‚de‡
__fsblk˙t_t_deföed


248 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

249 
	#__fsblk˙t_t_deföed


	)

251 #i‚de‡
__fsfû˙t_t_deföed


252 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

253 
	#__fsfû˙t_t_deföed


	)

257 #ifde‡
__USE_LARGEFILE64


258 
__blk˙t64_t
 
	tblk˙t64_t
;

259 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

260 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

265 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


266 
	~<bôs/±hªadty≥s.h
>

269 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_MREMAP
 1

	)

73 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

74 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

75 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

77 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

79 
	#_G_OPEN64
 
__›í64


	)

80 
	#_G_LSEEK64
 
__l£ek64


	)

81 
	#_G_MMAP64
 
__mm≠64


	)

82 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

85 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

87 
	#_G_BUFSIZ
 8192

	)

90 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

91 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

92 
	#_G_USING_THUNKS
 1

	)

93 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

94 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

97 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


98 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

100 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/pthreadtypes.h

15 #i‡!
deföed
 
_BITS_TYPES_H
 && !deföed 
_PTHREAD_H


19 #i‚de‡
_BITS_PTHREADTYPES_H


20 
	#_BITS_PTHREADTYPES_H
 1

	)

22 
	#__√ed_sched∑øm


	)

23 
	~<bôs/sched.h
>

26 
	s_±hªad_Á°lock


28 
	m__°©us
;

29 
	m__•ölock
;

33 #i‚de‡
_PTHREAD_DESCR_DEFINED


35 
_±hªad_des¸_°ru˘
 *
	t_±hªad_des¸
;

36 
	#_PTHREAD_DESCR_DEFINED


	)

41 
	s__±hªad_©å_s


43 
	m__dëach°©e
;

44 
	m__schedpﬁicy
;

45 
__sched_∑øm
 
	m__sched∑øm
;

46 
	m__öhîôsched
;

47 
	m__sc›e
;

48 
size_t
 
	m__gu¨dsize
;

49 
	m__°ackaddr_£t
;

50 *
	m__°ackaddr
;

51 
size_t
 
	m__°acksize
;

52 } 
	t±hªad_©å_t
;

57 #ifde‡
__GLIBC_HAVE_LONG_LONG


58 
__exãnsi⁄__
 
	t__±hªad_c⁄d_Æign_t
;

60 
	t__±hªad_c⁄d_Æign_t
;

65 
_±hªad_Á°lock
 
	m__c_lock
;

66 
_±hªad_des¸
 
	m__c_waôög
;

67 
	m__∑ddög
[48 -  (
_±hªad_Á°lock
)

68 -  (
_±hªad_des¸
Ë-  (
__±hªad_c⁄d_Æign_t
)];

69 
__±hªad_c⁄d_Æign_t
 
	m__Æign
;

70 } 
	t±hªad_c⁄d_t
;

76 
	m__dummy
;

77 } 
	t±hªad_c⁄d©å_t
;

80 
	t±hªad_key_t
;

88 
	m__m_ª£rved
;

89 
	m__m_cou¡
;

90 
_±hªad_des¸
 
	m__m_ow√r
;

91 
	m__m_köd
;

92 
_±hªad_Á°lock
 
	m__m_lock
;

93 } 
	t±hªad_muãx_t
;

99 
	m__muãxköd
;

100 } 
	t±hªad_muãx©å_t
;

104 
	t±hªad_⁄˚_t
;

107 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


109 
	s_±hªad_rwlock_t


111 
_±hªad_Á°lock
 
	m__rw_lock
;

112 
	m__rw_ªadîs
;

113 
_±hªad_des¸
 
	m__rw_wrôî
;

114 
_±hªad_des¸
 
	m__rw_ªad_waôög
;

115 
_±hªad_des¸
 
	m__rw_wrôe_waôög
;

116 
	m__rw_köd
;

117 
	m__rw_psh¨ed
;

118 } 
	t±hªad_rwlock_t
;

124 
	m__lockköd
;

125 
	m__psh¨ed
;

126 } 
	t±hªad_rwlock©å_t
;

129 #ifde‡
__USE_XOPEN2K


131 vﬁ©ûê
	t±hªad_•ölock_t
;

135 
_±hªad_Á°lock
 
	m__ba_lock
;

136 
	m__ba_ªquúed
;

137 
	m__ba_¥e£¡
;

138 
_±hªad_des¸
 
	m__ba_waôög
;

139 } 
	t±hªad_b¨rõr_t
;

143 
	m__psh¨ed
;

144 } 
	t±hªad_b¨rõøâr_t
;

150 
	t±hªad_t
;

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 
__S32_TYPE


	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

19 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/gnu/stubs.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_add_key


	)

14 
	#__°ub_chÊags


	)

15 
	#__°ub_Áâach


	)

16 
	#__°ub_fchÊags


	)

17 
	#__°ub_fdëach


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_key˘l


	)

20 
	#__°ub_lchmod


	)

21 
	#__°ub_lutimes


	)

22 
	#__°ub_ªque°_key


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_s°k


	)

26 
	#__°ub_°ty


	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


45 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

46 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

47 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

49 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

50 
	#__THROW
 
	`throw
 ()

	)

51 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

53 
	#__THROW


	)

54 
	#__NTH
(
f˘
Ë
	)
fct

60 
	#__ölöe


	)

62 
	#__THROW


	)

63 
	#__NTH
(
f˘
Ë
	)
fct

65 
	#__c⁄°
 c⁄°

	)

66 
	#__sig√d
 sig√d

	)

67 
	#__vﬁ©ûe
 vﬁ©ûe

	)

73 
	#__P
(
¨gs
Ë
	)
args

74 
	#__PMT
(
¨gs
Ë
	)
args

79 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

80 
	#__STRING
(
x
Ë#x

	)

83 
	#__±r_t
 *

	)

84 
	#__l⁄g_doubÀ_t
 

	)

88 #ifdef 
__˝lu•lus


89 
	#__BEGIN_DECLS
 "C" {

	)

90 
	#__END_DECLS
 }

	)

92 
	#__BEGIN_DECLS


	)

93 
	#__END_DECLS


	)

102 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


103 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

104 
	#__END_NAMESPACE_STD
 }

	)

105 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

106 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

107 
	#__END_NAMESPACE_C99
 }

	)

108 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

113 
	#__BEGIN_NAMESPACE_STD


	)

114 
	#__END_NAMESPACE_STD


	)

115 
	#__USING_NAMESPACE_STD
(
«me
)

	)

116 
	#__BEGIN_NAMESPACE_C99


	)

117 
	#__END_NAMESPACE_C99


	)

118 
	#__USING_NAMESPACE_C99
(
«me
)

	)

123 #i‚de‡
__BOUNDED_POINTERS__


124 
	#__bounded


	)

125 
	#__unbounded


	)

126 
	#__±rvÆue


	)

131 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

132 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

136 #i‡
__GNUC_PREREQ
 (2,97)

138 
	#__Êex¨r
 []

	)

140 #ifde‡
__GNUC__


141 
	#__Êex¨r
 [0]

	)

143 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

144 
	#__Êex¨r
 []

	)

147 
	#__Êex¨r
 [1]

	)

163 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

165 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

166 #ifde‡
__˝lu•lus


167 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

168 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

170 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

171 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

173 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

174 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

187 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

188 
	#__©åibuã__
(
xyz
Ë

	)

194 #i‡
__GNUC_PREREQ
 (2,96)

195 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

197 
	#__©åibuã_mÆloc__


	)

203 #i‡
__GNUC_PREREQ
 (2,96)

204 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

206 
	#__©åibuã_puª__


	)

212 #i‡
__GNUC_PREREQ
 (3,1)

213 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

214 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

216 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

217 
	#__©åibuã_noölöe__


	)

221 #i‡
__GNUC_PREREQ
 (3,2)

222 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

224 
	#__©åibuã_dïªˇãd__


	)

233 #i‡
__GNUC_PREREQ
 (2,8)

234 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

243 #i‡
__GNUC_PREREQ
 (2,97)

244 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

245 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

247 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

252 #i‡
__GNUC_PREREQ
 (3,3)

253 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

255 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡!
__GNUC_PREREQ
 (2,8)

263 
	#__exãnsi⁄__


	)

267 #i‡!
__GNUC_PREREQ
 (2,92)

268 
	#__ª°ri˘


	)

274 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


275 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

277 #ifde‡
__GNUC__


278 
	#__ª°ri˘_¨r


	)

280 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

281 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

284 
	#__ª°ri˘_¨r


	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

118 
	stime•ec


120 
__time_t
 
tv_£c
;

121 
tv_n£c
;

125 #unde‡
__√ed_time•ec


128 #ifdef 
_TIME_H


129 
__BEGIN_NAMESPACE_STD


131 
	stm


133 
tm_£c
;

134 
tm_mö
;

135 
tm_hour
;

136 
tm_mday
;

137 
tm_m⁄
;

138 
tm_yór
;

139 
tm_wday
;

140 
tm_yday
;

141 
tm_isd°
;

143 #ifdef 
__USE_BSD


144 
tm_gmtoff
;

145 
__c⁄°
 *
tm_z⁄e
;

147 
__tm_gmtoff
;

148 
__c⁄°
 *
__tm_z⁄e
;

151 
__END_NAMESPACE_STD


152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


153 
	$__USING_NAMESPACE_STD
(
tm
)

157 #ifde‡
__USE_POSIX199309


159 
	sôimî•ec


161 
time•ec
 
ô_öãrvÆ
;

162 
time•ec
 
ô_vÆue
;

166 
sigevít
;

170 #ifde‡
__USE_XOPEN2K


171 #i‚de‡
__pid_t_deföed


172 
__pid_t
 
	tpid_t
;

173 
	#__pid_t_deföed


	)

178 
__BEGIN_NAMESPACE_STD


181 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

184 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

187 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

188 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

191 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

197 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

198 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

199 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

200 
__END_NAMESPACE_STD


202 #ifde‡
__USE_XOPEN


205 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

207 
__THROW
;

210 #ifde‡
__USE_GNU


213 
	~<xloˇÀ.h
>

215 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

216 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

217 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

218 
__loˇÀ_t
 
__loc
Ë
__THROW
;

220 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

221 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

222 
__loˇÀ_t
 
__loc
Ë
__THROW
;

226 
__BEGIN_NAMESPACE_STD


229 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

233 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

234 
__END_NAMESPACE_STD


236 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


239 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

240 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

244 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

245 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
__BEGIN_NAMESPACE_STD


251 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

254 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

255 
__END_NAMESPACE_STD


257 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


262 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

263 *
__ª°ri˘
 
__buf
Ë
__THROW
;

266 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

272 *
__tz«me
[2];

273 
__daylight
;

274 
__timez⁄e
;

277 #ifdef 
__USE_POSIX


279 *
tz«me
[2];

283 
	$tz£t
 (Ë
__THROW
;

286 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


287 
daylight
;

288 
timez⁄e
;

291 #ifde‡
__USE_SVID


294 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

300 
	#__i¶óp
(
yór
) \

301 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

304 #ifde‡
__USE_MISC


309 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

312 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

315 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

319 #ifde‡
__USE_POSIX199309


324 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

325 
time•ec
 *
__ªmaöög
);

329 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

332 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

335 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

336 
__THROW
;

338 #ifde‡
__USE_XOPEN2K


343 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

344 
__c⁄°
 
time•ec
 *
__ªq
,

345 
time•ec
 *
__ªm
);

348 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

353 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

354 
sigevít
 *
__ª°ri˘
 
__evp
,

355 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

358 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

361 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

362 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

363 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

366 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

367 
__THROW
;

370 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

374 #ifde‡
__USE_XOPEN_EXTENDED


386 
gëd©e_îr
;

395 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

398 #ifde‡
__USE_GNU


409 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

410 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

413 
__END_DECLS


	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

26 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


27 
	~<löuxthªads/öã∫Æs.h
>

31 #i‡
deföed
(
_LIBC
Ë|| deföed(
_IO_MTSAFE_IO
)

32 
±hªad_muãx_t
 
	t__libc_lock_t
;

33 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

34 #ifde‡
__USE_UNIX98


35 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

37 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

39 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

41 
__libc_lock_›aque__
 
	t__libc_lock_t
;

42 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

43 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

47 
±hªad_key_t
 
	t__libc_key_t
;

56 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_t
 
NAME
;

	)

58 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

59 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

60 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

62 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

63 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

74 #i‡
__LT_SPINLOCK_INIT
 == 0

75 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_t
 
NAME
;

	)

78 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

82 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

83 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

87 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

88 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

89 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

90 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

92 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

93 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

94 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

95 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

97 #i‡
deföed
 
_LIBC
 && deföed 
IS_IN_lib±hªad


98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
ËFUNC 
	)
ARGS

100 #i‡
deföed
 
__PIC__
 || (deföed 
_LIBC
 && deföed 
SHARED
)

101 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

102 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

103 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

105 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

106 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

109 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


110 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
) \

111 ({
	`__buûtö_ex≥˘
 (
__libc_±hªad_fun˘i⁄s
.
±r_
##
FUNC
 !
NULL
, 0) \

112 ? 
__libc_±hªad_fun˘i⁄s
.
±r_
##
FUNC
 
ARGS
 : 
ELSE
; })

	)

114 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

119 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


120 
	#__libc_lock_öô
(
NAME
) \

122 (
NAME
).
__m_cou¡
 = 0; \

123 (
NAME
).
__m_ow√r
 = 
NULL
; \

124 (
NAME
).
__m_köd
 = 
PTHREAD_MUTEX_TIMED_NP
; \

125 (
NAME
).
__m_lock
.
__°©us
 = 0; \

126 (
NAME
).
__m_lock
.
__•ölock
 = 
__LT_SPINLOCK_INIT
; \

127 0; })

	)

129 
	#__libc_lock_öô
(
NAME
) \

130 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

132 
	#__libc_rwlock_öô
(
NAME
) \

133 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

136 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


137 
	#__libc_lock_öô_ªcursive
(
NAME
) \

139 (
NAME
).
muãx
.
__m_cou¡
 = 0; \

140 (
NAME
).
muãx
.
__m_ow√r
 = 
NULL
; \

141 (
NAME
).
muãx
.
__m_köd
 = 
PTHREAD_MUTEX_RECURSIVE_NP
; \

142 (
NAME
).
muãx
.
__m_lock
.
__°©us
 = 0; \

143 (
NAME
).
muãx
.
__m_lock
.
__•ölock
 = 
__LT_SPINLOCK_INIT
; \

144 0; })

	)

146 
	#__libc_lock_öô_ªcursive
(
NAME
) \

148 i‡(
__±hªad_muãx_öô
 !
NULL
) \

150 
±hªad_muãx©å_t
 
__©å
; \

151 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

152 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

153 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

154 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

156 } 0);

	)

158 
	#__πld_lock_öô_ªcursive
(
NAME
) \

159 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

164 
	#__libc_lock_föi
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

166 
	#__libc_rwlock_föi
(
NAME
) \

167 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

170 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

171 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

174 
	#__libc_lock_lock
(
NAME
) \

175 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

176 
	#__libc_rwlock_rdlock
(
NAME
) \

177 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

178 
	#__libc_rwlock_wæock
(
NAME
) \

179 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

182 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

185 
	#__libc_lock_åylock
(
NAME
) \

186 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

187 
	#__libc_rwlock_åyrdlock
(
NAME
) \

188 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

189 
	#__libc_rwlock_åywæock
(
NAME
) \

190 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

193 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

194 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

195 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

198 
	#__libc_lock_u∆ock
(
NAME
) \

199 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

200 
	#__libc_rwlock_u∆ock
(
NAME
) \

201 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

204 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

206 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


207 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

208 ++((
±hªad_muãx_t
 *)(
lock
))->
__m_cou¡
;

	)

210 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

211 --((
±hªad_muãx_t
 *)(
lock
))->
__m_cou¡
;

	)

213 
	#__πld_lock_lock_ªcursive
(
NAME
) \

214 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

216 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

217 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

219 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

220 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

224 #i‡
PTHREAD_ONCE_INIT
 == 0

227 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

228 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

230 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

231 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

235 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

237 i‡(
__±hªad_⁄˚
 !
NULL
) \

238 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

239 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

240 
	`INIT_FUNCTION
 (); \

241 (
ONCE_CONTROL
) = 2; \

243 } 0)

	)

247 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

248 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

249 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

250 i‡(
_avaû
) { \

251 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

252 }

	)

255 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

256 i‡(
_avaû
) { \

257 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

259 }

	)

262 
	#__libc_˛ónup_íd
(
DOIT
) \

263 i‡(
_avaû
) { \

264 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

265 }

	)

267 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

268 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

269 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

271 
	#__libc_˛ónup_p›
(
execuã
) \

272 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

273 }

	)

276 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

277 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

280 
	#__libc_gë•ecific
(
KEY
) \

281 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

284 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

285 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

289 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

290 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

295 
__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

296 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

298 
__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

300 
__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

302 
__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

304 
__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

306 
__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

308 
__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

310 
__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

311 
__köd
);

313 #ifde‡
__USE_UNIX98


314 
__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

315 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

317 
__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

319 
__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

321 
__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

323 
__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

325 
__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

327 
__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

330 
__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

331 (*
__de°r_fun˘i⁄
) (*));

333 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

334 
__c⁄°
 *
__poöãr
);

336 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

338 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

339 (*
__öô_routöe
) ());

341 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

342 (*
__∑ª¡
) (),

343 (*
__chûd
) ());

349 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


350 #ifde‡
wók_exã∫


351 #i‡
_LIBC


352 
	~<bp-sym.h
>

354 
	#BP_SYM
 (
sym
Ë
	)
sym

356 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

357 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

358 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

359 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

360 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

361 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

362 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

363 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

364 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

365 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

366 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

367 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

368 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

369 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

370 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

371 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

372 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

373 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

374 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

375 
	$wók_exã∫
 (
__±hªad_öôülize
)

376 
	$wók_exã∫
 (
__±hªad_©f‹k
)

377 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push
))

378 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›
))

379 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

380 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

382 #¥agm®
wók
 
__±hªad_muãx_öô


383 #¥agm®
wók
 
__±hªad_muãx_de°roy


384 #¥agm®
wók
 
__±hªad_muãx_lock


385 #¥agm®
wók
 
__±hªad_muãx_åylock


386 #¥agm®
wók
 
__±hªad_muãx_u∆ock


387 #¥agm®
wók
 
__±hªad_muãx©å_öô


388 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


389 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


390 #¥agm®
wók
 
__±hªad_rwlock_de°roy


391 #¥agm®
wók
 
__±hªad_rwlock_rdlock


392 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


393 #¥agm®
wók
 
__±hªad_rwlock_wæock


394 #¥agm®
wók
 
__±hªad_rwlock_åywæock


395 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


396 #¥agm®
wók
 
__±hªad_key_¸óã


397 #¥agm®
wók
 
__±hªad_£t•ecific


398 #¥agm®
wók
 
__±hªad_gë•ecific


399 #¥agm®
wók
 
__±hªad_⁄˚


400 #¥agm®
wók
 
__±hªad_öôülize


401 #¥agm®
wók
 
__±hªad_©f‹k


402 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


403 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


404 #¥agm®
wók
 
_±hªad_˛ónup_push


405 #¥agm®
wók
 
_±hªad_˛ónup_p›


411 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_MISC


35 
	#CSIGNAL
 0x000000f‡

	)

36 
	#CLONE_VM
 0x00000100

	)

37 
	#CLONE_FS
 0x00000200

	)

38 
	#CLONE_FILES
 0x00000400

	)

39 
	#CLONE_SIGHAND
 0x00000800

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

43 
	#CLONE_PARENT
 0x00008000

	)

45 
	#CLONE_THREAD
 0x00010000

	)

46 
	#CLONE_NEWNS
 0x00020000

	)

47 
	#CLONE_SYSVSEM
 0x00040000

	)

48 
	#CLONE_SETTLS
 0x00080000

	)

49 
	#CLONE_PARENT_SETTID
 0x00100000

	)

51 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

53 
	#CLONE_DETACHED
 0x00400000

	)

54 
	#CLONE_UNTRACED
 0x00800000

	)

56 
	#CLONE_CHILD_SETTID
 0x01000000

	)

58 
	#CLONE_STOPPED
 0x02000000

	)

62 
	ssched_∑øm


64 
	m__sched_¥i‹ôy
;

67 
	g__BEGIN_DECLS


70 #ifde‡
__USE_MISC


71 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

72 
__Êags
, *
__¨g
Ë
__THROW
;

75 
__END_DECLS


79 #i‡!
deföed
 
__deföed_sched∑øm
 \

80 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

81 
	#__deföed_sched∑øm
 1

	)

83 
	s__sched_∑øm


85 
__sched_¥i‹ôy
;

87 #unde‡
__√ed_sched∑øm


91 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


92 
	#__˝u_£t_t_deföed


	)

94 
	#__CPU_SETSIZE
 1024

	)

95 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

98 
	t__˝u_mask
;

101 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

102 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

107 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

108 } 
	t˝u_£t_t
;

111 
	#__CPU_ZERO
(
˝u£ç
) \

113 
__i
; \

114 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

115 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

116 
__¨r
->
__bôs
[
__i
] = 0; \

117 
	}
} 0)

	)

118 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

119 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

120 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

121 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

122 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

123 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


24 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

26 
	#__FD_ZERO
(
fd•
) \

28 
__d0
, 
__d1
; \

29 
__asm__
 
	`__vﬁ©ûe__
 ("cld;Ñep; stosl" \

30 : "=c" (
__d0
), "=D" (
__d1
) \

31 : "a" (0), "0" ( (
fd_£t
) \

32 /  (
__fd_mask
)), \

33 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

35 } 0)

	)

37 
	#__FD_SET
(
fd
, 
fd•
) \

38 
__asm__
 
	`__vﬁ©ûe__
 ("btsl %1,%0" \

39 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

40 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

41 : "cc","mem‹y")

	)

42 
	#__FD_CLR
(
fd
, 
fd•
) \

43 
__asm__
 
	`__vﬁ©ûe__
 ("btrl %1,%0" \

44 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

45 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

46 : "cc","mem‹y")

	)

47 
	#__FD_ISSET
(
fd
, 
fd•
) \

48 (
__exãnsi⁄__
 \

49 ({
__ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
 ("btl %1,%2 ; setcb %b0" \

51 : "=q" (
__ªsu…
) \

52 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

53 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

55 
__ªsu…
; }))

	)

61 
	#__FD_ZERO
(
£t
) \

63 
__i
; \

64 
fd_£t
 *
__¨r
 = (
£t
); \

65 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

66 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

67 } 0)

	)

68 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

69 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

70 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


323 
__ölöe
 
size_t


324 
	`__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

325 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

326 {  (
__ps
 !
NULL


327 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

330 
__BEGIN_NAMESPACE_C99


333 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

334 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

335 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

339 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

340 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

341 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

342 
__END_NAMESPACE_C99


345 #ifdef 
__USE_GNU


348 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

349 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

350 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

354 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

355 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

356 
size_t
 
__nwc
, size_à
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

362 #ifde‡
__USE_XOPEN


364 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

368 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

372 
__BEGIN_NAMESPACE_C99


375 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

376 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

378 #ifde‡
__USE_ISOC99


380 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

381 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

382 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

383 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

389 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

390 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

394 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

395 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

396 
__THROW
;

398 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

401 
__exãnsi⁄__


402 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

403 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

404 
__THROW
;

408 
__exãnsi⁄__


409 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

410 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

411 
__ba£
Ë
__THROW
;

413 
__END_NAMESPACE_C99


415 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


418 
__exãnsi⁄__


419 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

420 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

421 
__THROW
;

425 
__exãnsi⁄__


426 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

427 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

428 
__ba£
Ë
__THROW
;

431 #ifde‡
__USE_GNU


445 
	~<xloˇÀ.h
>

449 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

450 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

451 
__loˇÀ_t
 
__loc
Ë
__THROW
;

453 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

455 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

457 
__exãnsi⁄__


458 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

459 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

460 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

462 
__exãnsi⁄__


463 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

464 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

465 
__ba£
, 
__loˇÀ_t
 
__loc
)

466 
__THROW
;

468 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

470 
__THROW
;

472 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

473 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

474 
__THROW
;

476 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

478 
__loˇÀ_t
 
__loc
Ë
__THROW
;

484 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

485 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

486 
__THROW
;

487 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

489 
__THROW
;

490 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__group
Ë
__THROW
;

494 #i‚de‡
__wc°ﬁ_öã∫Æ_deföed


495 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

496 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

497 
__ba£
, 
__group
Ë
__THROW
;

498 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

500 #i‚de‡
__wc°oul_öã∫Æ_deföed


501 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

502 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

503 
__ba£
, 
__group
Ë
__THROW
;

504 
	#__wc°oul_öã∫Æ_deföed
 1

	)

506 #i‚de‡
__wc°ﬁl_öã∫Æ_deföed


507 
__exãnsi⁄__


508 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

509 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

510 
__ba£
, 
__group
Ë
__THROW
;

511 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

513 #i‚de‡
__wc°ouŒ_öã∫Æ_deföed


514 
__exãnsi⁄__


515 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

516 
__ª°ri˘
 
__≈å
,

517 
wch¨_t
 **

518 
__ª°ri˘
 
__íd±r
,

519 
__ba£
,

520 
__group
Ë
__THROW
;

521 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

525 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

527 
__BEGIN_NAMESPACE_C99


529 
__ölöe
 

530 
	`__NTH
 (
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

532 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

533 
__ölöe
 

534 
__NTH
 (
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

536 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

537 
__ölöe
 

538 
__NTH
 (
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

540 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

541 
__END_NAMESPACE_C99


543 #ifde‡
__USE_GNU


544 
__ölöe
 

545 
__NTH
 (
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

546 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

547 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

548 
__ölöe
 

549 
__NTH
 (
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

551 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

554 
__exãnsi⁄__


555 
__ölöe
 

556 
__NTH
 (
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

558 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

559 
__exãnsi⁄__


560 
__ölöe
 

561 
__NTH
 (
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

562 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

563 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

568 #ifdef 
__USE_GNU


571 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

575 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

576 
__THROW
;

581 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_C99


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 
__END_NAMESPACE_C99


650 #ifde‡
__USE_ISOC99


651 
__BEGIN_NAMESPACE_C99


657 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
)

665 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
)

669 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
)

672 
__THROW
 ;

674 
__END_NAMESPACE_C99


678 
__BEGIN_NAMESPACE_C99


683 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

684 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

690 
wöt_t
 
	`gëwch¨
 ();

697 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

698 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

704 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

712 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

713 
__FILE
 *
__ª°ri˘
 
__°ªam
);

719 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

720 
__FILE
 *
__ª°ri˘
 
__°ªam
);

727 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

728 
__END_NAMESPACE_C99


731 #ifde‡
__USE_GNU


739 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

740 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

748 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

756 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

775 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

776 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
__BEGIN_NAMESPACE_C99


793 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

794 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

795 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

796 
__END_NAMESPACE_C99


798 #ifde‡
__USE_GNU


799 
	~<xloˇÀ.h
>

803 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

804 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

805 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

806 
__loˇÀ_t
 
__loc
Ë
__THROW
;

815 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


816 
	#__√ed_iswxxx


	)

817 
	~<w˘y≥.h
>

820 
__END_DECLS


	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

24 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/pthread.h

15 #i‚de‡
_PTHREAD_H


16 
	#_PTHREAD_H
 1

	)

18 
	~<„©uªs.h
>

20 
	~<sched.h
>

21 
	~<time.h
>

23 
	#__√ed_sig£t_t


	)

24 
	~<sig«l.h
>

25 
	~<bôs/±hªadty≥s.h
>

26 
	~<bôs/öô•ö.h
>

29 
	g__BEGIN_DECLS


33 
	#PTHREAD_MUTEX_INITIALIZER
 \

34 {0, 0, 0, 
PTHREAD_MUTEX_TIMED_NP
, 
__LOCK_INITIALIZER
}

	)

35 #ifde‡
__USE_GNU


36 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

37 {0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__LOCK_INITIALIZER
}

	)

38 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

39 {0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__LOCK_INITIALIZER
}

	)

40 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

41 {0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__LOCK_INITIALIZER
}

	)

44 
	#PTHREAD_COND_INITIALIZER
 {
__LOCK_INITIALIZER
, 0, "", 0}

	)

46 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


47 
	#PTHREAD_RWLOCK_INITIALIZER
 \

48 { 
__LOCK_INITIALIZER
, 0, 
NULL
, NULL, NULL, \

49 
PTHREAD_RWLOCK_DEFAULT_NP
, 
PTHREAD_PROCESS_PRIVATE
 }

	)

51 #ifde‡
__USE_GNU


52 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

53 { 
__LOCK_INITIALIZER
, 0, 
NULL
, NULL, NULL, \

54 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, 
PTHREAD_PROCESS_PRIVATE
 }

	)

61 
	mPTHREAD_CREATE_JOINABLE
,

62 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

63 
	mPTHREAD_CREATE_DETACHED


64 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

69 
	mPTHREAD_INHERIT_SCHED
,

70 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

71 
	mPTHREAD_EXPLICIT_SCHED


72 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

77 
	mPTHREAD_SCOPE_SYSTEM
,

78 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

79 
	mPTHREAD_SCOPE_PROCESS


80 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

85 
	mPTHREAD_MUTEX_TIMED_NP
,

86 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

87 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

88 
	mPTHREAD_MUTEX_ADAPTIVE_NP


89 #ifde‡
__USE_UNIX98


91 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

92 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

93 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

94 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


96 #ifde‡
__USE_GNU


98 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_ADAPTIVE_NP


104 
	mPTHREAD_PROCESS_PRIVATE
,

105 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

106 
	mPTHREAD_PROCESS_SHARED


107 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

110 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


113 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

114 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

115 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

116 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_WRITER_NP


120 
	#PTHREAD_ONCE_INIT
 0

	)

124 #ifde‡
__USE_XOPEN2K


126 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

131 
	s_±hªad_˛ónup_buf„r


133 (*
	m__routöe
) (*);

134 *
	m__¨g
;

135 
	m__ˇn˚…y≥
;

136 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

143 
	mPTHREAD_CANCEL_ENABLE
,

144 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

145 
	mPTHREAD_CANCEL_DISABLE


146 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

150 
	mPTHREAD_CANCEL_DEFERRED
,

151 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

152 
	mPTHREAD_CANCEL_ASYNCHRONOUS


153 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

155 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

163 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__thªadp
,

164 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

165 *(*
__°¨t_routöe
) (*),

166 *
__ª°ri˘
 
__¨g
Ë
__THROW
;

169 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
;

172 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

175 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

180 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

186 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

194 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

197 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

200 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

201 
__dëach°©e
Ë
__THROW
;

204 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

205 *
__dëach°©e
Ë
__THROW
;

208 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

209 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


210 
__∑øm
Ë
__THROW
;

213 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


214 
__©å
,

215 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

216 
__THROW
;

219 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

220 
__THROW
;

223 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


224 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

225 
__THROW
;

228 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

229 
__öhîô
Ë
__THROW
;

232 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


233 
__©å
, *
__ª°ri˘
 
__öhîô
)

234 
__THROW
;

237 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

238 
__THROW
;

241 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

242 *
__ª°ri˘
 
__sc›e
Ë
__THROW
;

244 #ifde‡
__USE_UNIX98


246 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

247 
size_t
 
__gu¨dsize
Ë
__THROW
;

250 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


251 
__©å
, 
size_t
 *
__ª°ri˘
 
__gu¨dsize
)

252 
__THROW
;

259 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

260 *
__°ackaddr
Ë
__THROW
;

263 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


264 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

265 
__THROW
;

267 #ifde‡
__USE_XOPEN2K


271 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

272 
size_t
 
__°acksize
Ë
__THROW
;

275 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

276 **
__ª°ri˘
 
__°ackaddr
,

277 
size_t
 *
__ª°ri˘
 
__°acksize
Ë
__THROW
;

283 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

284 
size_t
 
__°acksize
Ë
__THROW
;

287 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


288 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

289 
__THROW
;

291 #ifde‡
__USE_GNU


295 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
Ë
__THROW
;

302 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

303 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

304 
__THROW
;

307 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

308 *
__ª°ri˘
 
__pﬁicy
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
;

312 #ifde‡
__USE_UNIX98


314 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

317 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

320 #ifde‡
__USE_GNU


325 
	$±hªad_yõld
 (Ë
__THROW
;

332 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

333 
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


334 
__muãx_©å
Ë
__THROW
;

337 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

340 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

343 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

345 #ifde‡
__USE_XOPEN2K


347 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

348 
__c⁄°
 
time•ec
 *
__ª°ri˘


349 
__ab°ime
Ë
__THROW
;

353 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

360 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

363 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

366 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

367 
__ª°ri˘
 
__©å
,

368 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

371 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

372 
__psh¨ed
Ë
__THROW
;

374 #ifde‡
__USE_UNIX98


378 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

379 
__THROW
;

382 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


383 
__©å
, *
__ª°ri˘
 
__köd
Ë
__THROW
;

391 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

392 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


393 
__c⁄d_©å
Ë
__THROW
;

396 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

399 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

402 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

406 
	`±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

407 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
);

413 
	`±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

414 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

415 
__c⁄°
 
time•ec
 *
__ª°ri˘


416 
__ab°ime
);

421 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

424 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

427 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

428 
__ª°ri˘
 
__©å
,

429 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

432 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

433 
__psh¨ed
Ë
__THROW
;

436 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


441 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

442 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


443 
__©å
Ë
__THROW
;

446 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

449 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

452 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

454 #ifde‡
__USE_XOPEN2K


456 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

457 
__c⁄°
 
time•ec
 *
__ª°ri˘


458 
__ab°ime
Ë
__THROW
;

462 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

465 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

467 #ifde‡
__USE_XOPEN2K


469 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

470 
__c⁄°
 
time•ec
 *
__ª°ri˘


471 
__ab°ime
Ë
__THROW
;

475 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

481 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

484 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

487 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

488 
__ª°ri˘
 
__©å
,

489 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

492 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

493 
__psh¨ed
Ë
__THROW
;

496 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
,

497 *
__¥ef
Ë
__THROW
;

500 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

501 
__¥ef
Ë
__THROW
;

504 #ifde‡
__USE_XOPEN2K


510 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

511 
__THROW
;

514 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

517 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

520 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

523 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

528 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

529 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


530 
__©å
, 
__cou¡
Ë
__THROW
;

532 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

534 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

536 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

538 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

539 
__ª°ri˘
 
__©å
,

540 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

542 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

543 
__psh¨ed
Ë
__THROW
;

545 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

557 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

558 (*
__de°r_fun˘i⁄
Ë(*)Ë
__THROW
;

561 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

564 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

565 
__c⁄°
 *
__poöãr
Ë
__THROW
;

568 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

580 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

581 (*
__öô_routöe
) ());

588 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

592 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

595 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__ˇn˚…hªad
);

600 
	`±hªad_ã°ˇn˚l
 ();

610 
	#±hªad_˛ónup_push
(
routöe
,
¨g
) \

611 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

612 
	`_±hªad_˛ónup_push
 (&
_buf„r
, (
routöe
), (
¨g
));

	)

614 
	`_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

615 (*
__routöe
) (*),

616 *
__¨g
Ë
__THROW
;

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
	`_±hªad_˛ónup_p›
 (&
_buf„r
, (
execuã
)); 
	}

	)
}

624 
	$_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

625 
__execuã
Ë
__THROW
;

630 #ifde‡
__USE_GNU


631 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
,
¨g
) \

632 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

633 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
routöe
), (
¨g
));

	)

635 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

636 (*
__routöe
) (*),

637 *
__¨g
Ë
__THROW
;

643 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

644 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
execuã
)); 
	}

	)
}

646 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

647 
__execuã
Ë
__THROW
;

651 #ifde‡
__USE_XOPEN2K


653 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

654 
__˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

659 
	~<bôs/sigthªad.h
>

675 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

676 (*
__∑ª¡
) (),

677 (*
__chûd
Ë()Ë
__THROW
;

682 
	$±hªad_kûl_Ÿhî_thªads_≈
 (Ë
__THROW
;

684 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

47 
__END_NAMESPACE_C99


52 #i‚de‡
WEOF


53 
	#WEOF
 (0xffffffffu)

	)

56 #unde‡
__√ed_iswxxx


61 #i‚de‡
__iswxxx_deföed


62 
	#__iswxxx_deföed
 1

	)

64 
__BEGIN_NAMESPACE_C99


67 
	tw˘y≥_t
;

68 
__END_NAMESPACE_C99


70 #i‚de‡
_ISwbô


75 
	~<ídün.h
>

76 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


77 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

79 
	#_ISwbô
(
bô
) \

80 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

81 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

82 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

83 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

88 
__ISwuµî
 = 0,

89 
__ISwlowî
 = 1,

90 
__ISwÆpha
 = 2,

91 
__ISwdigô
 = 3,

92 
__ISwxdigô
 = 4,

93 
__ISw•a˚
 = 5,

94 
__ISw¥öt
 = 6,

95 
__ISwgøph
 = 7,

96 
__ISwbœnk
 = 8,

97 
__ISw˙ål
 = 9,

98 
__ISwpun˘
 = 10,

99 
__ISwÆnum
 = 11,

101 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

102 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

103 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

104 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

105 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

106 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

107 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

108 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

109 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

110 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

111 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

112 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

117 
__BEGIN_DECLS


119 
__BEGIN_NAMESPACE_C99


126 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

132 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

135 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

139 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

143 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

148 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

161 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

166 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

176 #ifde‡
__USE_ISOC99


177 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

186 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

190 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

191 
__END_NAMESPACE_C99


198 
__BEGIN_NAMESPACE_C99


201 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

202 
__END_NAMESPACE_C99


203 #ifde‡
__USE_GNU


204 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

207 
__BEGIN_NAMESPACE_C99


209 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

213 
__END_NAMESPACE_C99


215 
__END_DECLS


222 #ifde‡
_WCTYPE_H


228 
__BEGIN_DECLS


230 
__BEGIN_NAMESPACE_C99


233 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

236 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

237 
__END_NAMESPACE_C99


239 #ifde‡
__USE_GNU


241 
	~<xloˇÀ.h
>

245 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

251 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

254 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

258 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

262 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

267 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

290 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

295 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

299 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

300 
__THROW
;

304 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

305 
__THROW
;

313 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

316 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

320 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

321 
__THROW
;

324 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

325 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

329 
__END_DECLS


	@/usr/include/bits/initspin.h

23 
	#__LT_SPINLOCK_INIT
 0

	)

26 
	#__LOCK_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

27 
	#__ALT_LOCK_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

28 
	#__ATOMIC_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

77 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

81 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


23 #i‚de‡
sigc⁄ãxt_°ru˘


26 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

28 
	~<asm/sigc⁄ãxt.h
>

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

27 
	~<bôs/sigc⁄ãxt.h
>

31 
	tgªg_t
;

34 
	#NGREG
 19

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_GS
 = 0,

44 
	#REG_GS
 
REG_GS


	)

45 
	mREG_FS
,

46 
	#REG_FS
 
REG_FS


	)

47 
	mREG_ES
,

48 
	#REG_ES
 
REG_ES


	)

49 
	mREG_DS
,

50 
	#REG_DS
 
REG_DS


	)

51 
	mREG_EDI
,

52 
	#REG_EDI
 
REG_EDI


	)

53 
	mREG_ESI
,

54 
	#REG_ESI
 
REG_ESI


	)

55 
	mREG_EBP
,

56 
	#REG_EBP
 
REG_EBP


	)

57 
	mREG_ESP
,

58 
	#REG_ESP
 
REG_ESP


	)

59 
	mREG_EBX
,

60 
	#REG_EBX
 
REG_EBX


	)

61 
	mREG_EDX
,

62 
	#REG_EDX
 
REG_EDX


	)

63 
	mREG_ECX
,

64 
	#REG_ECX
 
REG_ECX


	)

65 
	mREG_EAX
,

66 
	#REG_EAX
 
REG_EAX


	)

67 
	mREG_TRAPNO
,

68 
	#REG_TRAPNO
 
REG_TRAPNO


	)

69 
	mREG_ERR
,

70 
	#REG_ERR
 
REG_ERR


	)

71 
	mREG_EIP
,

72 
	#REG_EIP
 
REG_EIP


	)

73 
	mREG_CS
,

74 
	#REG_CS
 
REG_CS


	)

75 
	mREG_EFL
,

76 
	#REG_EFL
 
REG_EFL


	)

77 
	mREG_UESP
,

78 
	#REG_UESP
 
REG_UESP


	)

79 
	mREG_SS


80 
	#REG_SS
 
REG_SS


	)

85 
	s_libc_Âªg


87 
	msignifiˇnd
[4];

88 
	mexp⁄ít
;

91 
	s_libc_Â°©e


93 
	mcw
;

94 
	msw
;

95 
	mèg
;

96 
	mùoff
;

97 
	mcs£l
;

98 
	md©aoff
;

99 
	md©a£l
;

100 
_libc_Âªg
 
	m_°
[8];

101 
	m°©us
;

105 
_libc_Â°©e
 *
	tÂªg£t_t
;

110 
gªg£t_t
 
	mgªgs
;

113 
Âªg£t_t
 
	mÂªgs
;

114 
	mﬁdmask
;

115 
	m¸2
;

116 } 
	tmc⁄ãxt_t
;

119 
	suc⁄ãxt


121 
	muc_Êags
;

122 
uc⁄ãxt
 *
	muc_lök
;

123 
°ack_t
 
	muc_°ack
;

124 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

125 
__sig£t_t
 
	muc_sigmask
;

126 
_libc_Â°©e
 
	m__Âªgs_mem
;

127 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASM_X86_SIGCONTEXT_H


2 
	#_ASM_X86_SIGCONTEXT_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

8 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

9 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

23 
	s_Âx_sw_byãs
 {

24 
__u32
 
	mmagic1
;

25 
__u32
 
	mexãnded_size
;

28 
__u64
 
	mx°©e_bv
;

33 
__u32
 
	mx°©e_size
;

38 
__u32
 
	m∑ddög
[7];

41 #ifde‡
__i386__


56 
	s_Âªg
 {

57 
	msignifiˇnd
[4];

58 
	mexp⁄ít
;

61 
	s_Âxªg
 {

62 
	msignifiˇnd
[4];

63 
	mexp⁄ít
;

64 
	m∑ddög
[3];

67 
	s_xmmªg
 {

68 
	mñemít
[4];

71 
	s_Â°©e
 {

73 
	mcw
;

74 
	msw
;

75 
	mèg
;

76 
	mùoff
;

77 
	mcs£l
;

78 
	md©aoff
;

79 
	md©a£l
;

80 
_Âªg
 
	m_°
[8];

81 
	m°©us
;

82 
	mmagic
;

85 
	m_fx§_ív
[6];

86 
	mmxc§
;

87 
	mª£rved
;

88 
_Âxªg
 
	m_fx§_°
[8];

89 
_xmmªg
 
	m_xmm
[8];

90 
	m∑ddög1
[44];

93 
	m∑ddög2
[12];

94 
_Âx_sw_byãs
 
	msw_ª£rved
;

99 
	#X86_FXSR_MAGIC
 0x0000

	)

104 
	ssigc⁄ãxt
 {

105 
	mgs
, 
	m__gsh
;

106 
	mfs
, 
	m__fsh
;

107 
	mes
, 
	m__esh
;

108 
	mds
, 
	m__dsh
;

109 
	medi
;

110 
	mesi
;

111 
	mebp
;

112 
	me•
;

113 
	mebx
;

114 
	medx
;

115 
	mecx
;

116 
	móx
;

117 
	må≠no
;

118 
	mîr
;

119 
	meù
;

120 
	mcs
, 
	m__csh
;

121 
	meÊags
;

122 
	me•_©_sig«l
;

123 
	mss
, 
	m__ssh
;

124 
_Â°©e
 *
	mÂ°©e
;

125 
	mﬁdmask
;

126 
	m¸2
;

134 
	s_Â°©e
 {

135 
__u16
 
	mcwd
;

136 
__u16
 
	mswd
;

137 
__u16
 
	mtwd
;

139 
__u16
 
	mf›
;

140 
__u64
 
	mrù
;

141 
__u64
 
	mrdp
;

142 
__u32
 
	mmxc§
;

143 
__u32
 
	mmxc§_mask
;

144 
__u32
 
	m°_•a˚
[32];

145 
__u32
 
	mxmm_•a˚
[64];

146 
__u32
 
	mª£rved2
[12];

148 
__u32
 
	mª£rved3
[12];

149 
_Âx_sw_byãs
 
	msw_ª£rved
;

157 
	ssigc⁄ãxt
 {

158 
	mr8
;

159 
	mr9
;

160 
	mr10
;

161 
	mr11
;

162 
	mr12
;

163 
	mr13
;

164 
	mr14
;

165 
	mr15
;

166 
	mrdi
;

167 
	mrsi
;

168 
	mrbp
;

169 
	mrbx
;

170 
	mrdx
;

171 
	møx
;

172 
	mrcx
;

173 
	mr•
;

174 
	mrù
;

175 
	meÊags
;

176 
	mcs
;

177 
	mgs
;

178 
	mfs
;

179 
	m__∑d0
;

180 
	mîr
;

181 
	må≠no
;

182 
	mﬁdmask
;

183 
	m¸2
;

184 
_Â°©e
 *
	mÂ°©e
;

185 
	mª£rved1
[8];

190 
	s_xßve_hdr
 {

191 
__u64
 
	mx°©e_bv
;

192 
__u64
 
	mª£rved1
[2];

193 
__u64
 
	mª£rved2
[5];

202 
	s_x°©e
 {

203 
_Â°©e
 
	mÂ°©e
;

204 
_xßve_hdr
 
	mx°©e_hdr
;

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

103 
	#Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

104 
	#Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

114 #ifde‡
CONFIG_LBD


115 
u64
 
	t£˘‹_t
;

116 
u64
 
	tblk˙t_t
;

118 
	t£˘‹_t
;

119 
	tblk˙t_t
;

126 #i‚de‡
pgoff_t


127 
	#pgoff_t
 

	)

137 #ifde‡
__CHECKER__


138 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

140 
	#__bôwi£__


	)

142 #ifde‡
__CHECK_ENDIAN__


143 
	#__bôwi£
 
__bôwi£__


	)

145 
	#__bôwi£


	)

148 
__u16
 
	t__bôwi£
 
	t__À16
;

149 
__u16
 
	t__bôwi£
 
	t__be16
;

150 
__u32
 
	t__bôwi£
 
	t__À32
;

151 
__u32
 
	t__bôwi£
 
	t__be32
;

152 
__u64
 
	t__bôwi£
 
	t__À64
;

153 
__u64
 
	t__bôwi£
 
	t__be64
;

155 
__u16
 
	t__bôwi£
 
	t__sum16
;

156 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/öt-Œ64.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	tumode_t
;

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 #i‚de‡
__ASSEMBLY__


17 
__sig√d__
 
	t__s8
;

18 
	t__u8
;

20 
__sig√d__
 
	t__s16
;

21 
	t__u16
;

23 
__sig√d__
 
	t__s32
;

24 
	t__u32
;

26 #ifde‡
__GNUC__


27 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

28 
__exãnsi⁄__
 
	t__u64
;

30 
__sig√d__
 
	t__s64
;

31 
	t__u64
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@
1
.
1
/usr/include
176
3738
api/api_lib.c
api/api_msg.c
api/err.c
api/netbuf.c
api/netdb.c
api/netifapi.c
api/sockets.c
api/tcpip.c
core/dhcp.c
core/dns.c
core/init.c
core/ipv4/autoip.c
core/ipv4/icmp.c
core/ipv4/igmp.c
core/ipv4/inet.c
core/ipv4/inet_chksum.c
core/ipv4/ip.c
core/ipv4/ip_addr.c
core/ipv4/ip_frag.c
core/ipv6/icmp6.c
core/ipv6/inet6.c
core/ipv6/ip6.c
core/ipv6/ip6_addr.c
core/mem.c
core/memp.c
core/netif.c
core/pbuf.c
core/raw.c
core/snmp/asn1_dec.c
core/snmp/asn1_enc.c
core/snmp/mib2.c
core/snmp/mib_structs.c
core/snmp/msg_in.c
core/snmp/msg_out.c
core/stats.c
core/sys.c
core/tcp.c
core/tcp_in.c
core/tcp_out.c
core/udp.c
include/ipv4/lwip/autoip.h
include/ipv4/lwip/icmp.h
include/ipv4/lwip/igmp.h
include/ipv4/lwip/inet.h
include/ipv4/lwip/inet_chksum.h
include/ipv4/lwip/ip.h
include/ipv4/lwip/ip_addr.h
include/ipv4/lwip/ip_frag.h
include/ipv6/lwip/icmp.h
include/ipv6/lwip/inet.h
include/ipv6/lwip/ip.h
include/ipv6/lwip/ip_addr.h
include/lwip/api.h
include/lwip/api_msg.h
include/lwip/arch.h
include/lwip/debug.h
include/lwip/def.h
include/lwip/dhcp.h
include/lwip/dns.h
include/lwip/err.h
include/lwip/init.h
include/lwip/mem.h
include/lwip/memp.h
include/lwip/memp_std.h
include/lwip/netbuf.h
include/lwip/netdb.h
include/lwip/netif.h
include/lwip/netifapi.h
include/lwip/opt.h
include/lwip/pbuf.h
include/lwip/raw.h
include/lwip/sio.h
include/lwip/snmp.h
include/lwip/snmp_asn1.h
include/lwip/snmp_msg.h
include/lwip/snmp_structs.h
include/lwip/sockets.h
include/lwip/stats.h
include/lwip/sys.h
include/lwip/tcp.h
include/lwip/tcpip.h
include/lwip/udp.h
include/netif/etharp.h
include/netif/loopif.h
include/netif/ppp_oe.h
include/netif/slipif.h
netif/etharp.c
netif/ethernetif.c
netif/loopif.c
netif/ppp/auth.c
netif/ppp/auth.h
netif/ppp/chap.c
netif/ppp/chap.h
netif/ppp/chpms.c
netif/ppp/chpms.h
netif/ppp/fsm.c
netif/ppp/fsm.h
netif/ppp/ipcp.c
netif/ppp/ipcp.h
netif/ppp/lcp.c
netif/ppp/lcp.h
netif/ppp/magic.c
netif/ppp/magic.h
netif/ppp/md5.c
netif/ppp/md5.h
netif/ppp/pap.c
netif/ppp/pap.h
netif/ppp/ppp.c
netif/ppp/ppp.h
netif/ppp/ppp_oe.c
netif/ppp/pppdebug.h
netif/ppp/randm.c
netif/ppp/randm.h
netif/ppp/vj.c
netif/ppp/vj.h
netif/ppp/vjbsdhdr.h
netif/slipif.c
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/bits/wchar.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/initspin.h
/usr/include/bits/sigthread.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/sys/ucontext.h
/usr/include/asm/sigcontext.h
/usr/include/linux/types.h
/usr/include/asm/types.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types.h
/usr/include/linux/stddef.h
